
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Rain_Gauge/src/RainGaugeTest/target/1.4.4/electron/RainGaugeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c34  0808001c  0808001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  08082c50  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c4  20000000  08082c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006b4  200000c4  200000c4  000300c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08082d18  08082d18  00022d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08082d40  08082d40  00022d40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009c813  00000000  00000000  00022d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ea56  00000000  00000000  000bf557  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012c0c  00000000  00000000  000cdfad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001dc8  00000000  00000000  000e0bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003018  00000000  00000000  000e2981  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023a72  00000000  00000000  000e5999  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000223ad  00000000  00000000  0010940b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4826  00000000  00000000  0012b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b868  00000000  00000000  001cffe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <link_dynalib_end+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <link_dynalib_end+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f001 ff81 	bl	8081f34 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <link_dynalib_end+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <link_dynalib_end+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f001 ff86 	bl	8081f4a <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <link_dynalib_end+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000000 	.word	0x20000000
 8080048:	08082c54 	.word	0x08082c54
 808004c:	200000c4 	.word	0x200000c4
 8080050:	200000c4 	.word	0x200000c4
 8080054:	20000778 	.word	0x20000778
 8080058:	20000778 	.word	0x20000778

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f000 fe8d 	bl	8080d7c <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08082c14 	.word	0x08082c14
 8080084:	08082c48 	.word	0x08082c48

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b814 	b.w	80800b4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f899 	bl	80801c4 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f000 be33 	b.w	8080d00 <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 bb4f 	b.w	808073c <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 bb55 	b.w	808074c <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <setup>:

SYSTEM_MODE (MANUAL)


void setup()
{
 80800b4:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
 80800b6:	f001 fa11 	bl	80814dc <_Z16_fetch_usbserialv>
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
 80800ba:	4d10      	ldr	r5, [pc, #64]	; (80800fc <setup+0x48>)
SYSTEM_MODE (MANUAL)


void setup()
{
  Serial.begin(9600);
 80800bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800c0:	f001 f9f2 	bl	80814a8 <_ZN9USBSerial5beginEl>
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
 80800c4:	4c0e      	ldr	r4, [pc, #56]	; (8080100 <setup+0x4c>)


void setup()
{
  Serial.begin(9600);
  pinMode(buttonPin, INPUT_PULLUP);
 80800c6:	2102      	movs	r1, #2
 80800c8:	2004      	movs	r0, #4
 80800ca:	f001 fc37 	bl	808193c <pinMode>
  pinMode(led1, OUTPUT);
 80800ce:	8828      	ldrh	r0, [r5, #0]
 80800d0:	2101      	movs	r1, #1
 80800d2:	f001 fc33 	bl	808193c <pinMode>
  pinMode(led2, OUTPUT);
 80800d6:	2101      	movs	r1, #1
 80800d8:	8820      	ldrh	r0, [r4, #0]
 80800da:	f001 fc2f 	bl	808193c <pinMode>
  prevMinute = Time.minute();
 80800de:	f000 fd8d 	bl	8080bfc <_ZN9TimeClass6minuteEv>
 80800e2:	4b08      	ldr	r3, [pc, #32]	; (8080104 <setup+0x50>)
  digitalWrite(led1, LOW);
 80800e4:	2100      	movs	r1, #0
{
  Serial.begin(9600);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  prevMinute = Time.minute();
 80800e6:	6018      	str	r0, [r3, #0]
  digitalWrite(led1, LOW);
 80800e8:	8828      	ldrh	r0, [r5, #0]
 80800ea:	f001 fc38 	bl	808195e <digitalWrite>
  digitalWrite(led2, LOW);
 80800ee:	8820      	ldrh	r0, [r4, #0]
 80800f0:	2100      	movs	r1, #0
}
 80800f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  prevMinute = Time.minute();
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
 80800f6:	f001 bc32 	b.w	808195e <digitalWrite>
 80800fa:	bf00      	nop
 80800fc:	200000ec 	.word	0x200000ec
 8080100:	20000000 	.word	0x20000000
 8080104:	200000e4 	.word	0x200000e4

08080108 <_Z14initConnectionv>:
    //Serial.println("Sleep");
    //publish("warning", "Call setEnabled() to enable deep sleep");

}

void initConnection(){
 8080108:	b510      	push	{r4, lr}
 808010a:	4c14      	ldr	r4, [pc, #80]	; (808015c <_Z14initConnectionv+0x54>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808010c:	2300      	movs	r3, #0
 808010e:	461a      	mov	r2, r3
 8080110:	4619      	mov	r1, r3
 8080112:	6860      	ldr	r0, [r4, #4]
 8080114:	f000 faaa 	bl	808066c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8080118:	2300      	movs	r3, #0
 808011a:	461a      	mov	r2, r3
 808011c:	4619      	mov	r1, r3
 808011e:	6860      	ldr	r0, [r4, #4]
 8080120:	f000 fa84 	bl	808062c <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080124:	2200      	movs	r2, #0
 8080126:	4611      	mov	r1, r2
 8080128:	6860      	ldr	r0, [r4, #4]
 808012a:	f000 fa97 	bl	808065c <network_ready>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808012e:	b168      	cbz	r0, 808014c <_Z14initConnectionv+0x44>
 8080130:	4b0a      	ldr	r3, [pc, #40]	; (808015c <_Z14initConnectionv+0x54>)
 8080132:	2200      	movs	r2, #0
 8080134:	4611      	mov	r1, r2
 8080136:	6858      	ldr	r0, [r3, #4]
 8080138:	f000 fa90 	bl	808065c <network_ready>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808013c:	f000 face 	bl	80806dc <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080140:	f000 fadc 	bl	80806fc <spark_cloud_flag_connected>
 8080144:	b928      	cbnz	r0, 8080152 <_Z14initConnectionv+0x4a>
            spark_process();
 8080146:	f000 fac1 	bl	80806cc <spark_process>
 808014a:	e7f9      	b.n	8080140 <_Z14initConnectionv+0x38>
 808014c:	f000 fabe 	bl	80806cc <spark_process>
 8080150:	e7e8      	b.n	8080124 <_Z14initConnectionv+0x1c>
  Cellular.on();
  Cellular.connect();
  waitUntil(Cellular.ready);
  Particle.connect();
  waitUntil(Particle.connected);
}
 8080152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8080156:	f000 bad1 	b.w	80806fc <spark_cloud_flag_connected>
 808015a:	bf00      	nop
 808015c:	20000504 	.word	0x20000504

08080160 <_Z20disconnectConnectionv>:

void disconnectConnection(){
 8080160:	b510      	push	{r4, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080162:	f000 fac3 	bl	80806ec <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080166:	f000 fac9 	bl	80806fc <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808016a:	4604      	mov	r4, r0
 808016c:	b950      	cbnz	r0, 8080184 <_Z20disconnectConnectionv+0x24>
 808016e:	f000 fac5 	bl	80806fc <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080172:	4806      	ldr	r0, [pc, #24]	; (808018c <_Z20disconnectConnectionv+0x2c>)
 8080174:	4623      	mov	r3, r4
 8080176:	4622      	mov	r2, r4
 8080178:	4621      	mov	r1, r4
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
 808017a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808017e:	6840      	ldr	r0, [r0, #4]
 8080180:	f000 ba7c 	b.w	808067c <network_off>
            spark_process();
 8080184:	f000 faa2 	bl	80806cc <spark_process>
 8080188:	e7ed      	b.n	8080166 <_Z20disconnectConnectionv+0x6>
 808018a:	bf00      	nop
 808018c:	20000504 	.word	0x20000504

08080190 <_Z22calculateRainGaugeDatav>:
void calculateRainGaugeData(){
 8080190:	b510      	push	{r4, lr}
   if (buttonState == HIGH)
 8080192:	4b0a      	ldr	r3, [pc, #40]	; (80801bc <_Z22calculateRainGaugeDatav+0x2c>)
 8080194:	681b      	ldr	r3, [r3, #0]
 8080196:	2b01      	cmp	r3, #1
 8080198:	d00f      	beq.n	80801ba <_Z22calculateRainGaugeDatav+0x2a>
        //Serial.println("HIGH");
        }
        else
        {
        // turn LED off:
        i++;
 808019a:	4c09      	ldr	r4, [pc, #36]	; (80801c0 <_Z22calculateRainGaugeDatav+0x30>)
        delay(400);
 808019c:	f44f 70c8 	mov.w	r0, #400	; 0x190
        //Serial.println("HIGH");
        }
        else
        {
        // turn LED off:
        i++;
 80801a0:	6823      	ldr	r3, [r4, #0]
 80801a2:	3301      	adds	r3, #1
 80801a4:	6023      	str	r3, [r4, #0]
        delay(400);
 80801a6:	f000 fd3d 	bl	8080c24 <delay>
        Serial.println(i);
 80801aa:	f001 f997 	bl	80814dc <_Z16_fetch_usbserialv>
 80801ae:	6821      	ldr	r1, [r4, #0]
 80801b0:	220a      	movs	r2, #10

        //Serial.println(err);
        }
 80801b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        else
        {
        // turn LED off:
        i++;
        delay(400);
        Serial.println(i);
 80801b6:	f000 bc8a 	b.w	8080ace <_ZN5Print7printlnEii>
 80801ba:	bd10      	pop	{r4, pc}
 80801bc:	200000e8 	.word	0x200000e8
 80801c0:	200000d8 	.word	0x200000d8

080801c4 <loop>:
  prevMinute = Time.minute();
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
}
void loop()
{
 80801c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80801c8:	b086      	sub	sp, #24
    //System.wakeup();
    currentMinute = Time.minute();
 80801ca:	f000 fd17 	bl	8080bfc <_ZN9TimeClass6minuteEv>
 80801ce:	4e47      	ldr	r6, [pc, #284]	; (80802ec <loop+0x128>)
    // read the state of the pushbutton value:
    buttonState = digitalRead(buttonPin);

    if (currentMinute - prevMinute >= logInterval)
 80801d0:	4c47      	ldr	r4, [pc, #284]	; (80802f0 <loop+0x12c>)
  digitalWrite(led2, LOW);
}
void loop()
{
    //System.wakeup();
    currentMinute = Time.minute();
 80801d2:	6030      	str	r0, [r6, #0]
    // read the state of the pushbutton value:
    buttonState = digitalRead(buttonPin);
 80801d4:	2004      	movs	r0, #4
 80801d6:	f001 fbdb 	bl	8081990 <digitalRead>
 80801da:	4b46      	ldr	r3, [pc, #280]	; (80802f4 <loop+0x130>)

    if (currentMinute - prevMinute >= logInterval)
 80801dc:	6822      	ldr	r2, [r4, #0]
 80801de:	4d46      	ldr	r5, [pc, #280]	; (80802f8 <loop+0x134>)
void loop()
{
    //System.wakeup();
    currentMinute = Time.minute();
    // read the state of the pushbutton value:
    buttonState = digitalRead(buttonPin);
 80801e0:	6018      	str	r0, [r3, #0]

    if (currentMinute - prevMinute >= logInterval)
 80801e2:	6833      	ldr	r3, [r6, #0]
 80801e4:	46b0      	mov	r8, r6
 80801e6:	1a9b      	subs	r3, r3, r2
 80801e8:	682a      	ldr	r2, [r5, #0]
 80801ea:	462f      	mov	r7, r5
 80801ec:	4293      	cmp	r3, r2
 80801ee:	d35e      	bcc.n	80802ae <loop+0xea>
    {
      
       //log the data
      if (temp == 0){
 80801f0:	4d42      	ldr	r5, [pc, #264]	; (80802fc <loop+0x138>)
 80801f2:	4e43      	ldr	r6, [pc, #268]	; (8080300 <loop+0x13c>)
 80801f4:	682b      	ldr	r3, [r5, #0]
 80801f6:	b11b      	cbz	r3, 8080200 <loop+0x3c>
        strcat(payload,String(i));
      }
      else {
        strcat(payload,",");
 80801f8:	4942      	ldr	r1, [pc, #264]	; (8080304 <loop+0x140>)
 80801fa:	4843      	ldr	r0, [pc, #268]	; (8080308 <loop+0x144>)
 80801fc:	f001 fed6 	bl	8081fac <strcat>
        strcat(payload,String(i));
 8080200:	220a      	movs	r2, #10
 8080202:	6831      	ldr	r1, [r6, #0]
 8080204:	a802      	add	r0, sp, #8
 8080206:	f000 fbb4 	bl	8080972 <_ZN6StringC1Eih>
 808020a:	9902      	ldr	r1, [sp, #8]
 808020c:	483e      	ldr	r0, [pc, #248]	; (8080308 <loop+0x144>)
 808020e:	f001 fecd 	bl	8081fac <strcat>
 8080212:	a802      	add	r0, sp, #8
 8080214:	f000 fb55 	bl	80808c2 <_ZN6StringD1Ev>
      }
      Serial.print("Payload:");
 8080218:	f001 f960 	bl	80814dc <_Z16_fetch_usbserialv>
 808021c:	493b      	ldr	r1, [pc, #236]	; (808030c <loop+0x148>)
 808021e:	f000 fbe1 	bl	80809e4 <_ZN5Print5printEPKc>
      Serial.println(payload);
 8080222:	f001 f95b 	bl	80814dc <_Z16_fetch_usbserialv>
 8080226:	4938      	ldr	r1, [pc, #224]	; (8080308 <loop+0x144>)
 8080228:	f000 fbef 	bl	8080a0a <_ZN5Print7printlnEPKc>
      Serial.println(prevMinute);
 808022c:	f001 f956 	bl	80814dc <_Z16_fetch_usbserialv>
 8080230:	220a      	movs	r2, #10
 8080232:	6821      	ldr	r1, [r4, #0]
 8080234:	f000 fc1f 	bl	8080a76 <_ZN5Print7printlnEmi>
     
      temp++;
      i = 0;
 8080238:	2200      	movs	r2, #0
 808023a:	6032      	str	r2, [r6, #0]
      prevMinute = currentMinute;
 808023c:	f8d8 2000 	ldr.w	r2, [r8]

      if (temp >= sendInterval/logInterval)
 8080240:	6839      	ldr	r1, [r7, #0]
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
      i = 0;
      prevMinute = currentMinute;
 8080242:	6022      	str	r2, [r4, #0]

      if (temp >= sendInterval/logInterval)
 8080244:	4a32      	ldr	r2, [pc, #200]	; (8080310 <loop+0x14c>)
      }
      Serial.print("Payload:");
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
 8080246:	682b      	ldr	r3, [r5, #0]
      i = 0;
      prevMinute = currentMinute;

      if (temp >= sendInterval/logInterval)
 8080248:	6812      	ldr	r2, [r2, #0]
      }
      Serial.print("Payload:");
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
 808024a:	3301      	adds	r3, #1
      i = 0;
      prevMinute = currentMinute;

      if (temp >= sendInterval/logInterval)
 808024c:	fbb2 f2f1 	udiv	r2, r2, r1
 8080250:	4293      	cmp	r3, r2
      }
      Serial.print("Payload:");
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
 8080252:	602b      	str	r3, [r5, #0]
      i = 0;
      prevMinute = currentMinute;

      if (temp >= sendInterval/logInterval)
 8080254:	d347      	bcc.n	80802e6 <loop+0x122>
      {
        //initiliaze connection, Cellular and Particle cloud handshake
        initConnection();
 8080256:	f7ff ff57 	bl	8080108 <_Z14initConnectionv>
 808025a:	4b2e      	ldr	r3, [pc, #184]	; (8080314 <loop+0x150>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808025c:	4a2a      	ldr	r2, [pc, #168]	; (8080308 <loop+0x144>)
 808025e:	781b      	ldrb	r3, [r3, #0]
 8080260:	492d      	ldr	r1, [pc, #180]	; (8080318 <loop+0x154>)
 8080262:	f88d 3000 	strb.w	r3, [sp]
 8080266:	a802      	add	r0, sp, #8
 8080268:	233c      	movs	r3, #60	; 0x3c
 808026a:	f000 fef5 	bl	8081058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808026e:	9c03      	ldr	r4, [sp, #12]
 8080270:	b17c      	cbz	r4, 8080292 <loop+0xce>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080272:	6863      	ldr	r3, [r4, #4]
 8080274:	3b01      	subs	r3, #1
 8080276:	6063      	str	r3, [r4, #4]
 8080278:	b95b      	cbnz	r3, 8080292 <loop+0xce>
        {
          _M_dispose();
 808027a:	6823      	ldr	r3, [r4, #0]
 808027c:	4620      	mov	r0, r4
 808027e:	689b      	ldr	r3, [r3, #8]
 8080280:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080282:	68a3      	ldr	r3, [r4, #8]
 8080284:	3b01      	subs	r3, #1
 8080286:	60a3      	str	r3, [r4, #8]
 8080288:	b91b      	cbnz	r3, 8080292 <loop+0xce>
            _M_destroy();
 808028a:	6823      	ldr	r3, [r4, #0]
 808028c:	4620      	mov	r0, r4
 808028e:	68db      	ldr	r3, [r3, #12]
 8080290:	4798      	blx	r3

        //send Message
        Particle.publish("StatusRainGauge",payload ,PRIVATE);
        //Particle.publish("Temp", "{ 'id':'1C93F9','data':'ffffffffffffffff30','time':'1570476362','device':'1C93F9','lqi':'Good'}", PRIVATE);
        Serial.println("Message sent");
 8080292:	f001 f923 	bl	80814dc <_Z16_fetch_usbserialv>
 8080296:	4921      	ldr	r1, [pc, #132]	; (808031c <loop+0x158>)
 8080298:	f000 fbb7 	bl	8080a0a <_ZN5Print7printlnEPKc>
        strcpy(payload,"");
 808029c:	4920      	ldr	r1, [pc, #128]	; (8080320 <loop+0x15c>)
 808029e:	481a      	ldr	r0, [pc, #104]	; (8080308 <loop+0x144>)
 80802a0:	f001 fe9d 	bl	8081fde <strcpy>
        temp = 0;
        counter = 0;
 80802a4:	4a1f      	ldr	r2, [pc, #124]	; (8080324 <loop+0x160>)
        //send Message
        Particle.publish("StatusRainGauge",payload ,PRIVATE);
        //Particle.publish("Temp", "{ 'id':'1C93F9','data':'ffffffffffffffff30','time':'1570476362','device':'1C93F9','lqi':'Good'}", PRIVATE);
        Serial.println("Message sent");
        strcpy(payload,"");
        temp = 0;
 80802a6:	2300      	movs	r3, #0
 80802a8:	602b      	str	r3, [r5, #0]
        counter = 0;
 80802aa:	6013      	str	r3, [r2, #0]
 80802ac:	e01b      	b.n	80802e6 <loop+0x122>
      }
     
    }
    else
    {
        if (!counter)
 80802ae:	4c1d      	ldr	r4, [pc, #116]	; (8080324 <loop+0x160>)
 80802b0:	6826      	ldr	r6, [r4, #0]
 80802b2:	b9b6      	cbnz	r6, 80802e2 <loop+0x11e>
        {
        //Turn of everything
        disconnectConnection();
 80802b4:	f7ff ff54 	bl	8080160 <_Z20disconnectConnectionv>
        //Go to sleep
        Serial.println("Sleep");
 80802b8:	f001 f910 	bl	80814dc <_Z16_fetch_usbserialv>
 80802bc:	491a      	ldr	r1, [pc, #104]	; (8080328 <loop+0x164>)
 80802be:	f000 fba4 	bl	8080a0a <_ZN5Print7printlnEPKc>
        Serial.println("");
 80802c2:	f001 f90b 	bl	80814dc <_Z16_fetch_usbserialv>
 80802c6:	4916      	ldr	r1, [pc, #88]	; (8080320 <loop+0x15c>)
 80802c8:	f000 fb9f 	bl	8080a0a <_ZN5Print7printlnEPKc>
        System.sleep(logInterval * 60);
 80802cc:	682a      	ldr	r2, [r5, #0]
    static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF);
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, long seconds=0) {
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
 80802ce:	4b17      	ldr	r3, [pc, #92]	; (808032c <loop+0x168>)
 80802d0:	213c      	movs	r1, #60	; 0x3c
 80802d2:	681b      	ldr	r3, [r3, #0]
 80802d4:	434a      	muls	r2, r1
 80802d6:	a802      	add	r0, sp, #8
 80802d8:	4631      	mov	r1, r6
 80802da:	f000 fa7f 	bl	80807dc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
        counter = 1;
 80802de:	2301      	movs	r3, #1
 80802e0:	6023      	str	r3, [r4, #0]
        }

        //Get the rain gauge data 
        calculateRainGaugeData();
 80802e2:	f7ff ff55 	bl	8080190 <_Z22calculateRainGaugeDatav>
    }

    //Serial.println("Sleep");
    //publish("warning", "Call setEnabled() to enable deep sleep");

}
 80802e6:	b006      	add	sp, #24
 80802e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80802ec:	200000c8 	.word	0x200000c8
 80802f0:	200000e4 	.word	0x200000e4
 80802f4:	200000e8 	.word	0x200000e8
 80802f8:	20000004 	.word	0x20000004
 80802fc:	200000cc 	.word	0x200000cc
 8080300:	200000d8 	.word	0x200000d8
 8080304:	080827a4 	.word	0x080827a4
 8080308:	200000f0 	.word	0x200000f0
 808030c:	080827a6 	.word	0x080827a6
 8080310:	20000008 	.word	0x20000008
 8080314:	200000d6 	.word	0x200000d6
 8080318:	080827af 	.word	0x080827af
 808031c:	080827bf 	.word	0x080827bf
 8080320:	0808288e 	.word	0x0808288e
 8080324:	200000dc 	.word	0x200000dc
 8080328:	080827cc 	.word	0x080827cc
 808032c:	200000e0 	.word	0x200000e0

08080330 <_GLOBAL__sub_I_led1>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080330:	4b09      	ldr	r3, [pc, #36]	; (8080358 <_GLOBAL__sub_I_led1+0x28>)
        delay(400);
        Serial.println(i);

        //Serial.println(err);
        }
 8080332:	b510      	push	{r4, lr}
 8080334:	2400      	movs	r4, #0
 8080336:	601c      	str	r4, [r3, #0]
 8080338:	4b08      	ldr	r3, [pc, #32]	; (808035c <_GLOBAL__sub_I_led1+0x2c>)
 808033a:	2201      	movs	r2, #1
 808033c:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 808033e:	f000 f811 	bl	8080364 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8080346:	4b06      	ldr	r3, [pc, #24]	; (8080360 <_GLOBAL__sub_I_led1+0x30>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080348:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808034a:	701c      	strb	r4, [r3, #0]
 808034c:	805c      	strh	r4, [r3, #2]
 808034e:	809a      	strh	r2, [r3, #4]
 8080350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080354:	f000 b926 	b.w	80805a4 <set_system_mode>
 8080358:	200000e0 	.word	0x200000e0
 808035c:	200000d6 	.word	0x200000d6
 8080360:	200000d0 	.word	0x200000d0

08080364 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8080364:	b508      	push	{r3, lr}
 8080366:	4b02      	ldr	r3, [pc, #8]	; (8080370 <HAL_Pin_Map+0xc>)
 8080368:	681b      	ldr	r3, [r3, #0]
 808036a:	681b      	ldr	r3, [r3, #0]
 808036c:	9301      	str	r3, [sp, #4]
 808036e:	bd08      	pop	{r3, pc}
 8080370:	080401b0 	.word	0x080401b0

08080374 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080374:	b508      	push	{r3, lr}
 8080376:	4b02      	ldr	r3, [pc, #8]	; (8080380 <HAL_Pin_Mode+0xc>)
 8080378:	681b      	ldr	r3, [r3, #0]
 808037a:	689b      	ldr	r3, [r3, #8]
 808037c:	9301      	str	r3, [sp, #4]
 808037e:	bd08      	pop	{r3, pc}
 8080380:	080401b0 	.word	0x080401b0

08080384 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080384:	b508      	push	{r3, lr}
 8080386:	4b02      	ldr	r3, [pc, #8]	; (8080390 <HAL_Get_Pin_Mode+0xc>)
 8080388:	681b      	ldr	r3, [r3, #0]
 808038a:	68db      	ldr	r3, [r3, #12]
 808038c:	9301      	str	r3, [sp, #4]
 808038e:	bd08      	pop	{r3, pc}
 8080390:	080401b0 	.word	0x080401b0

08080394 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080394:	b508      	push	{r3, lr}
 8080396:	4b02      	ldr	r3, [pc, #8]	; (80803a0 <HAL_GPIO_Write+0xc>)
 8080398:	681b      	ldr	r3, [r3, #0]
 808039a:	691b      	ldr	r3, [r3, #16]
 808039c:	9301      	str	r3, [sp, #4]
 808039e:	bd08      	pop	{r3, pc}
 80803a0:	080401b0 	.word	0x080401b0

080803a4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80803a4:	b508      	push	{r3, lr}
 80803a6:	4b02      	ldr	r3, [pc, #8]	; (80803b0 <HAL_GPIO_Read+0xc>)
 80803a8:	681b      	ldr	r3, [r3, #0]
 80803aa:	695b      	ldr	r3, [r3, #20]
 80803ac:	9301      	str	r3, [sp, #4]
 80803ae:	bd08      	pop	{r3, pc}
 80803b0:	080401b0 	.word	0x080401b0

080803b4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80803b4:	b508      	push	{r3, lr}
 80803b6:	4b02      	ldr	r3, [pc, #8]	; (80803c0 <HAL_SPI_Init+0xc>)
 80803b8:	681b      	ldr	r3, [r3, #0]
 80803ba:	69db      	ldr	r3, [r3, #28]
 80803bc:	9301      	str	r3, [sp, #4]
 80803be:	bd08      	pop	{r3, pc}
 80803c0:	080401b4 	.word	0x080401b4

080803c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80803c4:	b508      	push	{r3, lr}
 80803c6:	4b02      	ldr	r3, [pc, #8]	; (80803d0 <HAL_SPI_Is_Enabled+0xc>)
 80803c8:	681b      	ldr	r3, [r3, #0]
 80803ca:	6a1b      	ldr	r3, [r3, #32]
 80803cc:	9301      	str	r3, [sp, #4]
 80803ce:	bd08      	pop	{r3, pc}
 80803d0:	080401b4 	.word	0x080401b4

080803d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80803d4:	b508      	push	{r3, lr}
 80803d6:	4b02      	ldr	r3, [pc, #8]	; (80803e0 <HAL_RNG_GetRandomNumber+0xc>)
 80803d8:	681b      	ldr	r3, [r3, #0]
 80803da:	685b      	ldr	r3, [r3, #4]
 80803dc:	9301      	str	r3, [sp, #4]
 80803de:	bd08      	pop	{r3, pc}
 80803e0:	0804019c 	.word	0x0804019c

080803e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80803e4:	b508      	push	{r3, lr}
 80803e6:	4b02      	ldr	r3, [pc, #8]	; (80803f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80803e8:	681b      	ldr	r3, [r3, #0]
 80803ea:	695b      	ldr	r3, [r3, #20]
 80803ec:	9301      	str	r3, [sp, #4]
 80803ee:	bd08      	pop	{r3, pc}
 80803f0:	0804019c 	.word	0x0804019c

080803f4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80803f4:	b508      	push	{r3, lr}
 80803f6:	4b02      	ldr	r3, [pc, #8]	; (8080400 <HAL_RTC_Get_UnixTime+0xc>)
 80803f8:	681b      	ldr	r3, [r3, #0]
 80803fa:	69db      	ldr	r3, [r3, #28]
 80803fc:	9301      	str	r3, [sp, #4]
 80803fe:	bd08      	pop	{r3, pc}
 8080400:	0804019c 	.word	0x0804019c

08080404 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8080404:	b508      	push	{r3, lr}
 8080406:	4b02      	ldr	r3, [pc, #8]	; (8080410 <HAL_RTC_Time_Is_Valid+0xc>)
 8080408:	681b      	ldr	r3, [r3, #0]
 808040a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808040c:	9301      	str	r3, [sp, #4]
 808040e:	bd08      	pop	{r3, pc}
 8080410:	0804019c 	.word	0x0804019c

08080414 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080414:	b508      	push	{r3, lr}
 8080416:	4b02      	ldr	r3, [pc, #8]	; (8080420 <os_mutex_create+0xc>)
 8080418:	681b      	ldr	r3, [r3, #0]
 808041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808041c:	9301      	str	r3, [sp, #4]
 808041e:	bd08      	pop	{r3, pc}
 8080420:	080401d0 	.word	0x080401d0

08080424 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080424:	b508      	push	{r3, lr}
 8080426:	4b02      	ldr	r3, [pc, #8]	; (8080430 <HAL_USART_Init+0xc>)
 8080428:	681b      	ldr	r3, [r3, #0]
 808042a:	699b      	ldr	r3, [r3, #24]
 808042c:	9301      	str	r3, [sp, #4]
 808042e:	bd08      	pop	{r3, pc}
 8080430:	080401c4 	.word	0x080401c4

08080434 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080434:	b508      	push	{r3, lr}
 8080436:	4b02      	ldr	r3, [pc, #8]	; (8080440 <HAL_USART_Write_Data+0xc>)
 8080438:	681b      	ldr	r3, [r3, #0]
 808043a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808043c:	9301      	str	r3, [sp, #4]
 808043e:	bd08      	pop	{r3, pc}
 8080440:	080401c4 	.word	0x080401c4

08080444 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080444:	b508      	push	{r3, lr}
 8080446:	4b02      	ldr	r3, [pc, #8]	; (8080450 <HAL_USART_Available_Data+0xc>)
 8080448:	681b      	ldr	r3, [r3, #0]
 808044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808044c:	9301      	str	r3, [sp, #4]
 808044e:	bd08      	pop	{r3, pc}
 8080450:	080401c4 	.word	0x080401c4

08080454 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080454:	b508      	push	{r3, lr}
 8080456:	4b02      	ldr	r3, [pc, #8]	; (8080460 <HAL_USART_Read_Data+0xc>)
 8080458:	681b      	ldr	r3, [r3, #0]
 808045a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808045c:	9301      	str	r3, [sp, #4]
 808045e:	bd08      	pop	{r3, pc}
 8080460:	080401c4 	.word	0x080401c4

08080464 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080464:	b508      	push	{r3, lr}
 8080466:	4b02      	ldr	r3, [pc, #8]	; (8080470 <HAL_USART_Peek_Data+0xc>)
 8080468:	681b      	ldr	r3, [r3, #0]
 808046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808046c:	9301      	str	r3, [sp, #4]
 808046e:	bd08      	pop	{r3, pc}
 8080470:	080401c4 	.word	0x080401c4

08080474 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080474:	b508      	push	{r3, lr}
 8080476:	4b02      	ldr	r3, [pc, #8]	; (8080480 <HAL_USART_Flush_Data+0xc>)
 8080478:	681b      	ldr	r3, [r3, #0]
 808047a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808047c:	9301      	str	r3, [sp, #4]
 808047e:	bd08      	pop	{r3, pc}
 8080480:	080401c4 	.word	0x080401c4

08080484 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080484:	b508      	push	{r3, lr}
 8080486:	4b02      	ldr	r3, [pc, #8]	; (8080490 <HAL_USART_Is_Enabled+0xc>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808048c:	9301      	str	r3, [sp, #4]
 808048e:	bd08      	pop	{r3, pc}
 8080490:	080401c4 	.word	0x080401c4

08080494 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080494:	b508      	push	{r3, lr}
 8080496:	4b02      	ldr	r3, [pc, #8]	; (80804a0 <HAL_USART_Available_Data_For_Write+0xc>)
 8080498:	681b      	ldr	r3, [r3, #0]
 808049a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808049c:	9301      	str	r3, [sp, #4]
 808049e:	bd08      	pop	{r3, pc}
 80804a0:	080401c4 	.word	0x080401c4

080804a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80804a4:	b508      	push	{r3, lr}
 80804a6:	4b02      	ldr	r3, [pc, #8]	; (80804b0 <HAL_I2C_Write_Data+0xc>)
 80804a8:	681b      	ldr	r3, [r3, #0]
 80804aa:	6a1b      	ldr	r3, [r3, #32]
 80804ac:	9301      	str	r3, [sp, #4]
 80804ae:	bd08      	pop	{r3, pc}
 80804b0:	080401ac 	.word	0x080401ac

080804b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80804b4:	b508      	push	{r3, lr}
 80804b6:	4b02      	ldr	r3, [pc, #8]	; (80804c0 <HAL_I2C_Available_Data+0xc>)
 80804b8:	681b      	ldr	r3, [r3, #0]
 80804ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80804bc:	9301      	str	r3, [sp, #4]
 80804be:	bd08      	pop	{r3, pc}
 80804c0:	080401ac 	.word	0x080401ac

080804c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80804c4:	b508      	push	{r3, lr}
 80804c6:	4b02      	ldr	r3, [pc, #8]	; (80804d0 <HAL_I2C_Read_Data+0xc>)
 80804c8:	681b      	ldr	r3, [r3, #0]
 80804ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80804cc:	9301      	str	r3, [sp, #4]
 80804ce:	bd08      	pop	{r3, pc}
 80804d0:	080401ac 	.word	0x080401ac

080804d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b02      	ldr	r3, [pc, #8]	; (80804e0 <HAL_I2C_Peek_Data+0xc>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80804dc:	9301      	str	r3, [sp, #4]
 80804de:	bd08      	pop	{r3, pc}
 80804e0:	080401ac 	.word	0x080401ac

080804e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80804e4:	b508      	push	{r3, lr}
 80804e6:	4b02      	ldr	r3, [pc, #8]	; (80804f0 <HAL_I2C_Flush_Data+0xc>)
 80804e8:	681b      	ldr	r3, [r3, #0]
 80804ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80804ec:	9301      	str	r3, [sp, #4]
 80804ee:	bd08      	pop	{r3, pc}
 80804f0:	080401ac 	.word	0x080401ac

080804f4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80804f4:	b508      	push	{r3, lr}
 80804f6:	4b02      	ldr	r3, [pc, #8]	; (8080500 <HAL_I2C_Is_Enabled+0xc>)
 80804f8:	681b      	ldr	r3, [r3, #0]
 80804fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80804fc:	9301      	str	r3, [sp, #4]
 80804fe:	bd08      	pop	{r3, pc}
 8080500:	080401ac 	.word	0x080401ac

08080504 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080504:	b508      	push	{r3, lr}
 8080506:	4b02      	ldr	r3, [pc, #8]	; (8080510 <HAL_I2C_Init+0xc>)
 8080508:	681b      	ldr	r3, [r3, #0]
 808050a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808050c:	9301      	str	r3, [sp, #4]
 808050e:	bd08      	pop	{r3, pc}
 8080510:	080401ac 	.word	0x080401ac

08080514 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8080514:	b508      	push	{r3, lr}
 8080516:	4b02      	ldr	r3, [pc, #8]	; (8080520 <inet_gethostbyname+0xc>)
 8080518:	681b      	ldr	r3, [r3, #0]
 808051a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808051c:	9301      	str	r3, [sp, #4]
 808051e:	bd08      	pop	{r3, pc}
 8080520:	08060020 	.word	0x08060020

08080524 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8080524:	b508      	push	{r3, lr}
 8080526:	4b02      	ldr	r3, [pc, #8]	; (8080530 <HAL_USB_USART_Init+0xc>)
 8080528:	681b      	ldr	r3, [r3, #0]
 808052a:	681b      	ldr	r3, [r3, #0]
 808052c:	9301      	str	r3, [sp, #4]
 808052e:	bd08      	pop	{r3, pc}
 8080530:	0806001c 	.word	0x0806001c

08080534 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8080534:	b508      	push	{r3, lr}
 8080536:	4b02      	ldr	r3, [pc, #8]	; (8080540 <HAL_USB_USART_Begin+0xc>)
 8080538:	681b      	ldr	r3, [r3, #0]
 808053a:	685b      	ldr	r3, [r3, #4]
 808053c:	9301      	str	r3, [sp, #4]
 808053e:	bd08      	pop	{r3, pc}
 8080540:	0806001c 	.word	0x0806001c

08080544 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8080544:	b508      	push	{r3, lr}
 8080546:	4b02      	ldr	r3, [pc, #8]	; (8080550 <HAL_USB_USART_Available_Data+0xc>)
 8080548:	681b      	ldr	r3, [r3, #0]
 808054a:	691b      	ldr	r3, [r3, #16]
 808054c:	9301      	str	r3, [sp, #4]
 808054e:	bd08      	pop	{r3, pc}
 8080550:	0806001c 	.word	0x0806001c

08080554 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8080554:	b508      	push	{r3, lr}
 8080556:	4b02      	ldr	r3, [pc, #8]	; (8080560 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8080558:	681b      	ldr	r3, [r3, #0]
 808055a:	695b      	ldr	r3, [r3, #20]
 808055c:	9301      	str	r3, [sp, #4]
 808055e:	bd08      	pop	{r3, pc}
 8080560:	0806001c 	.word	0x0806001c

08080564 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080564:	b508      	push	{r3, lr}
 8080566:	4b02      	ldr	r3, [pc, #8]	; (8080570 <HAL_USB_USART_Receive_Data+0xc>)
 8080568:	681b      	ldr	r3, [r3, #0]
 808056a:	699b      	ldr	r3, [r3, #24]
 808056c:	9301      	str	r3, [sp, #4]
 808056e:	bd08      	pop	{r3, pc}
 8080570:	0806001c 	.word	0x0806001c

08080574 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8080574:	b508      	push	{r3, lr}
 8080576:	4b02      	ldr	r3, [pc, #8]	; (8080580 <HAL_USB_USART_Send_Data+0xc>)
 8080578:	681b      	ldr	r3, [r3, #0]
 808057a:	69db      	ldr	r3, [r3, #28]
 808057c:	9301      	str	r3, [sp, #4]
 808057e:	bd08      	pop	{r3, pc}
 8080580:	0806001c 	.word	0x0806001c

08080584 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080584:	b508      	push	{r3, lr}
 8080586:	4b02      	ldr	r3, [pc, #8]	; (8080590 <HAL_USB_USART_Flush_Data+0xc>)
 8080588:	681b      	ldr	r3, [r3, #0]
 808058a:	6a1b      	ldr	r3, [r3, #32]
 808058c:	9301      	str	r3, [sp, #4]
 808058e:	bd08      	pop	{r3, pc}
 8080590:	0806001c 	.word	0x0806001c

08080594 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8080594:	b508      	push	{r3, lr}
 8080596:	4b02      	ldr	r3, [pc, #8]	; (80805a0 <system_mode+0xc>)
 8080598:	681b      	ldr	r3, [r3, #0]
 808059a:	681b      	ldr	r3, [r3, #0]
 808059c:	9301      	str	r3, [sp, #4]
 808059e:	bd08      	pop	{r3, pc}
 80805a0:	080401a4 	.word	0x080401a4

080805a4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80805a4:	b508      	push	{r3, lr}
 80805a6:	4b02      	ldr	r3, [pc, #8]	; (80805b0 <set_system_mode+0xc>)
 80805a8:	681b      	ldr	r3, [r3, #0]
 80805aa:	685b      	ldr	r3, [r3, #4]
 80805ac:	9301      	str	r3, [sp, #4]
 80805ae:	bd08      	pop	{r3, pc}
 80805b0:	080401a4 	.word	0x080401a4

080805b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80805b4:	b508      	push	{r3, lr}
 80805b6:	4b02      	ldr	r3, [pc, #8]	; (80805c0 <system_delay_ms+0xc>)
 80805b8:	681b      	ldr	r3, [r3, #0]
 80805ba:	695b      	ldr	r3, [r3, #20]
 80805bc:	9301      	str	r3, [sp, #4]
 80805be:	bd08      	pop	{r3, pc}
 80805c0:	080401a4 	.word	0x080401a4

080805c4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80805c4:	b508      	push	{r3, lr}
 80805c6:	4b02      	ldr	r3, [pc, #8]	; (80805d0 <system_sleep+0xc>)
 80805c8:	681b      	ldr	r3, [r3, #0]
 80805ca:	699b      	ldr	r3, [r3, #24]
 80805cc:	9301      	str	r3, [sp, #4]
 80805ce:	bd08      	pop	{r3, pc}
 80805d0:	080401a4 	.word	0x080401a4

080805d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80805d4:	b508      	push	{r3, lr}
 80805d6:	4b02      	ldr	r3, [pc, #8]	; (80805e0 <application_thread_current+0xc>)
 80805d8:	681b      	ldr	r3, [r3, #0]
 80805da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80805dc:	9301      	str	r3, [sp, #4]
 80805de:	bd08      	pop	{r3, pc}
 80805e0:	080401a4 	.word	0x080401a4

080805e4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80805e4:	b508      	push	{r3, lr}
 80805e6:	4b02      	ldr	r3, [pc, #8]	; (80805f0 <application_thread_invoke+0xc>)
 80805e8:	681b      	ldr	r3, [r3, #0]
 80805ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80805ec:	9301      	str	r3, [sp, #4]
 80805ee:	bd08      	pop	{r3, pc}
 80805f0:	080401a4 	.word	0x080401a4

080805f4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80805f4:	b508      	push	{r3, lr}
 80805f6:	4b02      	ldr	r3, [pc, #8]	; (8080600 <system_thread_get_state+0xc>)
 80805f8:	681b      	ldr	r3, [r3, #0]
 80805fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80805fc:	9301      	str	r3, [sp, #4]
 80805fe:	bd08      	pop	{r3, pc}
 8080600:	080401a4 	.word	0x080401a4

08080604 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080604:	b508      	push	{r3, lr}
 8080606:	4b03      	ldr	r3, [pc, #12]	; (8080614 <system_ctrl_set_app_request_handler+0x10>)
 8080608:	681b      	ldr	r3, [r3, #0]
 808060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808060e:	9301      	str	r3, [sp, #4]
 8080610:	bd08      	pop	{r3, pc}
 8080612:	0000      	.short	0x0000
 8080614:	080401a4 	.word	0x080401a4

08080618 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080618:	b508      	push	{r3, lr}
 808061a:	4b03      	ldr	r3, [pc, #12]	; (8080628 <system_ctrl_set_result+0x10>)
 808061c:	681b      	ldr	r3, [r3, #0]
 808061e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080622:	9301      	str	r3, [sp, #4]
 8080624:	bd08      	pop	{r3, pc}
 8080626:	0000      	.short	0x0000
 8080628:	080401a4 	.word	0x080401a4

0808062c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808062c:	b508      	push	{r3, lr}
 808062e:	4b02      	ldr	r3, [pc, #8]	; (8080638 <network_connect+0xc>)
 8080630:	681b      	ldr	r3, [r3, #0]
 8080632:	685b      	ldr	r3, [r3, #4]
 8080634:	9301      	str	r3, [sp, #4]
 8080636:	bd08      	pop	{r3, pc}
 8080638:	080401c8 	.word	0x080401c8

0808063c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808063c:	b508      	push	{r3, lr}
 808063e:	4b02      	ldr	r3, [pc, #8]	; (8080648 <network_connecting+0xc>)
 8080640:	681b      	ldr	r3, [r3, #0]
 8080642:	689b      	ldr	r3, [r3, #8]
 8080644:	9301      	str	r3, [sp, #4]
 8080646:	bd08      	pop	{r3, pc}
 8080648:	080401c8 	.word	0x080401c8

0808064c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808064c:	b508      	push	{r3, lr}
 808064e:	4b02      	ldr	r3, [pc, #8]	; (8080658 <network_disconnect+0xc>)
 8080650:	681b      	ldr	r3, [r3, #0]
 8080652:	68db      	ldr	r3, [r3, #12]
 8080654:	9301      	str	r3, [sp, #4]
 8080656:	bd08      	pop	{r3, pc}
 8080658:	080401c8 	.word	0x080401c8

0808065c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808065c:	b508      	push	{r3, lr}
 808065e:	4b02      	ldr	r3, [pc, #8]	; (8080668 <network_ready+0xc>)
 8080660:	681b      	ldr	r3, [r3, #0]
 8080662:	691b      	ldr	r3, [r3, #16]
 8080664:	9301      	str	r3, [sp, #4]
 8080666:	bd08      	pop	{r3, pc}
 8080668:	080401c8 	.word	0x080401c8

0808066c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808066c:	b508      	push	{r3, lr}
 808066e:	4b02      	ldr	r3, [pc, #8]	; (8080678 <network_on+0xc>)
 8080670:	681b      	ldr	r3, [r3, #0]
 8080672:	695b      	ldr	r3, [r3, #20]
 8080674:	9301      	str	r3, [sp, #4]
 8080676:	bd08      	pop	{r3, pc}
 8080678:	080401c8 	.word	0x080401c8

0808067c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808067c:	b508      	push	{r3, lr}
 808067e:	4b02      	ldr	r3, [pc, #8]	; (8080688 <network_off+0xc>)
 8080680:	681b      	ldr	r3, [r3, #0]
 8080682:	699b      	ldr	r3, [r3, #24]
 8080684:	9301      	str	r3, [sp, #4]
 8080686:	bd08      	pop	{r3, pc}
 8080688:	080401c8 	.word	0x080401c8

0808068c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808068c:	b508      	push	{r3, lr}
 808068e:	4b02      	ldr	r3, [pc, #8]	; (8080698 <network_listen+0xc>)
 8080690:	681b      	ldr	r3, [r3, #0]
 8080692:	69db      	ldr	r3, [r3, #28]
 8080694:	9301      	str	r3, [sp, #4]
 8080696:	bd08      	pop	{r3, pc}
 8080698:	080401c8 	.word	0x080401c8

0808069c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808069c:	b508      	push	{r3, lr}
 808069e:	4b02      	ldr	r3, [pc, #8]	; (80806a8 <network_listening+0xc>)
 80806a0:	681b      	ldr	r3, [r3, #0]
 80806a2:	6a1b      	ldr	r3, [r3, #32]
 80806a4:	9301      	str	r3, [sp, #4]
 80806a6:	bd08      	pop	{r3, pc}
 80806a8:	080401c8 	.word	0x080401c8

080806ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80806ac:	b508      	push	{r3, lr}
 80806ae:	4b02      	ldr	r3, [pc, #8]	; (80806b8 <network_set_listen_timeout+0xc>)
 80806b0:	681b      	ldr	r3, [r3, #0]
 80806b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80806b4:	9301      	str	r3, [sp, #4]
 80806b6:	bd08      	pop	{r3, pc}
 80806b8:	080401c8 	.word	0x080401c8

080806bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80806bc:	b508      	push	{r3, lr}
 80806be:	4b02      	ldr	r3, [pc, #8]	; (80806c8 <network_get_listen_timeout+0xc>)
 80806c0:	681b      	ldr	r3, [r3, #0]
 80806c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80806c4:	9301      	str	r3, [sp, #4]
 80806c6:	bd08      	pop	{r3, pc}
 80806c8:	080401c8 	.word	0x080401c8

080806cc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80806cc:	b508      	push	{r3, lr}
 80806ce:	4b02      	ldr	r3, [pc, #8]	; (80806d8 <spark_process+0xc>)
 80806d0:	681b      	ldr	r3, [r3, #0]
 80806d2:	689b      	ldr	r3, [r3, #8]
 80806d4:	9301      	str	r3, [sp, #4]
 80806d6:	bd08      	pop	{r3, pc}
 80806d8:	080401cc 	.word	0x080401cc

080806dc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80806dc:	b508      	push	{r3, lr}
 80806de:	4b02      	ldr	r3, [pc, #8]	; (80806e8 <spark_cloud_flag_connect+0xc>)
 80806e0:	681b      	ldr	r3, [r3, #0]
 80806e2:	68db      	ldr	r3, [r3, #12]
 80806e4:	9301      	str	r3, [sp, #4]
 80806e6:	bd08      	pop	{r3, pc}
 80806e8:	080401cc 	.word	0x080401cc

080806ec <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 80806ec:	b508      	push	{r3, lr}
 80806ee:	4b02      	ldr	r3, [pc, #8]	; (80806f8 <spark_cloud_flag_disconnect+0xc>)
 80806f0:	681b      	ldr	r3, [r3, #0]
 80806f2:	691b      	ldr	r3, [r3, #16]
 80806f4:	9301      	str	r3, [sp, #4]
 80806f6:	bd08      	pop	{r3, pc}
 80806f8:	080401cc 	.word	0x080401cc

080806fc <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80806fc:	b508      	push	{r3, lr}
 80806fe:	4b02      	ldr	r3, [pc, #8]	; (8080708 <spark_cloud_flag_connected+0xc>)
 8080700:	681b      	ldr	r3, [r3, #0]
 8080702:	695b      	ldr	r3, [r3, #20]
 8080704:	9301      	str	r3, [sp, #4]
 8080706:	bd08      	pop	{r3, pc}
 8080708:	080401cc 	.word	0x080401cc

0808070c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808070c:	b508      	push	{r3, lr}
 808070e:	4b02      	ldr	r3, [pc, #8]	; (8080718 <spark_send_event+0xc>)
 8080710:	681b      	ldr	r3, [r3, #0]
 8080712:	6a1b      	ldr	r3, [r3, #32]
 8080714:	9301      	str	r3, [sp, #4]
 8080716:	bd08      	pop	{r3, pc}
 8080718:	080401cc 	.word	0x080401cc

0808071c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808071c:	b508      	push	{r3, lr}
 808071e:	4b02      	ldr	r3, [pc, #8]	; (8080728 <spark_sync_time_pending+0xc>)
 8080720:	681b      	ldr	r3, [r3, #0]
 8080722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080724:	9301      	str	r3, [sp, #4]
 8080726:	bd08      	pop	{r3, pc}
 8080728:	080401cc 	.word	0x080401cc

0808072c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808072c:	b508      	push	{r3, lr}
 808072e:	4b02      	ldr	r3, [pc, #8]	; (8080738 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080730:	681b      	ldr	r3, [r3, #0]
 8080732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080734:	9301      	str	r3, [sp, #4]
 8080736:	bd08      	pop	{r3, pc}
 8080738:	080401cc 	.word	0x080401cc

0808073c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808073c:	b508      	push	{r3, lr}
 808073e:	4b02      	ldr	r3, [pc, #8]	; (8080748 <malloc+0xc>)
 8080740:	681b      	ldr	r3, [r3, #0]
 8080742:	681b      	ldr	r3, [r3, #0]
 8080744:	9301      	str	r3, [sp, #4]
 8080746:	bd08      	pop	{r3, pc}
 8080748:	080401a0 	.word	0x080401a0

0808074c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808074c:	b508      	push	{r3, lr}
 808074e:	4b02      	ldr	r3, [pc, #8]	; (8080758 <free+0xc>)
 8080750:	681b      	ldr	r3, [r3, #0]
 8080752:	685b      	ldr	r3, [r3, #4]
 8080754:	9301      	str	r3, [sp, #4]
 8080756:	bd08      	pop	{r3, pc}
 8080758:	080401a0 	.word	0x080401a0

0808075c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808075c:	b508      	push	{r3, lr}
 808075e:	4b02      	ldr	r3, [pc, #8]	; (8080768 <realloc+0xc>)
 8080760:	681b      	ldr	r3, [r3, #0]
 8080762:	689b      	ldr	r3, [r3, #8]
 8080764:	9301      	str	r3, [sp, #4]
 8080766:	bd08      	pop	{r3, pc}
 8080768:	080401a0 	.word	0x080401a0

0808076c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808076c:	b508      	push	{r3, lr}
 808076e:	4b02      	ldr	r3, [pc, #8]	; (8080778 <siscanf+0xc>)
 8080770:	681b      	ldr	r3, [r3, #0]
 8080772:	699b      	ldr	r3, [r3, #24]
 8080774:	9301      	str	r3, [sp, #4]
 8080776:	bd08      	pop	{r3, pc}
 8080778:	080401a0 	.word	0x080401a0

0808077c <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808077c:	b508      	push	{r3, lr}
 808077e:	4b02      	ldr	r3, [pc, #8]	; (8080788 <abort+0xc>)
 8080780:	681b      	ldr	r3, [r3, #0]
 8080782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080784:	9301      	str	r3, [sp, #4]
 8080786:	bd08      	pop	{r3, pc}
 8080788:	080401a0 	.word	0x080401a0

0808078c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808078c:	b508      	push	{r3, lr}
 808078e:	4b02      	ldr	r3, [pc, #8]	; (8080798 <_malloc_r+0xc>)
 8080790:	681b      	ldr	r3, [r3, #0]
 8080792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080794:	9301      	str	r3, [sp, #4]
 8080796:	bd08      	pop	{r3, pc}
 8080798:	080401a0 	.word	0x080401a0

0808079c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808079c:	4770      	bx	lr

0808079e <_ZN8SPIClassD0Ev>:
 808079e:	b510      	push	{r4, lr}
 80807a0:	4604      	mov	r4, r0
 80807a2:	2110      	movs	r1, #16
 80807a4:	f001 f973 	bl	8081a8e <_ZdlPvj>
 80807a8:	4620      	mov	r0, r4
 80807aa:	bd10      	pop	{r4, pc}

080807ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80807ac:	b570      	push	{r4, r5, r6, lr}
 80807ae:	4604      	mov	r4, r0
 80807b0:	460e      	mov	r6, r1
 80807b2:	4b07      	ldr	r3, [pc, #28]	; (80807d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80807b4:	2500      	movs	r5, #0
 80807b6:	6003      	str	r3, [r0, #0]
 80807b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80807bc:	f7ff fe2a 	bl	8080414 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80807c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80807c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80807c4:	f7ff fdf6 	bl	80803b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80807c8:	60a5      	str	r5, [r4, #8]
}
 80807ca:	4620      	mov	r0, r4
 80807cc:	bd70      	pop	{r4, r5, r6, pc}
 80807ce:	bf00      	nop
 80807d0:	080827dc 	.word	0x080827dc

080807d4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80807d4:	7900      	ldrb	r0, [r0, #4]
 80807d6:	f7ff bdf5 	b.w	80803c4 <HAL_SPI_Is_Enabled>
	...

080807dc <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80807dc:	b510      	push	{r4, lr}
 80807de:	4604      	mov	r4, r0
 80807e0:	4608      	mov	r0, r1
 80807e2:	4611      	mov	r1, r2
 80807e4:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80807e6:	2300      	movs	r3, #0
 80807e8:	f7ff feec 	bl	80805c4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 80807ec:	4b06      	ldr	r3, [pc, #24]	; (8080808 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 80807ee:	2200      	movs	r2, #0
 80807f0:	701a      	strb	r2, [r3, #0]
 80807f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80807f6:	8058      	strh	r0, [r3, #2]
 80807f8:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80807fa:	681a      	ldr	r2, [r3, #0]
 80807fc:	889b      	ldrh	r3, [r3, #4]
 80807fe:	6022      	str	r2, [r4, #0]
 8080800:	80a3      	strh	r3, [r4, #4]
}
 8080802:	4620      	mov	r0, r4
 8080804:	bd10      	pop	{r4, pc}
 8080806:	bf00      	nop
 8080808:	20000170 	.word	0x20000170

0808080c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8080810:	4b03      	ldr	r3, [pc, #12]	; (8080820 <_GLOBAL__sub_I_System+0x14>)
 8080812:	2000      	movs	r0, #0
 8080814:	7018      	strb	r0, [r3, #0]
 8080816:	8058      	strh	r0, [r3, #2]
 8080818:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808081a:	f7ff bec3 	b.w	80805a4 <set_system_mode>
 808081e:	bf00      	nop
 8080820:	20000170 	.word	0x20000170

08080824 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8080824:	b510      	push	{r4, lr}
 8080826:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8080828:	f001 fbfd 	bl	8082026 <strlen>
 808082c:	3801      	subs	r0, #1
 808082e:	1823      	adds	r3, r4, r0
 8080830:	4620      	mov	r0, r4
	while(i<j){
 8080832:	4298      	cmp	r0, r3
 8080834:	d206      	bcs.n	8080844 <_Z11str_reversePc+0x20>
		c = *i;
 8080836:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8080838:	7819      	ldrb	r1, [r3, #0]
 808083a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808083e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8080842:	e7f6      	b.n	8080832 <_Z11str_reversePc+0xe>
 8080844:	bd10      	pop	{r4, pc}

08080846 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8080846:	b570      	push	{r4, r5, r6, lr}
 8080848:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808084a:	1e91      	subs	r1, r2, #2
 808084c:	2922      	cmp	r1, #34	; 0x22
 808084e:	d820      	bhi.n	8080892 <ultoa+0x4c>
 8080850:	4625      	mov	r5, r4
 8080852:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8080854:	b910      	cbnz	r0, 808085c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8080856:	4423      	add	r3, r4
            *ptr++ = '0';
 8080858:	2230      	movs	r2, #48	; 0x30
 808085a:	e00e      	b.n	808087a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808085c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8080860:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8080864:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8080866:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8080868:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 808086c:	bf94      	ite	ls
 808086e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8080870:	3157      	addhi	r1, #87	; 0x57
 8080872:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8080876:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8080878:	e7eb      	b.n	8080852 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808087a:	4299      	cmp	r1, r3
 808087c:	d202      	bcs.n	8080884 <ultoa+0x3e>
            *ptr++ = '0';
 808087e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8080882:	e7fa      	b.n	808087a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8080884:	2300      	movs	r3, #0
	str_reverse(buffer);
 8080886:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8080888:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808088a:	f7ff ffcb 	bl	8080824 <_Z11str_reversePc>
	return buffer;
 808088e:	4620      	mov	r0, r4
 8080890:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8080892:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8080894:	bd70      	pop	{r4, r5, r6, pc}

08080896 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8080896:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8080898:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808089a:	460c      	mov	r4, r1
 808089c:	4615      	mov	r5, r2
	if(a<0){
 808089e:	da0b      	bge.n	80808b8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80808a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80808a4:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80808a8:	bf14      	ite	ne
 80808aa:	4258      	negne	r0, r3
 80808ac:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80808ae:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80808b0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80808b2:	462a      	mov	r2, r5
 80808b4:	4419      	add	r1, r3
 80808b6:	e000      	b.n	80808ba <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80808b8:	2301      	movs	r3, #1
 80808ba:	f7ff ffc4 	bl	8080846 <ultoa>
	}
	return buffer;
}
 80808be:	4620      	mov	r0, r4
 80808c0:	bd38      	pop	{r3, r4, r5, pc}

080808c2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80808c2:	b510      	push	{r4, lr}
 80808c4:	4604      	mov	r4, r0
{
	free(buffer);
 80808c6:	6800      	ldr	r0, [r0, #0]
 80808c8:	f7ff ff40 	bl	808074c <free>
}
 80808cc:	4620      	mov	r0, r4
 80808ce:	bd10      	pop	{r4, pc}

080808d0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80808d0:	b510      	push	{r4, lr}
 80808d2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80808d4:	6800      	ldr	r0, [r0, #0]
 80808d6:	b108      	cbz	r0, 80808dc <_ZN6String10invalidateEv+0xc>
 80808d8:	f7ff ff38 	bl	808074c <free>
	buffer = NULL;
 80808dc:	2300      	movs	r3, #0
 80808de:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80808e0:	60a3      	str	r3, [r4, #8]
 80808e2:	6063      	str	r3, [r4, #4]
 80808e4:	bd10      	pop	{r4, pc}

080808e6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80808e6:	b538      	push	{r3, r4, r5, lr}
 80808e8:	4604      	mov	r4, r0
 80808ea:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80808ec:	6800      	ldr	r0, [r0, #0]
 80808ee:	3101      	adds	r1, #1
 80808f0:	f7ff ff34 	bl	808075c <realloc>
	if (newbuffer) {
 80808f4:	b110      	cbz	r0, 80808fc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80808f6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80808fa:	2001      	movs	r0, #1
	}
	return 0;
}
 80808fc:	bd38      	pop	{r3, r4, r5, pc}

080808fe <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80808fe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080900:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080902:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8080904:	b113      	cbz	r3, 808090c <_ZN6String7reserveEj+0xe>
 8080906:	6843      	ldr	r3, [r0, #4]
 8080908:	428b      	cmp	r3, r1
 808090a:	d207      	bcs.n	808091c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808090c:	4620      	mov	r0, r4
 808090e:	f7ff ffea 	bl	80808e6 <_ZN6String12changeBufferEj>
 8080912:	b120      	cbz	r0, 808091e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8080914:	68a3      	ldr	r3, [r4, #8]
 8080916:	b90b      	cbnz	r3, 808091c <_ZN6String7reserveEj+0x1e>
 8080918:	6822      	ldr	r2, [r4, #0]
 808091a:	7013      	strb	r3, [r2, #0]
 808091c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808091e:	bd10      	pop	{r4, pc}

08080920 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080920:	b570      	push	{r4, r5, r6, lr}
 8080922:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8080924:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080926:	4604      	mov	r4, r0
 8080928:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808092a:	f7ff ffe8 	bl	80808fe <_ZN6String7reserveEj>
 808092e:	b918      	cbnz	r0, 8080938 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8080930:	4620      	mov	r0, r4
 8080932:	f7ff ffcd 	bl	80808d0 <_ZN6String10invalidateEv>
		return *this;
 8080936:	e009      	b.n	808094c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8080938:	462a      	mov	r2, r5
 808093a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808093c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808093e:	6820      	ldr	r0, [r4, #0]
 8080940:	f001 faf8 	bl	8081f34 <memcpy>
	buffer[len] = 0;
 8080944:	6822      	ldr	r2, [r4, #0]
 8080946:	68a3      	ldr	r3, [r4, #8]
 8080948:	2100      	movs	r1, #0
 808094a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808094c:	4620      	mov	r0, r4
 808094e:	bd70      	pop	{r4, r5, r6, pc}

08080950 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8080950:	b538      	push	{r3, r4, r5, lr}
 8080952:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080954:	460c      	mov	r4, r1
 8080956:	b141      	cbz	r1, 808096a <_ZN6StringaSEPKc+0x1a>
 8080958:	4608      	mov	r0, r1
 808095a:	f001 fb64 	bl	8082026 <strlen>
 808095e:	4621      	mov	r1, r4
 8080960:	4602      	mov	r2, r0
 8080962:	4628      	mov	r0, r5
 8080964:	f7ff ffdc 	bl	8080920 <_ZN6String4copyEPKcj>
 8080968:	e001      	b.n	808096e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808096a:	f7ff ffb1 	bl	80808d0 <_ZN6String10invalidateEv>

	return *this;
}
 808096e:	4628      	mov	r0, r5
 8080970:	bd38      	pop	{r3, r4, r5, pc}

08080972 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8080972:	b510      	push	{r4, lr}
 8080974:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080976:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8080978:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808097a:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808097c:	6063      	str	r3, [r4, #4]
	len = 0;
 808097e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8080980:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8080982:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8080984:	a901      	add	r1, sp, #4
 8080986:	f7ff ff86 	bl	8080896 <itoa>
	*this = buf;
 808098a:	a901      	add	r1, sp, #4
 808098c:	4620      	mov	r0, r4
 808098e:	f7ff ffdf 	bl	8080950 <_ZN6StringaSEPKc>
}
 8080992:	4620      	mov	r0, r4
 8080994:	b00a      	add	sp, #40	; 0x28
 8080996:	bd10      	pop	{r4, pc}

08080998 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808099a:	4606      	mov	r6, r0
 808099c:	460d      	mov	r5, r1
 808099e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80809a0:	2400      	movs	r4, #0
  while (size--) {
 80809a2:	42bd      	cmp	r5, r7
 80809a4:	d00c      	beq.n	80809c0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80809a6:	6833      	ldr	r3, [r6, #0]
 80809a8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80809ac:	689b      	ldr	r3, [r3, #8]
 80809ae:	4630      	mov	r0, r6
 80809b0:	4798      	blx	r3
     if (chunk>=0)
 80809b2:	2800      	cmp	r0, #0
 80809b4:	db01      	blt.n	80809ba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80809b6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80809b8:	e7f3      	b.n	80809a2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80809ba:	2c00      	cmp	r4, #0
 80809bc:	bf08      	it	eq
 80809be:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80809c0:	4620      	mov	r0, r4
 80809c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080809c4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80809c4:	b570      	push	{r4, r5, r6, lr}
 80809c6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80809c8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80809ca:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80809cc:	b149      	cbz	r1, 80809e2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80809ce:	f001 fb2a 	bl	8082026 <strlen>
 80809d2:	682b      	ldr	r3, [r5, #0]
 80809d4:	4602      	mov	r2, r0
 80809d6:	4621      	mov	r1, r4
 80809d8:	4628      	mov	r0, r5
    }
 80809da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80809de:	68db      	ldr	r3, [r3, #12]
 80809e0:	4718      	bx	r3
    }
 80809e2:	bd70      	pop	{r4, r5, r6, pc}

080809e4 <_ZN5Print5printEPKc>:
 80809e4:	b508      	push	{r3, lr}
 80809e6:	f7ff ffed 	bl	80809c4 <_ZN5Print5writeEPKc>
 80809ea:	bd08      	pop	{r3, pc}

080809ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80809ec:	6803      	ldr	r3, [r0, #0]
 80809ee:	689b      	ldr	r3, [r3, #8]
 80809f0:	4718      	bx	r3

080809f2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80809f2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80809f4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80809f6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80809f8:	f7ff fff8 	bl	80809ec <_ZN5Print5printEc>
  n += print('\n');
 80809fc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80809fe:	4604      	mov	r4, r0
  n += print('\n');
 8080a00:	4628      	mov	r0, r5
 8080a02:	f7ff fff3 	bl	80809ec <_ZN5Print5printEc>
  return n;
}
 8080a06:	4420      	add	r0, r4
 8080a08:	bd38      	pop	{r3, r4, r5, pc}

08080a0a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080a0a:	b538      	push	{r3, r4, r5, lr}
 8080a0c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080a0e:	f7ff ffd9 	bl	80809c4 <_ZN5Print5writeEPKc>
 8080a12:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8080a14:	4628      	mov	r0, r5
 8080a16:	f7ff ffec 	bl	80809f2 <_ZN5Print7printlnEv>
  return n;
}
 8080a1a:	4420      	add	r0, r4
 8080a1c:	bd38      	pop	{r3, r4, r5, pc}

08080a1e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080a1e:	2a01      	cmp	r2, #1
 8080a20:	bf98      	it	ls
 8080a22:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080a24:	b530      	push	{r4, r5, lr}
 8080a26:	460b      	mov	r3, r1
 8080a28:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080a2a:	2100      	movs	r1, #0
 8080a2c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080a30:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080a34:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080a38:	fb05 3312 	mls	r3, r5, r2, r3
 8080a3c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080a3e:	2b09      	cmp	r3, #9
 8080a40:	bf94      	ite	ls
 8080a42:	3330      	addls	r3, #48	; 0x30
 8080a44:	3337      	addhi	r3, #55	; 0x37
 8080a46:	b2db      	uxtb	r3, r3
 8080a48:	4621      	mov	r1, r4
 8080a4a:	f804 3901 	strb.w	r3, [r4], #-1
 8080a4e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8080a50:	2d00      	cmp	r5, #0
 8080a52:	d1ef      	bne.n	8080a34 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080a54:	f7ff ffb6 	bl	80809c4 <_ZN5Print5writeEPKc>
}
 8080a58:	b00b      	add	sp, #44	; 0x2c
 8080a5a:	bd30      	pop	{r4, r5, pc}

08080a5c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080a5c:	b410      	push	{r4}
  if (base == 0) return write(n);
 8080a5e:	b922      	cbnz	r2, 8080a6a <_ZN5Print5printEmi+0xe>
 8080a60:	6803      	ldr	r3, [r0, #0]
 8080a62:	b2c9      	uxtb	r1, r1
 8080a64:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080a66:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080a68:	4718      	bx	r3
  else return printNumber(n, base);
 8080a6a:	b2d2      	uxtb	r2, r2
}
 8080a6c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080a6e:	f7ff bfd6 	b.w	8080a1e <_ZN5Print11printNumberEmh>

08080a72 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080a72:	f7ff bff3 	b.w	8080a5c <_ZN5Print5printEmi>

08080a76 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 8080a76:	b538      	push	{r3, r4, r5, lr}
 8080a78:	4605      	mov	r5, r0
  size_t n = print(num, base);
 8080a7a:	f7ff ffef 	bl	8080a5c <_ZN5Print5printEmi>
 8080a7e:	4604      	mov	r4, r0
  n += println();
 8080a80:	4628      	mov	r0, r5
 8080a82:	f7ff ffb6 	bl	80809f2 <_ZN5Print7printlnEv>
  return n;
}
 8080a86:	4420      	add	r0, r4
 8080a88:	bd38      	pop	{r3, r4, r5, pc}

08080a8a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8080a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080a8e:	4607      	mov	r7, r0
 8080a90:	460e      	mov	r6, r1
  if (base == 0) {
 8080a92:	4615      	mov	r5, r2
 8080a94:	b92a      	cbnz	r2, 8080aa2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8080a9a:	6803      	ldr	r3, [r0, #0]
 8080a9c:	b2c9      	uxtb	r1, r1
 8080a9e:	689b      	ldr	r3, [r3, #8]
 8080aa0:	4718      	bx	r3
  } else if (base == 10) {
 8080aa2:	2a0a      	cmp	r2, #10
 8080aa4:	d102      	bne.n	8080aac <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8080aa6:	2900      	cmp	r1, #0
 8080aa8:	da01      	bge.n	8080aae <_ZN5Print5printEli+0x24>
 8080aaa:	e004      	b.n	8080ab6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080aac:	b2d2      	uxtb	r2, r2
  }
}
 8080aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080ab2:	f7ff bfb4 	b.w	8080a1e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080ab6:	212d      	movs	r1, #45	; 0x2d
 8080ab8:	f7ff ff98 	bl	80809ec <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8080abc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080abe:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8080ac0:	4271      	negs	r1, r6
 8080ac2:	4638      	mov	r0, r7
 8080ac4:	f7ff ffab 	bl	8080a1e <_ZN5Print11printNumberEmh>
 8080ac8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080ace <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 8080ace:	b538      	push	{r3, r4, r5, lr}
 8080ad0:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8080ad2:	f7ff ffda 	bl	8080a8a <_ZN5Print5printEli>
 8080ad6:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8080ad8:	4628      	mov	r0, r5
 8080ada:	f7ff ff8a 	bl	80809f2 <_ZN5Print7printlnEv>
  return n;
}
 8080ade:	4420      	add	r0, r4
 8080ae0:	bd38      	pop	{r3, r4, r5, pc}

08080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080ae2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8080ae4:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080ae6:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080ae8:	b17c      	cbz	r4, 8080b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080aea:	6863      	ldr	r3, [r4, #4]
 8080aec:	3b01      	subs	r3, #1
 8080aee:	6063      	str	r3, [r4, #4]
 8080af0:	b95b      	cbnz	r3, 8080b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8080af2:	6823      	ldr	r3, [r4, #0]
 8080af4:	4620      	mov	r0, r4
 8080af6:	689b      	ldr	r3, [r3, #8]
 8080af8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080afa:	68a3      	ldr	r3, [r4, #8]
 8080afc:	3b01      	subs	r3, #1
 8080afe:	60a3      	str	r3, [r4, #8]
 8080b00:	b91b      	cbnz	r3, 8080b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080b02:	6823      	ldr	r3, [r4, #0]
 8080b04:	4620      	mov	r0, r4
 8080b06:	68db      	ldr	r3, [r3, #12]
 8080b08:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080b0a:	4628      	mov	r0, r5
 8080b0c:	bd38      	pop	{r3, r4, r5, pc}

08080b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080b0e:	680b      	ldr	r3, [r1, #0]
 8080b10:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080b12:	b113      	cbz	r3, 8080b1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080b14:	685a      	ldr	r2, [r3, #4]
 8080b16:	3201      	adds	r2, #1
 8080b18:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080b1a:	4770      	bx	lr

08080b1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080b1c:	4a01      	ldr	r2, [pc, #4]	; (8080b24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080b1e:	4b02      	ldr	r3, [pc, #8]	; (8080b28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080b20:	601a      	str	r2, [r3, #0]
 8080b22:	4770      	bx	lr
 8080b24:	0808285a 	.word	0x0808285a
 8080b28:	20000178 	.word	0x20000178

08080b2c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8080b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8080b2e:	4b14      	ldr	r3, [pc, #80]	; (8080b80 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8080b30:	4f14      	ldr	r7, [pc, #80]	; (8080b84 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8080b32:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8080b34:	4b14      	ldr	r3, [pc, #80]	; (8080b88 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8080b36:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8080b38:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8080b3a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8080b3c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8080b3e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8080b40:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8080b42:	d01b      	beq.n	8080b7c <_ZL22Refresh_UnixTime_Cachel+0x50>
 8080b44:	a80a      	add	r0, sp, #40	; 0x28
 8080b46:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8080b4a:	f001 f8fb 	bl	8081d44 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8080b4e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8080b50:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8080b52:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8080b54:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8080b58:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8080b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8080b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8080b62:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8080b66:	4c09      	ldr	r4, [pc, #36]	; (8080b8c <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8080b68:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8080b6c:	ad01      	add	r5, sp, #4
 8080b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8080b76:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8080b78:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8080b7c:	b00b      	add	sp, #44	; 0x2c
 8080b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080b80:	200001ac 	.word	0x200001ac
 8080b84:	200001a8 	.word	0x200001a8
 8080b88:	200001a4 	.word	0x200001a4
 8080b8c:	2000017c 	.word	0x2000017c

08080b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8080b90:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8080b92:	2000      	movs	r0, #0
 8080b94:	f7ff fdc2 	bl	808071c <spark_sync_time_pending>
 8080b98:	b128      	cbz	r0, 8080ba6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080b9a:	f7ff fdaf 	bl	80806fc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8080b9e:	f080 0001 	eor.w	r0, r0, #1
 8080ba2:	b2c0      	uxtb	r0, r0
 8080ba4:	bd08      	pop	{r3, pc}
 8080ba6:	2001      	movs	r0, #1
    }
 8080ba8:	bd08      	pop	{r3, pc}

08080baa <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8080baa:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8080bac:	2000      	movs	r0, #0
 8080bae:	f7ff fc29 	bl	8080404 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8080bb2:	4604      	mov	r4, r0
 8080bb4:	b968      	cbnz	r0, 8080bd2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8080bb6:	f7ff fced 	bl	8080594 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8080bba:	2801      	cmp	r0, #1
 8080bbc:	d10b      	bne.n	8080bd6 <_ZN9TimeClass7isValidEv+0x2c>
 8080bbe:	4620      	mov	r0, r4
 8080bc0:	f7ff fd18 	bl	80805f4 <system_thread_get_state>
 8080bc4:	b938      	cbnz	r0, 8080bd6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8080bc6:	f7ff ffe3 	bl	8080b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080bca:	b930      	cbnz	r0, 8080bda <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8080bcc:	f7ff fd7e 	bl	80806cc <spark_process>
 8080bd0:	e7f9      	b.n	8080bc6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8080bd2:	2001      	movs	r0, #1
 8080bd4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8080bd6:	2000      	movs	r0, #0
 8080bd8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8080bda:	f7ff ffd9 	bl	8080b90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8080bde:	2000      	movs	r0, #0
 8080be0:	f7ff fc10 	bl	8080404 <HAL_RTC_Time_Is_Valid>
 8080be4:	3000      	adds	r0, #0
 8080be6:	bf18      	it	ne
 8080be8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8080bea:	bd10      	pop	{r4, pc}

08080bec <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8080bec:	b508      	push	{r3, lr}
    (void)isValid();
 8080bee:	f7ff ffdc 	bl	8080baa <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8080bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8080bf6:	f7ff bbfd 	b.w	80803f4 <HAL_RTC_Get_UnixTime>
	...

08080bfc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8080bfc:	b508      	push	{r3, lr}
	return minute(now());
 8080bfe:	f7ff fff5 	bl	8080bec <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8080c02:	f7ff ff93 	bl	8080b2c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8080c06:	4b01      	ldr	r3, [pc, #4]	; (8080c0c <_ZN9TimeClass6minuteEv+0x10>)
 8080c08:	6858      	ldr	r0, [r3, #4]
 8080c0a:	bd08      	pop	{r3, pc}
 8080c0c:	2000017c 	.word	0x2000017c

08080c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080c10:	4b02      	ldr	r3, [pc, #8]	; (8080c1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080c12:	681a      	ldr	r2, [r3, #0]
 8080c14:	4b02      	ldr	r3, [pc, #8]	; (8080c20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080c16:	601a      	str	r2, [r3, #0]
 8080c18:	4770      	bx	lr
 8080c1a:	bf00      	nop
 8080c1c:	2000000c 	.word	0x2000000c
 8080c20:	200001a0 	.word	0x200001a0

08080c24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080c24:	2100      	movs	r1, #0
 8080c26:	f7ff bcc5 	b.w	80805b4 <system_delay_ms>

08080c2a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080c2a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080c2c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080c2e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080c30:	b113      	cbz	r3, 8080c38 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080c32:	2203      	movs	r2, #3
 8080c34:	4601      	mov	r1, r0
 8080c36:	4798      	blx	r3
    }
 8080c38:	4620      	mov	r0, r4
 8080c3a:	bd10      	pop	{r4, pc}

08080c3c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080c3c:	b510      	push	{r4, lr}
 8080c3e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080c40:	f7ff fff3 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
 8080c44:	4620      	mov	r0, r4
 8080c46:	bd10      	pop	{r4, pc}

08080c48 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080c48:	b513      	push	{r0, r1, r4, lr}
 8080c4a:	460b      	mov	r3, r1
 8080c4c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080c4e:	c803      	ldmia	r0, {r0, r1}
 8080c50:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080c54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080c58:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080c5c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080c60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080c64:	b002      	add	sp, #8
 8080c66:	bd10      	pop	{r4, pc}

08080c68 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080c68:	4803      	ldr	r0, [pc, #12]	; (8080c78 <_GLOBAL__sub_I_RGB+0x10>)
 8080c6a:	2300      	movs	r3, #0
 8080c6c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080c6e:	4a03      	ldr	r2, [pc, #12]	; (8080c7c <_GLOBAL__sub_I_RGB+0x14>)
 8080c70:	4903      	ldr	r1, [pc, #12]	; (8080c80 <_GLOBAL__sub_I_RGB+0x18>)
 8080c72:	f000 bf07 	b.w	8081a84 <__aeabi_atexit>
 8080c76:	bf00      	nop
 8080c78:	200001b0 	.word	0x200001b0
 8080c7c:	200000c4 	.word	0x200000c4
 8080c80:	08080c3d 	.word	0x08080c3d

08080c84 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8080c84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080c86:	4b18      	ldr	r3, [pc, #96]	; (8080ce8 <serialEventRun+0x64>)
 8080c88:	b133      	cbz	r3, 8080c98 <serialEventRun+0x14>
 8080c8a:	f000 fc27 	bl	80814dc <_Z16_fetch_usbserialv>
 8080c8e:	6803      	ldr	r3, [r0, #0]
 8080c90:	691b      	ldr	r3, [r3, #16]
 8080c92:	4798      	blx	r3
 8080c94:	2800      	cmp	r0, #0
 8080c96:	dc1e      	bgt.n	8080cd6 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8080c98:	4b14      	ldr	r3, [pc, #80]	; (8080cec <serialEventRun+0x68>)
 8080c9a:	b133      	cbz	r3, 8080caa <serialEventRun+0x26>
 8080c9c:	f000 fd4a 	bl	8081734 <_Z22__fetch_global_Serial1v>
 8080ca0:	6803      	ldr	r3, [r0, #0]
 8080ca2:	691b      	ldr	r3, [r3, #16]
 8080ca4:	4798      	blx	r3
 8080ca6:	2800      	cmp	r0, #0
 8080ca8:	dc18      	bgt.n	8080cdc <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8080caa:	4b11      	ldr	r3, [pc, #68]	; (8080cf0 <serialEventRun+0x6c>)
 8080cac:	b10b      	cbz	r3, 8080cb2 <serialEventRun+0x2e>
 8080cae:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8080cb2:	4b10      	ldr	r3, [pc, #64]	; (8080cf4 <serialEventRun+0x70>)
 8080cb4:	b10b      	cbz	r3, 8080cba <serialEventRun+0x36>
 8080cb6:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8080cba:	4b0f      	ldr	r3, [pc, #60]	; (8080cf8 <serialEventRun+0x74>)
 8080cbc:	b10b      	cbz	r3, 8080cc2 <serialEventRun+0x3e>
 8080cbe:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080cc2:	4b0e      	ldr	r3, [pc, #56]	; (8080cfc <serialEventRun+0x78>)
 8080cc4:	b17b      	cbz	r3, 8080ce6 <serialEventRun+0x62>
 8080cc6:	f000 fc45 	bl	8081554 <_Z17_fetch_usbserial1v>
 8080cca:	6803      	ldr	r3, [r0, #0]
 8080ccc:	691b      	ldr	r3, [r3, #16]
 8080cce:	4798      	blx	r3
 8080cd0:	2800      	cmp	r0, #0
 8080cd2:	dc06      	bgt.n	8080ce2 <serialEventRun+0x5e>
 8080cd4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8080cd6:	f3af 8000 	nop.w
 8080cda:	e7dd      	b.n	8080c98 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8080cdc:	f3af 8000 	nop.w
 8080ce0:	e7e3      	b.n	8080caa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8080ce2:	f3af 8000 	nop.w
 8080ce6:	bd08      	pop	{r3, pc}
	...

08080d00 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8080d00:	b508      	push	{r3, lr}
	serialEventRun();
 8080d02:	f7ff ffbf 	bl	8080c84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080d06:	f7ff fb6d 	bl	80803e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080d0a:	4b01      	ldr	r3, [pc, #4]	; (8080d10 <_post_loop+0x10>)
 8080d0c:	6018      	str	r0, [r3, #0]
 8080d0e:	bd08      	pop	{r3, pc}
 8080d10:	2000068c 	.word	0x2000068c

08080d14 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080d14:	4802      	ldr	r0, [pc, #8]	; (8080d20 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080d16:	4a03      	ldr	r2, [pc, #12]	; (8080d24 <_Z33system_initialize_user_backup_ramv+0x10>)
 8080d18:	4903      	ldr	r1, [pc, #12]	; (8080d28 <_Z33system_initialize_user_backup_ramv+0x14>)
 8080d1a:	1a12      	subs	r2, r2, r0
 8080d1c:	f001 b90a 	b.w	8081f34 <memcpy>
 8080d20:	40024000 	.word	0x40024000
 8080d24:	40024004 	.word	0x40024004
 8080d28:	08082c50 	.word	0x08082c50

08080d2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8080d2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d2e:	2300      	movs	r3, #0
 8080d30:	9300      	str	r3, [sp, #0]
 8080d32:	461a      	mov	r2, r3
 8080d34:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080d38:	f7ff fc6e 	bl	8080618 <system_ctrl_set_result>
}
 8080d3c:	b003      	add	sp, #12
 8080d3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08080d44 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8080d44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8080d46:	8843      	ldrh	r3, [r0, #2]
 8080d48:	2b0a      	cmp	r3, #10
 8080d4a:	d008      	beq.n	8080d5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8080d4c:	2b50      	cmp	r3, #80	; 0x50
 8080d4e:	d109      	bne.n	8080d64 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8080d50:	4b09      	ldr	r3, [pc, #36]	; (8080d78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8080d52:	681b      	ldr	r3, [r3, #0]
 8080d54:	b13b      	cbz	r3, 8080d66 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8080d56:	b003      	add	sp, #12
 8080d58:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8080d5c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8080d5e:	f7ff ffe5 	bl	8080d2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8080d62:	e006      	b.n	8080d72 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8080d64:	2300      	movs	r3, #0
 8080d66:	9300      	str	r3, [sp, #0]
 8080d68:	461a      	mov	r2, r3
 8080d6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8080d6e:	f7ff fc53 	bl	8080618 <system_ctrl_set_result>
        break;
    }
}
 8080d72:	b003      	add	sp, #12
 8080d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8080d78:	200001c0 	.word	0x200001c0

08080d7c <module_user_init_hook>:

void module_user_init_hook()
{
 8080d7c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8080d7e:	4c10      	ldr	r4, [pc, #64]	; (8080dc0 <module_user_init_hook+0x44>)
 8080d80:	4d10      	ldr	r5, [pc, #64]	; (8080dc4 <module_user_init_hook+0x48>)
 8080d82:	6823      	ldr	r3, [r4, #0]
 8080d84:	42ab      	cmp	r3, r5
 8080d86:	4b10      	ldr	r3, [pc, #64]	; (8080dc8 <module_user_init_hook+0x4c>)
 8080d88:	bf0c      	ite	eq
 8080d8a:	2201      	moveq	r2, #1
 8080d8c:	2200      	movne	r2, #0
 8080d8e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8080d90:	d002      	beq.n	8080d98 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8080d92:	f7ff ffbf 	bl	8080d14 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8080d96:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8080d98:	f7ff fb1c 	bl	80803d4 <HAL_RNG_GetRandomNumber>
 8080d9c:	4604      	mov	r4, r0
    srand(seed);
 8080d9e:	f001 f8dd 	bl	8081f5c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8080da2:	4b0a      	ldr	r3, [pc, #40]	; (8080dcc <module_user_init_hook+0x50>)
 8080da4:	b113      	cbz	r3, 8080dac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8080da6:	4620      	mov	r0, r4
 8080da8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8080dac:	2100      	movs	r1, #0
 8080dae:	4807      	ldr	r0, [pc, #28]	; (8080dcc <module_user_init_hook+0x50>)
 8080db0:	f7ff fcbc 	bl	808072c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8080db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8080db8:	2100      	movs	r1, #0
 8080dba:	4805      	ldr	r0, [pc, #20]	; (8080dd0 <module_user_init_hook+0x54>)
 8080dbc:	f7ff bc22 	b.w	8080604 <system_ctrl_set_app_request_handler>
 8080dc0:	40024000 	.word	0x40024000
 8080dc4:	9a271c1e 	.word	0x9a271c1e
 8080dc8:	200001c4 	.word	0x200001c4
 8080dcc:	00000000 	.word	0x00000000
 8080dd0:	08080d45 	.word	0x08080d45

08080dd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080dd4:	4770      	bx	lr

08080dd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080dd6:	2000      	movs	r0, #0
 8080dd8:	4770      	bx	lr

08080dda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080dda:	b510      	push	{r4, lr}
 8080ddc:	4604      	mov	r4, r0
 8080dde:	2110      	movs	r1, #16
 8080de0:	f000 fe55 	bl	8081a8e <_ZdlPvj>
 8080de4:	4620      	mov	r0, r4
 8080de6:	bd10      	pop	{r4, pc}

08080de8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080de8:	b508      	push	{r3, lr}
      { delete this; }
 8080dea:	b108      	cbz	r0, 8080df0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8080dec:	f7ff fff5 	bl	8080dda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8080df0:	bd08      	pop	{r3, pc}

08080df2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8080df2:	2200      	movs	r2, #0
 8080df4:	6002      	str	r2, [r0, #0]
 8080df6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8080dfa:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8080dfc:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080dfe:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8080e02:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8080e04:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080e06:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8080e08:	680c      	ldr	r4, [r1, #0]
 8080e0a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8080e0c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8080e0e:	bd10      	pop	{r4, pc}

08080e10 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8080e10:	b510      	push	{r4, lr}
 8080e12:	4604      	mov	r4, r0
    free((void*)msg_);
 8080e14:	6800      	ldr	r0, [r0, #0]
 8080e16:	f7ff fc99 	bl	808074c <free>
}
 8080e1a:	4620      	mov	r0, r4
 8080e1c:	bd10      	pop	{r4, pc}

08080e1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8080e1e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8080e20:	68c4      	ldr	r4, [r0, #12]
 8080e22:	b1f4      	cbz	r4, 8080e62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8080e24:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8080e26:	2b02      	cmp	r3, #2
 8080e28:	d103      	bne.n	8080e32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8080e2a:	f104 000c 	add.w	r0, r4, #12
 8080e2e:	f7ff ffef 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8080e32:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8080e34:	b135      	cbz	r5, 8080e44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080e36:	4628      	mov	r0, r5
 8080e38:	f7ff fef7 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
 8080e3c:	2110      	movs	r1, #16
 8080e3e:	4628      	mov	r0, r5
 8080e40:	f000 fe25 	bl	8081a8e <_ZdlPvj>
 8080e44:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8080e46:	b135      	cbz	r5, 8080e56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8080e48:	4628      	mov	r0, r5
 8080e4a:	f7ff feee 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
 8080e4e:	2110      	movs	r1, #16
 8080e50:	4628      	mov	r0, r5
 8080e52:	f000 fe1c 	bl	8081a8e <_ZdlPvj>
 8080e56:	4620      	mov	r0, r4
 8080e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8080e5c:	2114      	movs	r1, #20
 8080e5e:	f000 be16 	b.w	8081a8e <_ZdlPvj>
 8080e62:	bd38      	pop	{r3, r4, r5, pc}

08080e64 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8080e64:	b513      	push	{r0, r1, r4, lr}
 8080e66:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8080e68:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8080e6c:	2300      	movs	r3, #0
 8080e6e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080e70:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8080e72:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8080e74:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080e76:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8080e78:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8080e7a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080e7c:	f7ff fe31 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e80:	4620      	mov	r0, r4
 8080e82:	b002      	add	sp, #8
 8080e84:	bd10      	pop	{r4, pc}

08080e86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8080e86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080e88:	460c      	mov	r4, r1
 8080e8a:	4606      	mov	r6, r0
 8080e8c:	460f      	mov	r7, r1
 8080e8e:	f854 3b04 	ldr.w	r3, [r4], #4
 8080e92:	ad02      	add	r5, sp, #8
 8080e94:	f845 3d08 	str.w	r3, [r5, #-8]!
 8080e98:	4621      	mov	r1, r4
 8080e9a:	a801      	add	r0, sp, #4
 8080e9c:	f7ff fe37 	bl	8080b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080ea0:	4629      	mov	r1, r5
 8080ea2:	4630      	mov	r0, r6
 8080ea4:	f7ff ffde 	bl	8080e64 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080ea8:	a801      	add	r0, sp, #4
 8080eaa:	f7ff fe1a 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080eae:	4620      	mov	r0, r4
 8080eb0:	f7ff fe17 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8080eb4:	4638      	mov	r0, r7
 8080eb6:	2108      	movs	r1, #8
 8080eb8:	f000 fde9 	bl	8081a8e <_ZdlPvj>
        return p;
    }
 8080ebc:	4630      	mov	r0, r6
 8080ebe:	b003      	add	sp, #12
 8080ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08080ec4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080ec4:	b538      	push	{r3, r4, r5, lr}
 8080ec6:	2300      	movs	r3, #0
 8080ec8:	4604      	mov	r4, r0
 8080eca:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080ecc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080ece:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080ed0:	f7ff f8e3 	bl	808009a <_Znwj>
 8080ed4:	b128      	cbz	r0, 8080ee2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8080ed6:	2301      	movs	r3, #1
 8080ed8:	6043      	str	r3, [r0, #4]
 8080eda:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8080edc:	4b02      	ldr	r3, [pc, #8]	; (8080ee8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8080ede:	60c5      	str	r5, [r0, #12]
 8080ee0:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080ee2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8080ee4:	4620      	mov	r0, r4
 8080ee6:	bd38      	pop	{r3, r4, r5, pc}
 8080ee8:	080828f8 	.word	0x080828f8

08080eec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080eec:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080eee:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080ef0:	b90a      	cbnz	r2, 8080ef6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8080ef2:	f000 fdce 	bl	8081a92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080ef6:	68c3      	ldr	r3, [r0, #12]
    }
 8080ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080efc:	4718      	bx	r3

08080efe <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080efe:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080f00:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080f02:	f100 0110 	add.w	r1, r0, #16
 8080f06:	f7ff fff1 	bl	8080eec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080f0a:	bd08      	pop	{r3, pc}

08080f0c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080f0c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080f0e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080f10:	b90a      	cbnz	r2, 8080f16 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8080f12:	f000 fdbe 	bl	8081a92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080f16:	68c3      	ldr	r3, [r0, #12]
    }
 8080f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080f1c:	4718      	bx	r3

08080f1e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080f1e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080f20:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8080f22:	f100 0110 	add.w	r1, r0, #16
 8080f26:	f7ff fff1 	bl	8080f0c <_ZNKSt8functionIFvRKbEEclES1_>
 8080f2a:	bd08      	pop	{r3, pc}

08080f2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080f2c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080f2e:	2300      	movs	r3, #0
 8080f30:	6083      	str	r3, [r0, #8]
 8080f32:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080f34:	4604      	mov	r4, r0
 8080f36:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080f38:	b12b      	cbz	r3, 8080f46 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080f3a:	2202      	movs	r2, #2
 8080f3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080f3e:	68eb      	ldr	r3, [r5, #12]
 8080f40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080f42:	68ab      	ldr	r3, [r5, #8]
 8080f44:	60a3      	str	r3, [r4, #8]
	}
    }
 8080f46:	4620      	mov	r0, r4
 8080f48:	bd38      	pop	{r3, r4, r5, pc}
	...

08080f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8080f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080f4e:	b089      	sub	sp, #36	; 0x24
 8080f50:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8080f52:	4668      	mov	r0, sp
 8080f54:	f7ff ff4d 	bl	8080df2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080f58:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080f5c:	2300      	movs	r3, #0
 8080f5e:	f88d 3008 	strb.w	r3, [sp, #8]
 8080f62:	e8d4 3f4f 	ldrexb	r3, [r4]
 8080f66:	2b00      	cmp	r3, #0
 8080f68:	d103      	bne.n	8080f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8080f6a:	e8c4 2f41 	strexb	r1, r2, [r4]
 8080f6e:	2900      	cmp	r1, #0
 8080f70:	d1f7      	bne.n	8080f62 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8080f72:	d002      	beq.n	8080f7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8080f74:	f88d 3008 	strb.w	r3, [sp, #8]
 8080f78:	e063      	b.n	8081042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8080f7a:	f114 050c 	adds.w	r5, r4, #12
 8080f7e:	d003      	beq.n	8080f88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8080f80:	4669      	mov	r1, sp
 8080f82:	4628      	mov	r0, r5
 8080f84:	f7ff ff35 	bl	8080df2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080f88:	f3bf 8f5f 	dmb	sy
 8080f8c:	2301      	movs	r3, #1
 8080f8e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080f90:	f3bf 8f5f 	dmb	sy
 8080f94:	f104 0308 	add.w	r3, r4, #8
 8080f98:	2000      	movs	r0, #0
 8080f9a:	e853 6f00 	ldrex	r6, [r3]
 8080f9e:	e843 0200 	strex	r2, r0, [r3]
 8080fa2:	2a00      	cmp	r2, #0
 8080fa4:	d1f9      	bne.n	8080f9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8080fa6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080faa:	2e00      	cmp	r6, #0
 8080fac:	d049      	beq.n	8081042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080fae:	f7ff fb11 	bl	80805d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080fb2:	b120      	cbz	r0, 8080fbe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080fb4:	4629      	mov	r1, r5
 8080fb6:	4630      	mov	r0, r6
 8080fb8:	f7ff ff98 	bl	8080eec <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080fbc:	e03a      	b.n	8081034 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080fbe:	4631      	mov	r1, r6
 8080fc0:	a802      	add	r0, sp, #8
 8080fc2:	f7ff ffb3 	bl	8080f2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080fc6:	68e0      	ldr	r0, [r4, #12]
 8080fc8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080fcc:	b108      	cbz	r0, 8080fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8080fce:	f001 f80f 	bl	8081ff0 <strdup>
 8080fd2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080fd4:	2010      	movs	r0, #16
 8080fd6:	f8ad 501c 	strh.w	r5, [sp, #28]
 8080fda:	f7ff f85e 	bl	808009a <_Znwj>
 8080fde:	4605      	mov	r5, r0
 8080fe0:	b1e8      	cbz	r0, 808101e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080fe2:	2700      	movs	r7, #0
 8080fe4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080fe6:	2018      	movs	r0, #24
 8080fe8:	f7ff f857 	bl	808009a <_Znwj>
 8080fec:	4604      	mov	r4, r0
 8080fee:	b188      	cbz	r0, 8081014 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080ff0:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ff2:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080ff4:	a802      	add	r0, sp, #8
 8080ff6:	f7ff fe27 	bl	8080c48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080ffa:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080ffc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080ffe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081000:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8081002:	9204      	str	r2, [sp, #16]
 8081004:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081006:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8081008:	60e3      	str	r3, [r4, #12]
 808100a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808100e:	9205      	str	r2, [sp, #20]
 8081010:	f7ff feef 	bl	8080df2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081014:	4b0d      	ldr	r3, [pc, #52]	; (808104c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081016:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081018:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808101a:	4b0d      	ldr	r3, [pc, #52]	; (8081050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 808101c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808101e:	a806      	add	r0, sp, #24
 8081020:	f7ff fef6 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081024:	a802      	add	r0, sp, #8
 8081026:	f7ff fe00 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808102a:	2200      	movs	r2, #0
 808102c:	4629      	mov	r1, r5
 808102e:	4809      	ldr	r0, [pc, #36]	; (8081054 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081030:	f7ff fad8 	bl	80805e4 <application_thread_invoke>
 8081034:	4630      	mov	r0, r6
 8081036:	f7ff fdf8 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808103a:	2110      	movs	r1, #16
 808103c:	4630      	mov	r0, r6
 808103e:	f000 fd26 	bl	8081a8e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8081042:	4668      	mov	r0, sp
 8081044:	f7ff fee4 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
    }
 8081048:	b009      	add	sp, #36	; 0x24
 808104a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808104c:	08080eff 	.word	0x08080eff
 8081050:	08081175 	.word	0x08081175
 8081054:	08081781 	.word	0x08081781

08081058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808105c:	b08b      	sub	sp, #44	; 0x2c
 808105e:	4606      	mov	r6, r0
 8081060:	460f      	mov	r7, r1
 8081062:	4690      	mov	r8, r2
 8081064:	4699      	mov	r9, r3
 8081066:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808106a:	f7ff fb47 	bl	80806fc <spark_cloud_flag_connected>
 808106e:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8081070:	4683      	mov	fp, r0
 8081072:	bb30      	cbnz	r0, 80810c2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8081074:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081078:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808107a:	a905      	add	r1, sp, #20
 808107c:	4628      	mov	r0, r5
 808107e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081082:	f7ff feb6 	bl	8080df2 <_ZN8particle5ErrorC1EOS0_>
 8081086:	2014      	movs	r0, #20
 8081088:	f7ff f807 	bl	808009a <_Znwj>
 808108c:	4604      	mov	r4, r0
 808108e:	b158      	cbz	r0, 80810a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081090:	2302      	movs	r3, #2
 8081092:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8081094:	2301      	movs	r3, #1
 8081096:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081098:	f8c0 b004 	str.w	fp, [r0, #4]
 808109c:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80810a0:	4629      	mov	r1, r5
 80810a2:	300c      	adds	r0, #12
 80810a4:	f7ff fea5 	bl	8080df2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80810a8:	4630      	mov	r0, r6
 80810aa:	4621      	mov	r1, r4
 80810ac:	f840 4b04 	str.w	r4, [r0], #4
 80810b0:	f7ff ff08 	bl	8080ec4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80810b4:	4628      	mov	r0, r5
 80810b6:	f7ff feab 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80810ba:	a805      	add	r0, sp, #20
 80810bc:	f7ff fea8 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
 80810c0:	e052      	b.n	8081168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80810c2:	2400      	movs	r4, #0
 80810c4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80810c6:	2014      	movs	r0, #20
 80810c8:	606c      	str	r4, [r5, #4]
 80810ca:	60ac      	str	r4, [r5, #8]
 80810cc:	9307      	str	r3, [sp, #28]
 80810ce:	f7fe ffe4 	bl	808009a <_Znwj>
 80810d2:	4601      	mov	r1, r0
 80810d4:	b118      	cbz	r0, 80810de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80810d6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80810d8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80810da:	6044      	str	r4, [r0, #4]
 80810dc:	6084      	str	r4, [r0, #8]
 80810de:	a804      	add	r0, sp, #16
 80810e0:	9103      	str	r1, [sp, #12]
 80810e2:	f7ff feef 	bl	8080ec4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80810e6:	4b22      	ldr	r3, [pc, #136]	; (8081170 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80810e8:	2008      	movs	r0, #8
 80810ea:	9308      	str	r3, [sp, #32]
 80810ec:	f7fe ffd5 	bl	808009a <_Znwj>
 80810f0:	4604      	mov	r4, r0
 80810f2:	b128      	cbz	r0, 8081100 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80810f4:	9b03      	ldr	r3, [sp, #12]
 80810f6:	a904      	add	r1, sp, #16
 80810f8:	f840 3b04 	str.w	r3, [r0], #4
 80810fc:	f7ff fd07 	bl	8080b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8081100:	9500      	str	r5, [sp, #0]
 8081102:	fa5f f38a 	uxtb.w	r3, sl
 8081106:	464a      	mov	r2, r9
 8081108:	4641      	mov	r1, r8
 808110a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808110c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808110e:	f7ff fafd 	bl	808070c <spark_send_event>
 8081112:	b920      	cbnz	r0, 808111e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8081114:	9b03      	ldr	r3, [sp, #12]
 8081116:	785b      	ldrb	r3, [r3, #1]
 8081118:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808111c:	b183      	cbz	r3, 8081140 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808111e:	9b03      	ldr	r3, [sp, #12]
 8081120:	a904      	add	r1, sp, #16
 8081122:	a806      	add	r0, sp, #24
 8081124:	9305      	str	r3, [sp, #20]
 8081126:	f7ff fcf2 	bl	8080b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808112a:	a905      	add	r1, sp, #20
 808112c:	4630      	mov	r0, r6
 808112e:	f7ff fe99 	bl	8080e64 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081132:	a806      	add	r0, sp, #24
 8081134:	f7ff fcd5 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081138:	a804      	add	r0, sp, #16
 808113a:	f7ff fcd2 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808113e:	e013      	b.n	8081168 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081140:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8081144:	a905      	add	r1, sp, #20
 8081146:	a803      	add	r0, sp, #12
 8081148:	9205      	str	r2, [sp, #20]
 808114a:	f8ad 3018 	strh.w	r3, [sp, #24]
 808114e:	f7ff fefd 	bl	8080f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8081152:	a805      	add	r0, sp, #20
 8081154:	f7ff fe5c 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081158:	a805      	add	r0, sp, #20
 808115a:	9909      	ldr	r1, [sp, #36]	; 0x24
 808115c:	f7ff fe93 	bl	8080e86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8081160:	a806      	add	r0, sp, #24
 8081162:	f7ff fcbe 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081166:	e7da      	b.n	808111e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081168:	4630      	mov	r0, r6
 808116a:	b00b      	add	sp, #44	; 0x2c
 808116c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081170:	080812e5 	.word	0x080812e5

08081174 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8081174:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8081176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081178:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808117a:	d006      	beq.n	808118a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808117c:	2a03      	cmp	r2, #3
 808117e:	d017      	beq.n	80811b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081180:	2a01      	cmp	r2, #1
 8081182:	d122      	bne.n	80811ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081184:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8081186:	6003      	str	r3, [r0, #0]
	      break;
 8081188:	e01f      	b.n	80811ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808118a:	2018      	movs	r0, #24
 808118c:	680e      	ldr	r6, [r1, #0]
 808118e:	f7fe ff84 	bl	808009a <_Znwj>
 8081192:	4605      	mov	r5, r0
 8081194:	b150      	cbz	r0, 80811ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8081196:	4631      	mov	r1, r6
 8081198:	f7ff fec8 	bl	8080f2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808119c:	6930      	ldr	r0, [r6, #16]
 808119e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80811a2:	b108      	cbz	r0, 80811a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80811a4:	f000 ff24 	bl	8081ff0 <strdup>
 80811a8:	6128      	str	r0, [r5, #16]
 80811aa:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80811ac:	6025      	str	r5, [r4, #0]
 80811ae:	e00c      	b.n	80811ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80811b0:	6804      	ldr	r4, [r0, #0]
 80811b2:	b154      	cbz	r4, 80811ca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80811b4:	f104 0010 	add.w	r0, r4, #16
 80811b8:	f7ff fe2a 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80811bc:	4620      	mov	r0, r4
 80811be:	f7ff fd34 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80811c2:	2118      	movs	r1, #24
 80811c4:	4620      	mov	r0, r4
 80811c6:	f000 fc62 	bl	8081a8e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80811ca:	2000      	movs	r0, #0
 80811cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080811ce <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80811ce:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80811d0:	2300      	movs	r3, #0
 80811d2:	6083      	str	r3, [r0, #8]
 80811d4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80811d6:	4604      	mov	r4, r0
 80811d8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80811da:	b12b      	cbz	r3, 80811e8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80811dc:	2202      	movs	r2, #2
 80811de:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80811e0:	68eb      	ldr	r3, [r5, #12]
 80811e2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80811e4:	68ab      	ldr	r3, [r5, #8]
 80811e6:	60a3      	str	r3, [r4, #8]
	}
    }
 80811e8:	4620      	mov	r0, r4
 80811ea:	bd38      	pop	{r3, r4, r5, pc}

080811ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80811ec:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80811ee:	b570      	push	{r4, r5, r6, lr}
 80811f0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80811f2:	d006      	beq.n	8081202 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80811f4:	2a03      	cmp	r2, #3
 80811f6:	d011      	beq.n	808121c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80811f8:	2a01      	cmp	r2, #1
 80811fa:	d118      	bne.n	808122e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80811fc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80811fe:	6003      	str	r3, [r0, #0]
	      break;
 8081200:	e015      	b.n	808122e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081202:	2014      	movs	r0, #20
 8081204:	680e      	ldr	r6, [r1, #0]
 8081206:	f7fe ff48 	bl	808009a <_Znwj>
 808120a:	4605      	mov	r5, r0
 808120c:	b120      	cbz	r0, 8081218 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808120e:	4631      	mov	r1, r6
 8081210:	f7ff ffdd 	bl	80811ce <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8081214:	7c33      	ldrb	r3, [r6, #16]
 8081216:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081218:	6025      	str	r5, [r4, #0]
 808121a:	e008      	b.n	808122e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808121c:	6804      	ldr	r4, [r0, #0]
 808121e:	b134      	cbz	r4, 808122e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081220:	4620      	mov	r0, r4
 8081222:	f7ff fd02 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081226:	2114      	movs	r1, #20
 8081228:	4620      	mov	r0, r4
 808122a:	f000 fc30 	bl	8081a8e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808122e:	2000      	movs	r0, #0
 8081230:	bd70      	pop	{r4, r5, r6, pc}
	...

08081234 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8081234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081236:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081238:	f3bf 8f5f 	dmb	sy
 808123c:	b087      	sub	sp, #28
 808123e:	2300      	movs	r3, #0
 8081240:	e850 6f00 	ldrex	r6, [r0]
 8081244:	e840 3200 	strex	r2, r3, [r0]
 8081248:	2a00      	cmp	r2, #0
 808124a:	d1f9      	bne.n	8081240 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808124c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081250:	2e00      	cmp	r6, #0
 8081252:	d03f      	beq.n	80812d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081254:	4618      	mov	r0, r3
 8081256:	f7ff f9bd 	bl	80805d4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808125a:	4607      	mov	r7, r0
 808125c:	b120      	cbz	r0, 8081268 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808125e:	4621      	mov	r1, r4
 8081260:	4630      	mov	r0, r6
 8081262:	f7ff fe53 	bl	8080f0c <_ZNKSt8functionIFvRKbEEclES1_>
 8081266:	e02e      	b.n	80812c6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081268:	4631      	mov	r1, r6
 808126a:	a801      	add	r0, sp, #4
 808126c:	f7ff ffaf 	bl	80811ce <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081270:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8081272:	2010      	movs	r0, #16
 8081274:	f88d 3014 	strb.w	r3, [sp, #20]
 8081278:	f7fe ff0f 	bl	808009a <_Znwj>
 808127c:	4605      	mov	r5, r0
 808127e:	b1d0      	cbz	r0, 80812b6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081280:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081282:	2014      	movs	r0, #20
 8081284:	f7fe ff09 	bl	808009a <_Znwj>
 8081288:	4604      	mov	r4, r0
 808128a:	b178      	cbz	r0, 80812ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808128c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808128e:	4601      	mov	r1, r0
 8081290:	a801      	add	r0, sp, #4
 8081292:	f7ff fcd9 	bl	8080c48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081296:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081298:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808129a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808129c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808129e:	9203      	str	r2, [sp, #12]
 80812a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80812a2:	60e3      	str	r3, [r4, #12]
 80812a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80812a8:	9204      	str	r2, [sp, #16]
 80812aa:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80812ac:	4b0a      	ldr	r3, [pc, #40]	; (80812d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80812ae:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80812b0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80812b2:	4b0a      	ldr	r3, [pc, #40]	; (80812dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80812b4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80812b6:	a801      	add	r0, sp, #4
 80812b8:	f7ff fcb7 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80812bc:	2200      	movs	r2, #0
 80812be:	4629      	mov	r1, r5
 80812c0:	4807      	ldr	r0, [pc, #28]	; (80812e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80812c2:	f7ff f98f 	bl	80805e4 <application_thread_invoke>
 80812c6:	4630      	mov	r0, r6
 80812c8:	f7ff fcaf 	bl	8080c2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80812cc:	2110      	movs	r1, #16
 80812ce:	4630      	mov	r0, r6
 80812d0:	f000 fbdd 	bl	8081a8e <_ZdlPvj>
        }
    }
 80812d4:	b007      	add	sp, #28
 80812d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80812d8:	08080f1f 	.word	0x08080f1f
 80812dc:	080811ed 	.word	0x080811ed
 80812e0:	08081781 	.word	0x08081781

080812e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80812e4:	b530      	push	{r4, r5, lr}
 80812e6:	4604      	mov	r4, r0
 80812e8:	b085      	sub	sp, #20
 80812ea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80812ec:	4668      	mov	r0, sp
 80812ee:	4611      	mov	r1, r2
 80812f0:	f7ff fdc9 	bl	8080e86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80812f4:	b17c      	cbz	r4, 8081316 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80812f6:	b224      	sxth	r4, r4
 80812f8:	4628      	mov	r0, r5
 80812fa:	b10d      	cbz	r5, 8081300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80812fc:	f000 fe78 	bl	8081ff0 <strdup>
 8081300:	9002      	str	r0, [sp, #8]
 8081302:	a902      	add	r1, sp, #8
 8081304:	4668      	mov	r0, sp
 8081306:	f8ad 400c 	strh.w	r4, [sp, #12]
 808130a:	f7ff fe1f 	bl	8080f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808130e:	a802      	add	r0, sp, #8
 8081310:	f7ff fd7e 	bl	8080e10 <_ZN8particle5ErrorD1Ev>
 8081314:	e01d      	b.n	8081352 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081316:	f04f 0201 	mov.w	r2, #1
 808131a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808131c:	f88d 4008 	strb.w	r4, [sp, #8]
 8081320:	e8d0 3f4f 	ldrexb	r3, [r0]
 8081324:	42a3      	cmp	r3, r4
 8081326:	d103      	bne.n	8081330 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081328:	e8c0 2f41 	strexb	r1, r2, [r0]
 808132c:	2900      	cmp	r1, #0
 808132e:	d1f7      	bne.n	8081320 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081330:	d002      	beq.n	8081338 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8081332:	f88d 3008 	strb.w	r3, [sp, #8]
 8081336:	e00c      	b.n	8081352 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081338:	f110 010c 	adds.w	r1, r0, #12
 808133c:	f04f 0301 	mov.w	r3, #1
 8081340:	bf18      	it	ne
 8081342:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081344:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081348:	3004      	adds	r0, #4
 808134a:	f800 3c03 	strb.w	r3, [r0, #-3]
 808134e:	f7ff ff71 	bl	8081234 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8081352:	a801      	add	r0, sp, #4
 8081354:	f7ff fbc5 	bl	8080ae2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081358:	b005      	add	sp, #20
 808135a:	bd30      	pop	{r4, r5, pc}

0808135c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808135c:	4770      	bx	lr

0808135e <_ZN9IPAddressD0Ev>:
 808135e:	b510      	push	{r4, lr}
 8081360:	4604      	mov	r4, r0
 8081362:	2108      	movs	r1, #8
 8081364:	f000 fb93 	bl	8081a8e <_ZdlPvj>
 8081368:	4620      	mov	r0, r4
 808136a:	bd10      	pop	{r4, pc}

0808136c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808136e:	460f      	mov	r7, r1
 8081370:	f100 0608 	add.w	r6, r0, #8
 8081374:	1d05      	adds	r5, r0, #4
 8081376:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081378:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808137c:	220a      	movs	r2, #10
 808137e:	4638      	mov	r0, r7
 8081380:	f7ff fb77 	bl	8080a72 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081384:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081386:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081388:	d007      	beq.n	808139a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808138a:	2c00      	cmp	r4, #0
 808138c:	d0f4      	beq.n	8081378 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808138e:	212e      	movs	r1, #46	; 0x2e
 8081390:	4638      	mov	r0, r7
 8081392:	f7ff fb2b 	bl	80809ec <_ZN5Print5printEc>
 8081396:	4404      	add	r4, r0
 8081398:	e7ee      	b.n	8081378 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808139a:	4620      	mov	r0, r4
 808139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080813a0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80813a0:	4a02      	ldr	r2, [pc, #8]	; (80813ac <_ZN9IPAddressC1Ev+0xc>)
 80813a2:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80813a4:	2200      	movs	r2, #0
 80813a6:	6042      	str	r2, [r0, #4]
{
    clear();
}
 80813a8:	4770      	bx	lr
 80813aa:	bf00      	nop
 80813ac:	08082914 	.word	0x08082914

080813b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80813b0:	4a02      	ldr	r2, [pc, #8]	; (80813bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80813b2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80813b4:	680a      	ldr	r2, [r1, #0]
 80813b6:	6042      	str	r2, [r0, #4]
}
 80813b8:	4770      	bx	lr
 80813ba:	bf00      	nop
 80813bc:	08082914 	.word	0x08082914

080813c0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80813c0:	4a01      	ldr	r2, [pc, #4]	; (80813c8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80813c2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80813c4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80813c6:	4770      	bx	lr
 80813c8:	08082914 	.word	0x08082914

080813cc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80813cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80813ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80813d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80813d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80813da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80813de:	6041      	str	r1, [r0, #4]
 80813e0:	bd10      	pop	{r4, pc}
	...

080813e4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80813e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80813e6:	4d04      	ldr	r5, [pc, #16]	; (80813f8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80813e8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80813ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80813ee:	9500      	str	r5, [sp, #0]
 80813f0:	f7ff ffec 	bl	80813cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80813f4:	b003      	add	sp, #12
 80813f6:	bd30      	pop	{r4, r5, pc}
 80813f8:	08082914 	.word	0x08082914

080813fc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80813fc:	7441      	strb	r1, [r0, #17]
 80813fe:	4770      	bx	lr

08081400 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8081400:	4770      	bx	lr

08081402 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8081402:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8081404:	2100      	movs	r1, #0
 8081406:	7c00      	ldrb	r0, [r0, #16]
 8081408:	f7ff f8ac 	bl	8080564 <HAL_USB_USART_Receive_Data>
}
 808140c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081410:	bf28      	it	cs
 8081412:	f04f 30ff 	movcs.w	r0, #4294967295
 8081416:	bd08      	pop	{r3, pc}

08081418 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8081418:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808141a:	2101      	movs	r1, #1
 808141c:	7c00      	ldrb	r0, [r0, #16]
 808141e:	f7ff f8a1 	bl	8080564 <HAL_USB_USART_Receive_Data>
}
 8081422:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8081426:	bf28      	it	cs
 8081428:	f04f 30ff 	movcs.w	r0, #4294967295
 808142c:	bd08      	pop	{r3, pc}

0808142e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808142e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081430:	7c00      	ldrb	r0, [r0, #16]
 8081432:	f7ff f88f 	bl	8080554 <HAL_USB_USART_Available_Data_For_Write>
}
 8081436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808143a:	bd08      	pop	{r3, pc}

0808143c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808143c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808143e:	7c00      	ldrb	r0, [r0, #16]
 8081440:	f7ff f880 	bl	8080544 <HAL_USB_USART_Available_Data>
}
 8081444:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081448:	bd08      	pop	{r3, pc}

0808144a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808144a:	7c00      	ldrb	r0, [r0, #16]
 808144c:	f7ff b89a 	b.w	8080584 <HAL_USB_USART_Flush_Data>

08081450 <_ZN9USBSerialD0Ev>:
 8081450:	b510      	push	{r4, lr}
 8081452:	4604      	mov	r4, r0
 8081454:	2114      	movs	r1, #20
 8081456:	f000 fb1a 	bl	8081a8e <_ZdlPvj>
 808145a:	4620      	mov	r0, r4
 808145c:	bd10      	pop	{r4, pc}

0808145e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808145e:	b538      	push	{r3, r4, r5, lr}
 8081460:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081462:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081464:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8081466:	f7ff f875 	bl	8080554 <HAL_USB_USART_Available_Data_For_Write>
 808146a:	2800      	cmp	r0, #0
 808146c:	dc01      	bgt.n	8081472 <_ZN9USBSerial5writeEh+0x14>
 808146e:	7c60      	ldrb	r0, [r4, #17]
 8081470:	b128      	cbz	r0, 808147e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8081472:	4629      	mov	r1, r5
 8081474:	7c20      	ldrb	r0, [r4, #16]
 8081476:	f7ff f87d 	bl	8080574 <HAL_USB_USART_Send_Data>
 808147a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808147e:	bd38      	pop	{r3, r4, r5, pc}

08081480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081480:	b510      	push	{r4, lr}
 8081482:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8081484:	2300      	movs	r3, #0
 8081486:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808148c:	60a3      	str	r3, [r4, #8]
 808148e:	4b05      	ldr	r3, [pc, #20]	; (80814a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081490:	4608      	mov	r0, r1
 8081492:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8081494:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8081496:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081498:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808149a:	4611      	mov	r1, r2
 808149c:	f7ff f842 	bl	8080524 <HAL_USB_USART_Init>
}
 80814a0:	4620      	mov	r0, r4
 80814a2:	bd10      	pop	{r4, pc}
 80814a4:	08082928 	.word	0x08082928

080814a8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80814a8:	2200      	movs	r2, #0
 80814aa:	7c00      	ldrb	r0, [r0, #16]
 80814ac:	f7ff b842 	b.w	8080534 <HAL_USB_USART_Begin>

080814b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80814b0:	b510      	push	{r4, lr}
 80814b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80814b4:	2214      	movs	r2, #20
 80814b6:	2100      	movs	r1, #0
 80814b8:	f000 fd47 	bl	8081f4a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80814bc:	4b05      	ldr	r3, [pc, #20]	; (80814d4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80814be:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80814c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80814c2:	4b05      	ldr	r3, [pc, #20]	; (80814d8 <_Z19acquireSerialBufferv+0x28>)
 80814c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80814c6:	f240 1301 	movw	r3, #257	; 0x101
 80814ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80814cc:	2381      	movs	r3, #129	; 0x81
 80814ce:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80814d0:	bd10      	pop	{r4, pc}
 80814d2:	bf00      	nop
 80814d4:	2000024d 	.word	0x2000024d
 80814d8:	200001cc 	.word	0x200001cc

080814dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80814dc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80814de:	4d0e      	ldr	r5, [pc, #56]	; (8081518 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80814e0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80814e2:	a801      	add	r0, sp, #4
 80814e4:	f7ff ffe4 	bl	80814b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80814e8:	6829      	ldr	r1, [r5, #0]
 80814ea:	f011 0401 	ands.w	r4, r1, #1
 80814ee:	d110      	bne.n	8081512 <_Z16_fetch_usbserialv+0x36>
 80814f0:	4628      	mov	r0, r5
 80814f2:	f7fe fdd6 	bl	80800a2 <__cxa_guard_acquire>
 80814f6:	b160      	cbz	r0, 8081512 <_Z16_fetch_usbserialv+0x36>
 80814f8:	aa01      	add	r2, sp, #4
 80814fa:	4621      	mov	r1, r4
 80814fc:	4807      	ldr	r0, [pc, #28]	; (808151c <_Z16_fetch_usbserialv+0x40>)
 80814fe:	f7ff ffbf 	bl	8081480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081502:	4628      	mov	r0, r5
 8081504:	f7fe fdd2 	bl	80800ac <__cxa_guard_release>
 8081508:	4a05      	ldr	r2, [pc, #20]	; (8081520 <_Z16_fetch_usbserialv+0x44>)
 808150a:	4906      	ldr	r1, [pc, #24]	; (8081524 <_Z16_fetch_usbserialv+0x48>)
 808150c:	4803      	ldr	r0, [pc, #12]	; (808151c <_Z16_fetch_usbserialv+0x40>)
 808150e:	f000 fab9 	bl	8081a84 <__aeabi_atexit>
	return _usbserial;
}
 8081512:	4802      	ldr	r0, [pc, #8]	; (808151c <_Z16_fetch_usbserialv+0x40>)
 8081514:	b007      	add	sp, #28
 8081516:	bd30      	pop	{r4, r5, pc}
 8081518:	200001c8 	.word	0x200001c8
 808151c:	20000350 	.word	0x20000350
 8081520:	200000c4 	.word	0x200000c4
 8081524:	08081401 	.word	0x08081401

08081528 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081528:	b510      	push	{r4, lr}
 808152a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808152c:	2214      	movs	r2, #20
 808152e:	2100      	movs	r1, #0
 8081530:	f000 fd0b 	bl	8081f4a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081534:	4b05      	ldr	r3, [pc, #20]	; (808154c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081536:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081538:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808153a:	4b05      	ldr	r3, [pc, #20]	; (8081550 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808153c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808153e:	f240 1301 	movw	r3, #257	; 0x101
 8081542:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081544:	2381      	movs	r3, #129	; 0x81
 8081546:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081548:	bd10      	pop	{r4, pc}
 808154a:	bf00      	nop
 808154c:	20000400 	.word	0x20000400
 8081550:	20000368 	.word	0x20000368

08081554 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081554:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081556:	4c0e      	ldr	r4, [pc, #56]	; (8081590 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081558:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808155a:	a801      	add	r0, sp, #4
 808155c:	f7ff ffe4 	bl	8081528 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081560:	6823      	ldr	r3, [r4, #0]
 8081562:	07db      	lsls	r3, r3, #31
 8081564:	d410      	bmi.n	8081588 <_Z17_fetch_usbserial1v+0x34>
 8081566:	4620      	mov	r0, r4
 8081568:	f7fe fd9b 	bl	80800a2 <__cxa_guard_acquire>
 808156c:	b160      	cbz	r0, 8081588 <_Z17_fetch_usbserial1v+0x34>
 808156e:	aa01      	add	r2, sp, #4
 8081570:	2101      	movs	r1, #1
 8081572:	4808      	ldr	r0, [pc, #32]	; (8081594 <_Z17_fetch_usbserial1v+0x40>)
 8081574:	f7ff ff84 	bl	8081480 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081578:	4620      	mov	r0, r4
 808157a:	f7fe fd97 	bl	80800ac <__cxa_guard_release>
 808157e:	4a06      	ldr	r2, [pc, #24]	; (8081598 <_Z17_fetch_usbserial1v+0x44>)
 8081580:	4906      	ldr	r1, [pc, #24]	; (808159c <_Z17_fetch_usbserial1v+0x48>)
 8081582:	4804      	ldr	r0, [pc, #16]	; (8081594 <_Z17_fetch_usbserial1v+0x40>)
 8081584:	f000 fa7e 	bl	8081a84 <__aeabi_atexit>
  return _usbserial1;
}
 8081588:	4802      	ldr	r0, [pc, #8]	; (8081594 <_Z17_fetch_usbserial1v+0x40>)
 808158a:	b006      	add	sp, #24
 808158c:	bd10      	pop	{r4, pc}
 808158e:	bf00      	nop
 8081590:	20000364 	.word	0x20000364
 8081594:	200003ec 	.word	0x200003ec
 8081598:	200000c4 	.word	0x200000c4
 808159c:	08081401 	.word	0x08081401

080815a0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80815a0:	2200      	movs	r2, #0
 80815a2:	4611      	mov	r1, r2
 80815a4:	6840      	ldr	r0, [r0, #4]
 80815a6:	f7ff b859 	b.w	808065c <network_ready>

080815aa <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80815aa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80815ae:	2600      	movs	r6, #0
 80815b0:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80815b2:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80815b4:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80815b6:	4688      	mov	r8, r1
 80815b8:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80815ba:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80815be:	f000 fd32 	bl	8082026 <strlen>
 80815c2:	9600      	str	r6, [sp, #0]
 80815c4:	b281      	uxth	r1, r0
 80815c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80815ca:	4622      	mov	r2, r4
 80815cc:	4638      	mov	r0, r7
 80815ce:	f7fe ffa1 	bl	8080514 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80815d2:	b120      	cbz	r0, 80815de <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80815d4:	4631      	mov	r1, r6
 80815d6:	4628      	mov	r0, r5
 80815d8:	f7ff fef2 	bl	80813c0 <_ZN9IPAddressC1Em>
 80815dc:	e003      	b.n	80815e6 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80815de:	4621      	mov	r1, r4
 80815e0:	4628      	mov	r0, r5
 80815e2:	f7ff fee5 	bl	80813b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80815e6:	4628      	mov	r0, r5
 80815e8:	b004      	add	sp, #16
 80815ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080815ee <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80815ee:	2200      	movs	r2, #0
 80815f0:	4611      	mov	r1, r2
 80815f2:	6840      	ldr	r0, [r0, #4]
 80815f4:	f7ff b852 	b.w	808069c <network_listening>

080815f8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80815f8:	2200      	movs	r2, #0
 80815fa:	4611      	mov	r1, r2
 80815fc:	6840      	ldr	r0, [r0, #4]
 80815fe:	f7ff b85d 	b.w	80806bc <network_get_listen_timeout>

08081602 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081602:	2200      	movs	r2, #0
 8081604:	6840      	ldr	r0, [r0, #4]
 8081606:	f7ff b851 	b.w	80806ac <network_set_listen_timeout>

0808160a <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808160a:	2200      	movs	r2, #0
 808160c:	f081 0101 	eor.w	r1, r1, #1
 8081610:	6840      	ldr	r0, [r0, #4]
 8081612:	f7ff b83b 	b.w	808068c <network_listen>

08081616 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081616:	2300      	movs	r3, #0
 8081618:	461a      	mov	r2, r3
 808161a:	4619      	mov	r1, r3
 808161c:	6840      	ldr	r0, [r0, #4]
 808161e:	f7ff b82d 	b.w	808067c <network_off>

08081622 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081622:	2300      	movs	r3, #0
 8081624:	461a      	mov	r2, r3
 8081626:	4619      	mov	r1, r3
 8081628:	6840      	ldr	r0, [r0, #4]
 808162a:	f7ff b81f 	b.w	808066c <network_on>

0808162e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808162e:	2200      	movs	r2, #0
 8081630:	4611      	mov	r1, r2
 8081632:	6840      	ldr	r0, [r0, #4]
 8081634:	f7ff b802 	b.w	808063c <network_connecting>

08081638 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081638:	2200      	movs	r2, #0
 808163a:	2102      	movs	r1, #2
 808163c:	6840      	ldr	r0, [r0, #4]
 808163e:	f7ff b805 	b.w	808064c <network_disconnect>

08081642 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081642:	2300      	movs	r3, #0
 8081644:	461a      	mov	r2, r3
 8081646:	6840      	ldr	r0, [r0, #4]
 8081648:	f7fe bff0 	b.w	808062c <network_connect>

0808164c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808164c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808164e:	4c08      	ldr	r4, [pc, #32]	; (8081670 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081650:	2528      	movs	r5, #40	; 0x28
 8081652:	462a      	mov	r2, r5
 8081654:	2100      	movs	r1, #0
 8081656:	4620      	mov	r0, r4
 8081658:	f000 fc77 	bl	8081f4a <memset>
        cid = -1;
 808165c:	f04f 33ff 	mov.w	r3, #4294967295
 8081660:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081662:	4b04      	ldr	r3, [pc, #16]	; (8081674 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8081664:	2204      	movs	r2, #4
 8081666:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081668:	4a03      	ldr	r2, [pc, #12]	; (8081678 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808166a:	8025      	strh	r5, [r4, #0]
 808166c:	601a      	str	r2, [r3, #0]
 808166e:	bd38      	pop	{r3, r4, r5, pc}
 8081670:	2000050c 	.word	0x2000050c
 8081674:	20000504 	.word	0x20000504
 8081678:	08082958 	.word	0x08082958

0808167c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808167c:	4770      	bx	lr

0808167e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808167e:	7441      	strb	r1, [r0, #17]
 8081680:	4770      	bx	lr

08081682 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8081682:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8081684:	7c00      	ldrb	r0, [r0, #16]
 8081686:	f7fe ff05 	bl	8080494 <HAL_USART_Available_Data_For_Write>
}
 808168a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808168e:	bd08      	pop	{r3, pc}

08081690 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081690:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8081692:	7c00      	ldrb	r0, [r0, #16]
 8081694:	f7fe fed6 	bl	8080444 <HAL_USART_Available_Data>
}
 8081698:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808169c:	bd08      	pop	{r3, pc}

0808169e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808169e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80816a0:	7c00      	ldrb	r0, [r0, #16]
 80816a2:	f7fe fedf 	bl	8080464 <HAL_USART_Peek_Data>
}
 80816a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80816aa:	bf28      	it	cs
 80816ac:	f04f 30ff 	movcs.w	r0, #4294967295
 80816b0:	bd08      	pop	{r3, pc}

080816b2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80816b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80816b4:	7c00      	ldrb	r0, [r0, #16]
 80816b6:	f7fe fecd 	bl	8080454 <HAL_USART_Read_Data>
}
 80816ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80816be:	bf28      	it	cs
 80816c0:	f04f 30ff 	movcs.w	r0, #4294967295
 80816c4:	bd08      	pop	{r3, pc}

080816c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80816c6:	7c00      	ldrb	r0, [r0, #16]
 80816c8:	f7fe bed4 	b.w	8080474 <HAL_USART_Flush_Data>

080816cc <_ZN11USARTSerialD0Ev>:
 80816cc:	b510      	push	{r4, lr}
 80816ce:	4604      	mov	r4, r0
 80816d0:	2114      	movs	r1, #20
 80816d2:	f000 f9dc 	bl	8081a8e <_ZdlPvj>
 80816d6:	4620      	mov	r0, r4
 80816d8:	bd10      	pop	{r4, pc}

080816da <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80816da:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80816dc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80816de:	4604      	mov	r4, r0
 80816e0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80816e2:	b925      	cbnz	r5, 80816ee <_ZN11USARTSerial5writeEh+0x14>
 80816e4:	7c00      	ldrb	r0, [r0, #16]
 80816e6:	f7fe fed5 	bl	8080494 <HAL_USART_Available_Data_For_Write>
 80816ea:	2800      	cmp	r0, #0
 80816ec:	dd05      	ble.n	80816fa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80816ee:	4631      	mov	r1, r6
 80816f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80816f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80816f6:	f7fe be9d 	b.w	8080434 <HAL_USART_Write_Data>
  }
  return 0;
}
 80816fa:	4628      	mov	r0, r5
 80816fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08081700 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081700:	b510      	push	{r4, lr}
 8081702:	4604      	mov	r4, r0
 8081704:	4608      	mov	r0, r1
 8081706:	4611      	mov	r1, r2
 8081708:	2200      	movs	r2, #0
 808170a:	6062      	str	r2, [r4, #4]
 808170c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8081710:	60a2      	str	r2, [r4, #8]
 8081712:	4a05      	ldr	r2, [pc, #20]	; (8081728 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8081714:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8081716:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8081718:	2201      	movs	r2, #1
 808171a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808171c:	461a      	mov	r2, r3
 808171e:	f7fe fe81 	bl	8080424 <HAL_USART_Init>
}
 8081722:	4620      	mov	r0, r4
 8081724:	bd10      	pop	{r4, pc}
 8081726:	bf00      	nop
 8081728:	0808298c 	.word	0x0808298c

0808172c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808172c:	7c00      	ldrb	r0, [r0, #16]
 808172e:	f7fe bea9 	b.w	8080484 <HAL_USART_Is_Enabled>
	...

08081734 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081734:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081736:	4d0c      	ldr	r5, [pc, #48]	; (8081768 <_Z22__fetch_global_Serial1v+0x34>)
 8081738:	6829      	ldr	r1, [r5, #0]
 808173a:	f011 0401 	ands.w	r4, r1, #1
 808173e:	d111      	bne.n	8081764 <_Z22__fetch_global_Serial1v+0x30>
 8081740:	4628      	mov	r0, r5
 8081742:	f7fe fcae 	bl	80800a2 <__cxa_guard_acquire>
 8081746:	b168      	cbz	r0, 8081764 <_Z22__fetch_global_Serial1v+0x30>
 8081748:	4a08      	ldr	r2, [pc, #32]	; (808176c <_Z22__fetch_global_Serial1v+0x38>)
 808174a:	4621      	mov	r1, r4
 808174c:	4b08      	ldr	r3, [pc, #32]	; (8081770 <_Z22__fetch_global_Serial1v+0x3c>)
 808174e:	4809      	ldr	r0, [pc, #36]	; (8081774 <_Z22__fetch_global_Serial1v+0x40>)
 8081750:	f7ff ffd6 	bl	8081700 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8081754:	4628      	mov	r0, r5
 8081756:	f7fe fca9 	bl	80800ac <__cxa_guard_release>
 808175a:	4a07      	ldr	r2, [pc, #28]	; (8081778 <_Z22__fetch_global_Serial1v+0x44>)
 808175c:	4907      	ldr	r1, [pc, #28]	; (808177c <_Z22__fetch_global_Serial1v+0x48>)
 808175e:	4805      	ldr	r0, [pc, #20]	; (8081774 <_Z22__fetch_global_Serial1v+0x40>)
 8081760:	f000 f990 	bl	8081a84 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081764:	4803      	ldr	r0, [pc, #12]	; (8081774 <_Z22__fetch_global_Serial1v+0x40>)
 8081766:	bd38      	pop	{r3, r4, r5, pc}
 8081768:	200005cc 	.word	0x200005cc
 808176c:	200005d0 	.word	0x200005d0
 8081770:	20000548 	.word	0x20000548
 8081774:	20000534 	.word	0x20000534
 8081778:	200000c4 	.word	0x200000c4
 808177c:	0808167d 	.word	0x0808167d

08081780 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081780:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081782:	6883      	ldr	r3, [r0, #8]
 8081784:	4604      	mov	r4, r0
 8081786:	b90b      	cbnz	r3, 808178c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081788:	f000 f983 	bl	8081a92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808178c:	68c3      	ldr	r3, [r0, #12]
 808178e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081790:	68a3      	ldr	r3, [r4, #8]
 8081792:	b11b      	cbz	r3, 808179c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081794:	2203      	movs	r2, #3
 8081796:	4621      	mov	r1, r4
 8081798:	4620      	mov	r0, r4
 808179a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808179c:	4620      	mov	r0, r4
}
 808179e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80817a2:	2110      	movs	r1, #16
 80817a4:	f000 b973 	b.w	8081a8e <_ZdlPvj>

080817a8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80817a8:	4770      	bx	lr

080817aa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80817aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80817ac:	4606      	mov	r6, r0
 80817ae:	4615      	mov	r5, r2
 80817b0:	460c      	mov	r4, r1
 80817b2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80817b4:	42bc      	cmp	r4, r7
 80817b6:	d006      	beq.n	80817c6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80817b8:	6833      	ldr	r3, [r6, #0]
 80817ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80817be:	689b      	ldr	r3, [r3, #8]
 80817c0:	4630      	mov	r0, r6
 80817c2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80817c4:	e7f6      	b.n	80817b4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80817c6:	4628      	mov	r0, r5
 80817c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080817ca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80817ca:	2200      	movs	r2, #0
 80817cc:	7c00      	ldrb	r0, [r0, #16]
 80817ce:	f7fe be69 	b.w	80804a4 <HAL_I2C_Write_Data>

080817d2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80817d2:	2100      	movs	r1, #0
 80817d4:	7c00      	ldrb	r0, [r0, #16]
 80817d6:	f7fe be6d 	b.w	80804b4 <HAL_I2C_Available_Data>

080817da <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80817da:	2100      	movs	r1, #0
 80817dc:	7c00      	ldrb	r0, [r0, #16]
 80817de:	f7fe be71 	b.w	80804c4 <HAL_I2C_Read_Data>

080817e2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80817e2:	2100      	movs	r1, #0
 80817e4:	7c00      	ldrb	r0, [r0, #16]
 80817e6:	f7fe be75 	b.w	80804d4 <HAL_I2C_Peek_Data>

080817ea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80817ea:	2100      	movs	r1, #0
 80817ec:	7c00      	ldrb	r0, [r0, #16]
 80817ee:	f7fe be79 	b.w	80804e4 <HAL_I2C_Flush_Data>

080817f2 <_ZN7TwoWireD0Ev>:
 80817f2:	b510      	push	{r4, lr}
 80817f4:	4604      	mov	r4, r0
 80817f6:	2114      	movs	r1, #20
 80817f8:	f000 f949 	bl	8081a8e <_ZdlPvj>
 80817fc:	4620      	mov	r0, r4
 80817fe:	bd10      	pop	{r4, pc}

08081800 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081800:	b510      	push	{r4, lr}
 8081802:	4604      	mov	r4, r0
 8081804:	4608      	mov	r0, r1
 8081806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808180a:	60a3      	str	r3, [r4, #8]
 808180c:	4b04      	ldr	r3, [pc, #16]	; (8081820 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808180e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081810:	7420      	strb	r0, [r4, #16]
 8081812:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081814:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8081816:	f7fe fe75 	bl	8080504 <HAL_I2C_Init>

}
 808181a:	4620      	mov	r0, r4
 808181c:	bd10      	pop	{r4, pc}
 808181e:	bf00      	nop
 8081820:	080829bc 	.word	0x080829bc

08081824 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081824:	2100      	movs	r1, #0
 8081826:	7c00      	ldrb	r0, [r0, #16]
 8081828:	f7fe be64 	b.w	80804f4 <HAL_I2C_Is_Enabled>

0808182c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808182c:	2300      	movs	r3, #0
 808182e:	461a      	mov	r2, r3
 8081830:	6840      	ldr	r0, [r0, #4]
 8081832:	f7fe befb 	b.w	808062c <network_connect>

08081836 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081836:	2200      	movs	r2, #0
 8081838:	2102      	movs	r1, #2
 808183a:	6840      	ldr	r0, [r0, #4]
 808183c:	f7fe bf06 	b.w	808064c <network_disconnect>

08081840 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081840:	2200      	movs	r2, #0
 8081842:	4611      	mov	r1, r2
 8081844:	6840      	ldr	r0, [r0, #4]
 8081846:	f7fe bef9 	b.w	808063c <network_connecting>

0808184a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808184a:	2200      	movs	r2, #0
 808184c:	4611      	mov	r1, r2
 808184e:	6840      	ldr	r0, [r0, #4]
 8081850:	f7fe bf04 	b.w	808065c <network_ready>

08081854 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081854:	2300      	movs	r3, #0
 8081856:	461a      	mov	r2, r3
 8081858:	4619      	mov	r1, r3
 808185a:	6840      	ldr	r0, [r0, #4]
 808185c:	f7fe bf06 	b.w	808066c <network_on>

08081860 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081860:	2300      	movs	r3, #0
 8081862:	461a      	mov	r2, r3
 8081864:	4619      	mov	r1, r3
 8081866:	6840      	ldr	r0, [r0, #4]
 8081868:	f7fe bf08 	b.w	808067c <network_off>

0808186c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808186c:	2200      	movs	r2, #0
 808186e:	f081 0101 	eor.w	r1, r1, #1
 8081872:	6840      	ldr	r0, [r0, #4]
 8081874:	f7fe bf0a 	b.w	808068c <network_listen>

08081878 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081878:	2200      	movs	r2, #0
 808187a:	6840      	ldr	r0, [r0, #4]
 808187c:	f7fe bf16 	b.w	80806ac <network_set_listen_timeout>

08081880 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081880:	2200      	movs	r2, #0
 8081882:	4611      	mov	r1, r2
 8081884:	6840      	ldr	r0, [r0, #4]
 8081886:	f7fe bf19 	b.w	80806bc <network_get_listen_timeout>

0808188a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808188a:	2200      	movs	r2, #0
 808188c:	4611      	mov	r1, r2
 808188e:	6840      	ldr	r0, [r0, #4]
 8081890:	f7fe bf04 	b.w	808069c <network_listening>

08081894 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8081894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081896:	4617      	mov	r7, r2
 8081898:	b087      	sub	sp, #28
 808189a:	4605      	mov	r5, r0
    IPAddress addr;
 808189c:	a804      	add	r0, sp, #16
 808189e:	f7ff fd7f 	bl	80813a0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80818a2:	2600      	movs	r6, #0
 80818a4:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80818a6:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80818a8:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80818ac:	f000 fbbb 	bl	8082026 <strlen>
 80818b0:	4b0a      	ldr	r3, [pc, #40]	; (80818dc <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 80818b2:	9600      	str	r6, [sp, #0]
 80818b4:	b281      	uxth	r1, r0
 80818b6:	685b      	ldr	r3, [r3, #4]
 80818b8:	4622      	mov	r2, r4
 80818ba:	4638      	mov	r0, r7
 80818bc:	f7fe fe2a 	bl	8080514 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80818c0:	b120      	cbz	r0, 80818cc <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80818c2:	4631      	mov	r1, r6
 80818c4:	4628      	mov	r0, r5
 80818c6:	f7ff fd7b 	bl	80813c0 <_ZN9IPAddressC1Em>
 80818ca:	e003      	b.n	80818d4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80818cc:	4621      	mov	r1, r4
 80818ce:	4628      	mov	r0, r5
 80818d0:	f7ff fd6e 	bl	80813b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80818d4:	4628      	mov	r0, r5
 80818d6:	b007      	add	sp, #28
 80818d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80818da:	bf00      	nop
 80818dc:	20000504 	.word	0x20000504

080818e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80818e0:	4b02      	ldr	r3, [pc, #8]	; (80818ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80818e2:	4a03      	ldr	r2, [pc, #12]	; (80818f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80818e4:	601a      	str	r2, [r3, #0]
 80818e6:	2200      	movs	r2, #0
 80818e8:	605a      	str	r2, [r3, #4]
 80818ea:	4770      	bx	lr
 80818ec:	20000654 	.word	0x20000654
 80818f0:	080829e4 	.word	0x080829e4

080818f4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80818f4:	b510      	push	{r4, lr}
 80818f6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80818f8:	480f      	ldr	r0, [pc, #60]	; (8081938 <pinAvailable+0x44>)
 80818fa:	f7fe ff6b 	bl	80807d4 <_ZN8SPIClass9isEnabledEv>
 80818fe:	b128      	cbz	r0, 808190c <pinAvailable+0x18>
 8081900:	f1a4 030d 	sub.w	r3, r4, #13
 8081904:	2b02      	cmp	r3, #2
 8081906:	d801      	bhi.n	808190c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8081908:	2000      	movs	r0, #0
 808190a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808190c:	f000 f89a 	bl	8081a44 <_Z19__fetch_global_Wirev>
 8081910:	f7ff ff88 	bl	8081824 <_ZN7TwoWire9isEnabledEv>
 8081914:	b108      	cbz	r0, 808191a <pinAvailable+0x26>
 8081916:	2c01      	cmp	r4, #1
 8081918:	d9f6      	bls.n	8081908 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808191a:	f7ff ff0b 	bl	8081734 <_Z22__fetch_global_Serial1v>
 808191e:	f7ff ff05 	bl	808172c <_ZN11USARTSerial9isEnabledEv>
 8081922:	b118      	cbz	r0, 808192c <pinAvailable+0x38>
 8081924:	f1a4 0312 	sub.w	r3, r4, #18
 8081928:	2b01      	cmp	r3, #1
 808192a:	d9ed      	bls.n	8081908 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808192c:	2c2e      	cmp	r4, #46	; 0x2e
 808192e:	bf8c      	ite	hi
 8081930:	2000      	movhi	r0, #0
 8081932:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081934:	bd10      	pop	{r4, pc}
 8081936:	bf00      	nop
 8081938:	2000065c 	.word	0x2000065c

0808193c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808193c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808193e:	b538      	push	{r3, r4, r5, lr}
 8081940:	4604      	mov	r4, r0
 8081942:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081944:	d80a      	bhi.n	808195c <pinMode+0x20>
 8081946:	29ff      	cmp	r1, #255	; 0xff
 8081948:	d008      	beq.n	808195c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808194a:	f7ff ffd3 	bl	80818f4 <pinAvailable>
 808194e:	b128      	cbz	r0, 808195c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081950:	4629      	mov	r1, r5
 8081952:	4620      	mov	r0, r4
}
 8081954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081958:	f7fe bd0c 	b.w	8080374 <HAL_Pin_Mode>
 808195c:	bd38      	pop	{r3, r4, r5, pc}

0808195e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808195e:	b538      	push	{r3, r4, r5, lr}
 8081960:	4604      	mov	r4, r0
 8081962:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081964:	f7fe fd0e 	bl	8080384 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8081968:	28ff      	cmp	r0, #255	; 0xff
 808196a:	d010      	beq.n	808198e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808196c:	2806      	cmp	r0, #6
 808196e:	d804      	bhi.n	808197a <digitalWrite+0x1c>
 8081970:	234d      	movs	r3, #77	; 0x4d
 8081972:	fa23 f000 	lsr.w	r0, r3, r0
 8081976:	07c3      	lsls	r3, r0, #31
 8081978:	d409      	bmi.n	808198e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808197a:	4620      	mov	r0, r4
 808197c:	f7ff ffba 	bl	80818f4 <pinAvailable>
 8081980:	b128      	cbz	r0, 808198e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081982:	4629      	mov	r1, r5
 8081984:	4620      	mov	r0, r4
}
 8081986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808198a:	f7fe bd03 	b.w	8080394 <HAL_GPIO_Write>
 808198e:	bd38      	pop	{r3, r4, r5, pc}

08081990 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8081990:	b510      	push	{r4, lr}
 8081992:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081994:	f7fe fcf6 	bl	8080384 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8081998:	3804      	subs	r0, #4
 808199a:	b2c0      	uxtb	r0, r0
 808199c:	2801      	cmp	r0, #1
 808199e:	d908      	bls.n	80819b2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80819a0:	4620      	mov	r0, r4
 80819a2:	f7ff ffa7 	bl	80818f4 <pinAvailable>
 80819a6:	b120      	cbz	r0, 80819b2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80819a8:	4620      	mov	r0, r4
}
 80819aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80819ae:	f7fe bcf9 	b.w	80803a4 <HAL_GPIO_Read>
}
 80819b2:	2000      	movs	r0, #0
 80819b4:	bd10      	pop	{r4, pc}
	...

080819b8 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80819b8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80819ba:	4e11      	ldr	r6, [pc, #68]	; (8081a00 <_GLOBAL__sub_I_SPI+0x48>)
 80819bc:	4d11      	ldr	r5, [pc, #68]	; (8081a04 <_GLOBAL__sub_I_SPI+0x4c>)
 80819be:	4c12      	ldr	r4, [pc, #72]	; (8081a08 <_GLOBAL__sub_I_SPI+0x50>)
 80819c0:	2100      	movs	r1, #0
 80819c2:	4630      	mov	r0, r6
 80819c4:	f7fe fef2 	bl	80807ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80819c8:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80819ca:	4e10      	ldr	r6, [pc, #64]	; (8081a0c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80819cc:	462a      	mov	r2, r5
 80819ce:	4621      	mov	r1, r4
 80819d0:	f000 f858 	bl	8081a84 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80819d4:	2101      	movs	r1, #1
 80819d6:	4630      	mov	r0, r6
 80819d8:	f7fe fee8 	bl	80807ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80819dc:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80819de:	4e0c      	ldr	r6, [pc, #48]	; (8081a10 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80819e0:	462a      	mov	r2, r5
 80819e2:	4621      	mov	r1, r4
 80819e4:	f000 f84e 	bl	8081a84 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80819e8:	2102      	movs	r1, #2
 80819ea:	4630      	mov	r0, r6
 80819ec:	f7fe fede 	bl	80807ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80819f0:	462a      	mov	r2, r5
 80819f2:	4621      	mov	r1, r4
 80819f4:	4630      	mov	r0, r6
 80819f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80819fa:	f000 b843 	b.w	8081a84 <__aeabi_atexit>
 80819fe:	bf00      	nop
 8081a00:	2000065c 	.word	0x2000065c
 8081a04:	200000c4 	.word	0x200000c4
 8081a08:	0808079d 	.word	0x0808079d
 8081a0c:	2000066c 	.word	0x2000066c
 8081a10:	2000067c 	.word	0x2000067c

08081a14 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081a14:	b513      	push	{r0, r1, r4, lr}
 8081a16:	4c08      	ldr	r4, [pc, #32]	; (8081a38 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081a18:	2300      	movs	r3, #0
 8081a1a:	461a      	mov	r2, r3
 8081a1c:	4619      	mov	r1, r3
 8081a1e:	9300      	str	r3, [sp, #0]
 8081a20:	4620      	mov	r0, r4
 8081a22:	f7ff fcdf 	bl	80813e4 <_ZN9IPAddressC1Ehhhh>
 8081a26:	4620      	mov	r0, r4
 8081a28:	4a04      	ldr	r2, [pc, #16]	; (8081a3c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8081a2a:	4905      	ldr	r1, [pc, #20]	; (8081a40 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081a2c:	b002      	add	sp, #8
 8081a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081a32:	f000 b827 	b.w	8081a84 <__aeabi_atexit>
 8081a36:	bf00      	nop
 8081a38:	20000690 	.word	0x20000690
 8081a3c:	200000c4 	.word	0x200000c4
 8081a40:	0808135d 	.word	0x0808135d

08081a44 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8081a44:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8081a46:	4d0b      	ldr	r5, [pc, #44]	; (8081a74 <_Z19__fetch_global_Wirev+0x30>)
 8081a48:	6829      	ldr	r1, [r5, #0]
 8081a4a:	f011 0401 	ands.w	r4, r1, #1
 8081a4e:	d10f      	bne.n	8081a70 <_Z19__fetch_global_Wirev+0x2c>
 8081a50:	4628      	mov	r0, r5
 8081a52:	f7fe fb26 	bl	80800a2 <__cxa_guard_acquire>
 8081a56:	b158      	cbz	r0, 8081a70 <_Z19__fetch_global_Wirev+0x2c>
 8081a58:	4621      	mov	r1, r4
 8081a5a:	4807      	ldr	r0, [pc, #28]	; (8081a78 <_Z19__fetch_global_Wirev+0x34>)
 8081a5c:	f7ff fed0 	bl	8081800 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081a60:	4628      	mov	r0, r5
 8081a62:	f7fe fb23 	bl	80800ac <__cxa_guard_release>
 8081a66:	4a05      	ldr	r2, [pc, #20]	; (8081a7c <_Z19__fetch_global_Wirev+0x38>)
 8081a68:	4905      	ldr	r1, [pc, #20]	; (8081a80 <_Z19__fetch_global_Wirev+0x3c>)
 8081a6a:	4803      	ldr	r0, [pc, #12]	; (8081a78 <_Z19__fetch_global_Wirev+0x34>)
 8081a6c:	f000 f80a 	bl	8081a84 <__aeabi_atexit>
	return wire;
}
 8081a70:	4801      	ldr	r0, [pc, #4]	; (8081a78 <_Z19__fetch_global_Wirev+0x34>)
 8081a72:	bd38      	pop	{r3, r4, r5, pc}
 8081a74:	20000698 	.word	0x20000698
 8081a78:	2000069c 	.word	0x2000069c
 8081a7c:	200000c4 	.word	0x200000c4
 8081a80:	080817a9 	.word	0x080817a9

08081a84 <__aeabi_atexit>:
 8081a84:	460b      	mov	r3, r1
 8081a86:	4601      	mov	r1, r0
 8081a88:	4618      	mov	r0, r3
 8081a8a:	f000 b94d 	b.w	8081d28 <__cxa_atexit>

08081a8e <_ZdlPvj>:
 8081a8e:	f7fe bb06 	b.w	808009e <_ZdlPv>

08081a92 <_ZSt25__throw_bad_function_callv>:
 8081a92:	b508      	push	{r3, lr}
 8081a94:	f7fe fe72 	bl	808077c <abort>

08081a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081a98:	4b18      	ldr	r3, [pc, #96]	; (8081afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081a9a:	681a      	ldr	r2, [r3, #0]
 8081a9c:	07d1      	lsls	r1, r2, #31
 8081a9e:	bf5c      	itt	pl
 8081aa0:	2201      	movpl	r2, #1
 8081aa2:	601a      	strpl	r2, [r3, #0]
 8081aa4:	4b16      	ldr	r3, [pc, #88]	; (8081b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081aa6:	681a      	ldr	r2, [r3, #0]
 8081aa8:	07d2      	lsls	r2, r2, #31
 8081aaa:	bf5c      	itt	pl
 8081aac:	2201      	movpl	r2, #1
 8081aae:	601a      	strpl	r2, [r3, #0]
 8081ab0:	4b14      	ldr	r3, [pc, #80]	; (8081b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081ab2:	681a      	ldr	r2, [r3, #0]
 8081ab4:	07d0      	lsls	r0, r2, #31
 8081ab6:	bf5c      	itt	pl
 8081ab8:	2201      	movpl	r2, #1
 8081aba:	601a      	strpl	r2, [r3, #0]
 8081abc:	4b12      	ldr	r3, [pc, #72]	; (8081b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081abe:	681a      	ldr	r2, [r3, #0]
 8081ac0:	07d1      	lsls	r1, r2, #31
 8081ac2:	bf5c      	itt	pl
 8081ac4:	2201      	movpl	r2, #1
 8081ac6:	601a      	strpl	r2, [r3, #0]
 8081ac8:	4b10      	ldr	r3, [pc, #64]	; (8081b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081aca:	681a      	ldr	r2, [r3, #0]
 8081acc:	07d2      	lsls	r2, r2, #31
 8081ace:	bf5c      	itt	pl
 8081ad0:	2201      	movpl	r2, #1
 8081ad2:	601a      	strpl	r2, [r3, #0]
 8081ad4:	4b0e      	ldr	r3, [pc, #56]	; (8081b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081ad6:	681a      	ldr	r2, [r3, #0]
 8081ad8:	07d0      	lsls	r0, r2, #31
 8081ada:	bf5c      	itt	pl
 8081adc:	2201      	movpl	r2, #1
 8081ade:	601a      	strpl	r2, [r3, #0]
 8081ae0:	4b0c      	ldr	r3, [pc, #48]	; (8081b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081ae2:	681a      	ldr	r2, [r3, #0]
 8081ae4:	07d1      	lsls	r1, r2, #31
 8081ae6:	bf5c      	itt	pl
 8081ae8:	2201      	movpl	r2, #1
 8081aea:	601a      	strpl	r2, [r3, #0]
 8081aec:	4b0a      	ldr	r3, [pc, #40]	; (8081b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081aee:	681a      	ldr	r2, [r3, #0]
 8081af0:	07d2      	lsls	r2, r2, #31
 8081af2:	bf5c      	itt	pl
 8081af4:	2201      	movpl	r2, #1
 8081af6:	601a      	strpl	r2, [r3, #0]
 8081af8:	4770      	bx	lr
 8081afa:	bf00      	nop
 8081afc:	200006cc 	.word	0x200006cc
 8081b00:	200006c8 	.word	0x200006c8
 8081b04:	200006c4 	.word	0x200006c4
 8081b08:	200006c0 	.word	0x200006c0
 8081b0c:	200006bc 	.word	0x200006bc
 8081b10:	200006b8 	.word	0x200006b8
 8081b14:	200006b4 	.word	0x200006b4
 8081b18:	200006b0 	.word	0x200006b0

08081b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081b1c:	4b24      	ldr	r3, [pc, #144]	; (8081bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081b1e:	681a      	ldr	r2, [r3, #0]
 8081b20:	07d0      	lsls	r0, r2, #31
 8081b22:	bf5c      	itt	pl
 8081b24:	2201      	movpl	r2, #1
 8081b26:	601a      	strpl	r2, [r3, #0]
 8081b28:	4b22      	ldr	r3, [pc, #136]	; (8081bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081b2a:	681a      	ldr	r2, [r3, #0]
 8081b2c:	07d1      	lsls	r1, r2, #31
 8081b2e:	bf5c      	itt	pl
 8081b30:	2201      	movpl	r2, #1
 8081b32:	601a      	strpl	r2, [r3, #0]
 8081b34:	4b20      	ldr	r3, [pc, #128]	; (8081bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081b36:	681a      	ldr	r2, [r3, #0]
 8081b38:	07d2      	lsls	r2, r2, #31
 8081b3a:	bf5c      	itt	pl
 8081b3c:	2201      	movpl	r2, #1
 8081b3e:	601a      	strpl	r2, [r3, #0]
 8081b40:	4b1e      	ldr	r3, [pc, #120]	; (8081bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081b42:	681a      	ldr	r2, [r3, #0]
 8081b44:	07d0      	lsls	r0, r2, #31
 8081b46:	bf5c      	itt	pl
 8081b48:	2201      	movpl	r2, #1
 8081b4a:	601a      	strpl	r2, [r3, #0]
 8081b4c:	4b1c      	ldr	r3, [pc, #112]	; (8081bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081b4e:	681a      	ldr	r2, [r3, #0]
 8081b50:	07d1      	lsls	r1, r2, #31
 8081b52:	bf5c      	itt	pl
 8081b54:	2201      	movpl	r2, #1
 8081b56:	601a      	strpl	r2, [r3, #0]
 8081b58:	4b1a      	ldr	r3, [pc, #104]	; (8081bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081b5a:	681a      	ldr	r2, [r3, #0]
 8081b5c:	07d2      	lsls	r2, r2, #31
 8081b5e:	bf5c      	itt	pl
 8081b60:	2201      	movpl	r2, #1
 8081b62:	601a      	strpl	r2, [r3, #0]
 8081b64:	4b18      	ldr	r3, [pc, #96]	; (8081bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081b66:	681a      	ldr	r2, [r3, #0]
 8081b68:	07d0      	lsls	r0, r2, #31
 8081b6a:	bf5c      	itt	pl
 8081b6c:	2201      	movpl	r2, #1
 8081b6e:	601a      	strpl	r2, [r3, #0]
 8081b70:	4b16      	ldr	r3, [pc, #88]	; (8081bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8081b72:	681a      	ldr	r2, [r3, #0]
 8081b74:	07d1      	lsls	r1, r2, #31
 8081b76:	bf5c      	itt	pl
 8081b78:	2201      	movpl	r2, #1
 8081b7a:	601a      	strpl	r2, [r3, #0]
 8081b7c:	4b14      	ldr	r3, [pc, #80]	; (8081bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8081b7e:	681a      	ldr	r2, [r3, #0]
 8081b80:	07d2      	lsls	r2, r2, #31
 8081b82:	bf5c      	itt	pl
 8081b84:	2201      	movpl	r2, #1
 8081b86:	601a      	strpl	r2, [r3, #0]
 8081b88:	4b12      	ldr	r3, [pc, #72]	; (8081bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8081b8a:	681a      	ldr	r2, [r3, #0]
 8081b8c:	07d0      	lsls	r0, r2, #31
 8081b8e:	bf5c      	itt	pl
 8081b90:	2201      	movpl	r2, #1
 8081b92:	601a      	strpl	r2, [r3, #0]
 8081b94:	4b10      	ldr	r3, [pc, #64]	; (8081bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8081b96:	681a      	ldr	r2, [r3, #0]
 8081b98:	07d1      	lsls	r1, r2, #31
 8081b9a:	bf5c      	itt	pl
 8081b9c:	2201      	movpl	r2, #1
 8081b9e:	601a      	strpl	r2, [r3, #0]
 8081ba0:	4b0e      	ldr	r3, [pc, #56]	; (8081bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8081ba2:	681a      	ldr	r2, [r3, #0]
 8081ba4:	07d2      	lsls	r2, r2, #31
 8081ba6:	bf5c      	itt	pl
 8081ba8:	2201      	movpl	r2, #1
 8081baa:	601a      	strpl	r2, [r3, #0]
 8081bac:	4770      	bx	lr
 8081bae:	bf00      	nop
 8081bb0:	200006fc 	.word	0x200006fc
 8081bb4:	200006f8 	.word	0x200006f8
 8081bb8:	200006f4 	.word	0x200006f4
 8081bbc:	200006f0 	.word	0x200006f0
 8081bc0:	200006ec 	.word	0x200006ec
 8081bc4:	200006e8 	.word	0x200006e8
 8081bc8:	200006e4 	.word	0x200006e4
 8081bcc:	200006e0 	.word	0x200006e0
 8081bd0:	200006dc 	.word	0x200006dc
 8081bd4:	200006d8 	.word	0x200006d8
 8081bd8:	200006d4 	.word	0x200006d4
 8081bdc:	200006d0 	.word	0x200006d0

08081be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081be0:	4b24      	ldr	r3, [pc, #144]	; (8081c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081be2:	681a      	ldr	r2, [r3, #0]
 8081be4:	07d0      	lsls	r0, r2, #31
 8081be6:	bf5c      	itt	pl
 8081be8:	2201      	movpl	r2, #1
 8081bea:	601a      	strpl	r2, [r3, #0]
 8081bec:	4b22      	ldr	r3, [pc, #136]	; (8081c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8081bee:	681a      	ldr	r2, [r3, #0]
 8081bf0:	07d1      	lsls	r1, r2, #31
 8081bf2:	bf5c      	itt	pl
 8081bf4:	2201      	movpl	r2, #1
 8081bf6:	601a      	strpl	r2, [r3, #0]
 8081bf8:	4b20      	ldr	r3, [pc, #128]	; (8081c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8081bfa:	681a      	ldr	r2, [r3, #0]
 8081bfc:	07d2      	lsls	r2, r2, #31
 8081bfe:	bf5c      	itt	pl
 8081c00:	2201      	movpl	r2, #1
 8081c02:	601a      	strpl	r2, [r3, #0]
 8081c04:	4b1e      	ldr	r3, [pc, #120]	; (8081c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8081c06:	681a      	ldr	r2, [r3, #0]
 8081c08:	07d0      	lsls	r0, r2, #31
 8081c0a:	bf5c      	itt	pl
 8081c0c:	2201      	movpl	r2, #1
 8081c0e:	601a      	strpl	r2, [r3, #0]
 8081c10:	4b1c      	ldr	r3, [pc, #112]	; (8081c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081c12:	681a      	ldr	r2, [r3, #0]
 8081c14:	07d1      	lsls	r1, r2, #31
 8081c16:	bf5c      	itt	pl
 8081c18:	2201      	movpl	r2, #1
 8081c1a:	601a      	strpl	r2, [r3, #0]
 8081c1c:	4b1a      	ldr	r3, [pc, #104]	; (8081c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8081c1e:	681a      	ldr	r2, [r3, #0]
 8081c20:	07d2      	lsls	r2, r2, #31
 8081c22:	bf5c      	itt	pl
 8081c24:	2201      	movpl	r2, #1
 8081c26:	601a      	strpl	r2, [r3, #0]
 8081c28:	4b18      	ldr	r3, [pc, #96]	; (8081c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8081c2a:	681a      	ldr	r2, [r3, #0]
 8081c2c:	07d0      	lsls	r0, r2, #31
 8081c2e:	bf5c      	itt	pl
 8081c30:	2201      	movpl	r2, #1
 8081c32:	601a      	strpl	r2, [r3, #0]
 8081c34:	4b16      	ldr	r3, [pc, #88]	; (8081c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8081c36:	681a      	ldr	r2, [r3, #0]
 8081c38:	07d1      	lsls	r1, r2, #31
 8081c3a:	bf5c      	itt	pl
 8081c3c:	2201      	movpl	r2, #1
 8081c3e:	601a      	strpl	r2, [r3, #0]
 8081c40:	4b14      	ldr	r3, [pc, #80]	; (8081c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081c42:	681a      	ldr	r2, [r3, #0]
 8081c44:	07d2      	lsls	r2, r2, #31
 8081c46:	bf5c      	itt	pl
 8081c48:	2201      	movpl	r2, #1
 8081c4a:	601a      	strpl	r2, [r3, #0]
 8081c4c:	4b12      	ldr	r3, [pc, #72]	; (8081c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081c4e:	681a      	ldr	r2, [r3, #0]
 8081c50:	07d0      	lsls	r0, r2, #31
 8081c52:	bf5c      	itt	pl
 8081c54:	2201      	movpl	r2, #1
 8081c56:	601a      	strpl	r2, [r3, #0]
 8081c58:	4b10      	ldr	r3, [pc, #64]	; (8081c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8081c5a:	681a      	ldr	r2, [r3, #0]
 8081c5c:	07d1      	lsls	r1, r2, #31
 8081c5e:	bf5c      	itt	pl
 8081c60:	2201      	movpl	r2, #1
 8081c62:	601a      	strpl	r2, [r3, #0]
 8081c64:	4b0e      	ldr	r3, [pc, #56]	; (8081ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8081c66:	681a      	ldr	r2, [r3, #0]
 8081c68:	07d2      	lsls	r2, r2, #31
 8081c6a:	bf5c      	itt	pl
 8081c6c:	2201      	movpl	r2, #1
 8081c6e:	601a      	strpl	r2, [r3, #0]
 8081c70:	4770      	bx	lr
 8081c72:	bf00      	nop
 8081c74:	2000072c 	.word	0x2000072c
 8081c78:	20000728 	.word	0x20000728
 8081c7c:	20000724 	.word	0x20000724
 8081c80:	20000720 	.word	0x20000720
 8081c84:	2000071c 	.word	0x2000071c
 8081c88:	20000718 	.word	0x20000718
 8081c8c:	20000714 	.word	0x20000714
 8081c90:	20000710 	.word	0x20000710
 8081c94:	2000070c 	.word	0x2000070c
 8081c98:	20000708 	.word	0x20000708
 8081c9c:	20000704 	.word	0x20000704
 8081ca0:	20000700 	.word	0x20000700

08081ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081ca4:	4b18      	ldr	r3, [pc, #96]	; (8081d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081ca6:	681a      	ldr	r2, [r3, #0]
 8081ca8:	07d1      	lsls	r1, r2, #31
 8081caa:	bf5c      	itt	pl
 8081cac:	2201      	movpl	r2, #1
 8081cae:	601a      	strpl	r2, [r3, #0]
 8081cb0:	4b16      	ldr	r3, [pc, #88]	; (8081d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081cb2:	681a      	ldr	r2, [r3, #0]
 8081cb4:	07d2      	lsls	r2, r2, #31
 8081cb6:	bf5c      	itt	pl
 8081cb8:	2201      	movpl	r2, #1
 8081cba:	601a      	strpl	r2, [r3, #0]
 8081cbc:	4b14      	ldr	r3, [pc, #80]	; (8081d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081cbe:	681a      	ldr	r2, [r3, #0]
 8081cc0:	07d0      	lsls	r0, r2, #31
 8081cc2:	bf5c      	itt	pl
 8081cc4:	2201      	movpl	r2, #1
 8081cc6:	601a      	strpl	r2, [r3, #0]
 8081cc8:	4b12      	ldr	r3, [pc, #72]	; (8081d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081cca:	681a      	ldr	r2, [r3, #0]
 8081ccc:	07d1      	lsls	r1, r2, #31
 8081cce:	bf5c      	itt	pl
 8081cd0:	2201      	movpl	r2, #1
 8081cd2:	601a      	strpl	r2, [r3, #0]
 8081cd4:	4b10      	ldr	r3, [pc, #64]	; (8081d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081cd6:	681a      	ldr	r2, [r3, #0]
 8081cd8:	07d2      	lsls	r2, r2, #31
 8081cda:	bf5c      	itt	pl
 8081cdc:	2201      	movpl	r2, #1
 8081cde:	601a      	strpl	r2, [r3, #0]
 8081ce0:	4b0e      	ldr	r3, [pc, #56]	; (8081d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081ce2:	681a      	ldr	r2, [r3, #0]
 8081ce4:	07d0      	lsls	r0, r2, #31
 8081ce6:	bf5c      	itt	pl
 8081ce8:	2201      	movpl	r2, #1
 8081cea:	601a      	strpl	r2, [r3, #0]
 8081cec:	4b0c      	ldr	r3, [pc, #48]	; (8081d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081cee:	681a      	ldr	r2, [r3, #0]
 8081cf0:	07d1      	lsls	r1, r2, #31
 8081cf2:	bf5c      	itt	pl
 8081cf4:	2201      	movpl	r2, #1
 8081cf6:	601a      	strpl	r2, [r3, #0]
 8081cf8:	4b0a      	ldr	r3, [pc, #40]	; (8081d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081cfa:	681a      	ldr	r2, [r3, #0]
 8081cfc:	07d2      	lsls	r2, r2, #31
 8081cfe:	bf5c      	itt	pl
 8081d00:	2201      	movpl	r2, #1
 8081d02:	601a      	strpl	r2, [r3, #0]
 8081d04:	4770      	bx	lr
 8081d06:	bf00      	nop
 8081d08:	2000074c 	.word	0x2000074c
 8081d0c:	20000748 	.word	0x20000748
 8081d10:	20000744 	.word	0x20000744
 8081d14:	20000740 	.word	0x20000740
 8081d18:	2000073c 	.word	0x2000073c
 8081d1c:	20000738 	.word	0x20000738
 8081d20:	20000734 	.word	0x20000734
 8081d24:	20000730 	.word	0x20000730

08081d28 <__cxa_atexit>:
 8081d28:	b510      	push	{r4, lr}
 8081d2a:	4c05      	ldr	r4, [pc, #20]	; (8081d40 <__cxa_atexit+0x18>)
 8081d2c:	4613      	mov	r3, r2
 8081d2e:	b12c      	cbz	r4, 8081d3c <__cxa_atexit+0x14>
 8081d30:	460a      	mov	r2, r1
 8081d32:	4601      	mov	r1, r0
 8081d34:	2002      	movs	r0, #2
 8081d36:	f3af 8000 	nop.w
 8081d3a:	bd10      	pop	{r4, pc}
 8081d3c:	4620      	mov	r0, r4
 8081d3e:	bd10      	pop	{r4, pc}
 8081d40:	00000000 	.word	0x00000000

08081d44 <localtime>:
 8081d44:	b538      	push	{r3, r4, r5, lr}
 8081d46:	4b07      	ldr	r3, [pc, #28]	; (8081d64 <localtime+0x20>)
 8081d48:	4605      	mov	r5, r0
 8081d4a:	681c      	ldr	r4, [r3, #0]
 8081d4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8081d4e:	b91b      	cbnz	r3, 8081d58 <localtime+0x14>
 8081d50:	2024      	movs	r0, #36	; 0x24
 8081d52:	f7fe fcf3 	bl	808073c <malloc>
 8081d56:	63e0      	str	r0, [r4, #60]	; 0x3c
 8081d58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8081d5a:	4628      	mov	r0, r5
 8081d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081d60:	f000 b802 	b.w	8081d68 <localtime_r>
 8081d64:	20000074 	.word	0x20000074

08081d68 <localtime_r>:
 8081d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081d6c:	460c      	mov	r4, r1
 8081d6e:	4680      	mov	r8, r0
 8081d70:	f000 fc72 	bl	8082658 <__gettzinfo>
 8081d74:	4621      	mov	r1, r4
 8081d76:	4607      	mov	r7, r0
 8081d78:	4640      	mov	r0, r8
 8081d7a:	f000 fc71 	bl	8082660 <gmtime_r>
 8081d7e:	6946      	ldr	r6, [r0, #20]
 8081d80:	4604      	mov	r4, r0
 8081d82:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8081d86:	07b3      	lsls	r3, r6, #30
 8081d88:	d105      	bne.n	8081d96 <localtime_r+0x2e>
 8081d8a:	2264      	movs	r2, #100	; 0x64
 8081d8c:	fb96 f3f2 	sdiv	r3, r6, r2
 8081d90:	fb02 6313 	mls	r3, r2, r3, r6
 8081d94:	b94b      	cbnz	r3, 8081daa <localtime_r+0x42>
 8081d96:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8081d9a:	fb96 f3f5 	sdiv	r3, r6, r5
 8081d9e:	fb05 6513 	mls	r5, r5, r3, r6
 8081da2:	fab5 f385 	clz	r3, r5
 8081da6:	095b      	lsrs	r3, r3, #5
 8081da8:	e000      	b.n	8081dac <localtime_r+0x44>
 8081daa:	2301      	movs	r3, #1
 8081dac:	4a5f      	ldr	r2, [pc, #380]	; (8081f2c <localtime_r+0x1c4>)
 8081dae:	2530      	movs	r5, #48	; 0x30
 8081db0:	fb05 2503 	mla	r5, r5, r3, r2
 8081db4:	f000 fa84 	bl	80822c0 <__tz_lock>
 8081db8:	f000 fa84 	bl	80822c4 <_tzset_unlocked>
 8081dbc:	4b5c      	ldr	r3, [pc, #368]	; (8081f30 <localtime_r+0x1c8>)
 8081dbe:	681b      	ldr	r3, [r3, #0]
 8081dc0:	b1f3      	cbz	r3, 8081e00 <localtime_r+0x98>
 8081dc2:	687b      	ldr	r3, [r7, #4]
 8081dc4:	429e      	cmp	r6, r3
 8081dc6:	d105      	bne.n	8081dd4 <localtime_r+0x6c>
 8081dc8:	6839      	ldr	r1, [r7, #0]
 8081dca:	f8d8 3000 	ldr.w	r3, [r8]
 8081dce:	69fa      	ldr	r2, [r7, #28]
 8081dd0:	b941      	cbnz	r1, 8081de4 <localtime_r+0x7c>
 8081dd2:	e00a      	b.n	8081dea <localtime_r+0x82>
 8081dd4:	4630      	mov	r0, r6
 8081dd6:	f000 f9cb 	bl	8082170 <__tzcalc_limits>
 8081dda:	2800      	cmp	r0, #0
 8081ddc:	d1f4      	bne.n	8081dc8 <localtime_r+0x60>
 8081dde:	f04f 33ff 	mov.w	r3, #4294967295
 8081de2:	e00d      	b.n	8081e00 <localtime_r+0x98>
 8081de4:	4293      	cmp	r3, r2
 8081de6:	db08      	blt.n	8081dfa <localtime_r+0x92>
 8081de8:	e001      	b.n	8081dee <localtime_r+0x86>
 8081dea:	4293      	cmp	r3, r2
 8081dec:	da07      	bge.n	8081dfe <localtime_r+0x96>
 8081dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8081df0:	4293      	cmp	r3, r2
 8081df2:	bfac      	ite	ge
 8081df4:	2300      	movge	r3, #0
 8081df6:	2301      	movlt	r3, #1
 8081df8:	e002      	b.n	8081e00 <localtime_r+0x98>
 8081dfa:	2300      	movs	r3, #0
 8081dfc:	e000      	b.n	8081e00 <localtime_r+0x98>
 8081dfe:	2301      	movs	r3, #1
 8081e00:	6223      	str	r3, [r4, #32]
 8081e02:	6a23      	ldr	r3, [r4, #32]
 8081e04:	203c      	movs	r0, #60	; 0x3c
 8081e06:	2b01      	cmp	r3, #1
 8081e08:	bf0c      	ite	eq
 8081e0a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8081e0c:	6a39      	ldrne	r1, [r7, #32]
 8081e0e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8081e12:	fb91 f6f3 	sdiv	r6, r1, r3
 8081e16:	fb03 1316 	mls	r3, r3, r6, r1
 8081e1a:	fb93 f2f0 	sdiv	r2, r3, r0
 8081e1e:	fb00 3012 	mls	r0, r0, r2, r3
 8081e22:	6861      	ldr	r1, [r4, #4]
 8081e24:	6823      	ldr	r3, [r4, #0]
 8081e26:	1a89      	subs	r1, r1, r2
 8081e28:	68a2      	ldr	r2, [r4, #8]
 8081e2a:	1a1b      	subs	r3, r3, r0
 8081e2c:	1b92      	subs	r2, r2, r6
 8081e2e:	2b3b      	cmp	r3, #59	; 0x3b
 8081e30:	6023      	str	r3, [r4, #0]
 8081e32:	6061      	str	r1, [r4, #4]
 8081e34:	60a2      	str	r2, [r4, #8]
 8081e36:	dd03      	ble.n	8081e40 <localtime_r+0xd8>
 8081e38:	3101      	adds	r1, #1
 8081e3a:	6061      	str	r1, [r4, #4]
 8081e3c:	3b3c      	subs	r3, #60	; 0x3c
 8081e3e:	e004      	b.n	8081e4a <localtime_r+0xe2>
 8081e40:	2b00      	cmp	r3, #0
 8081e42:	da03      	bge.n	8081e4c <localtime_r+0xe4>
 8081e44:	3901      	subs	r1, #1
 8081e46:	6061      	str	r1, [r4, #4]
 8081e48:	333c      	adds	r3, #60	; 0x3c
 8081e4a:	6023      	str	r3, [r4, #0]
 8081e4c:	6863      	ldr	r3, [r4, #4]
 8081e4e:	2b3b      	cmp	r3, #59	; 0x3b
 8081e50:	dd03      	ble.n	8081e5a <localtime_r+0xf2>
 8081e52:	3201      	adds	r2, #1
 8081e54:	60a2      	str	r2, [r4, #8]
 8081e56:	3b3c      	subs	r3, #60	; 0x3c
 8081e58:	e004      	b.n	8081e64 <localtime_r+0xfc>
 8081e5a:	2b00      	cmp	r3, #0
 8081e5c:	da03      	bge.n	8081e66 <localtime_r+0xfe>
 8081e5e:	3a01      	subs	r2, #1
 8081e60:	60a2      	str	r2, [r4, #8]
 8081e62:	333c      	adds	r3, #60	; 0x3c
 8081e64:	6063      	str	r3, [r4, #4]
 8081e66:	68a3      	ldr	r3, [r4, #8]
 8081e68:	2b17      	cmp	r3, #23
 8081e6a:	dd22      	ble.n	8081eb2 <localtime_r+0x14a>
 8081e6c:	69e2      	ldr	r2, [r4, #28]
 8081e6e:	3b18      	subs	r3, #24
 8081e70:	3201      	adds	r2, #1
 8081e72:	61e2      	str	r2, [r4, #28]
 8081e74:	69a2      	ldr	r2, [r4, #24]
 8081e76:	60a3      	str	r3, [r4, #8]
 8081e78:	3201      	adds	r2, #1
 8081e7a:	2a06      	cmp	r2, #6
 8081e7c:	bfc8      	it	gt
 8081e7e:	2200      	movgt	r2, #0
 8081e80:	61a2      	str	r2, [r4, #24]
 8081e82:	68e2      	ldr	r2, [r4, #12]
 8081e84:	6923      	ldr	r3, [r4, #16]
 8081e86:	3201      	adds	r2, #1
 8081e88:	60e2      	str	r2, [r4, #12]
 8081e8a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8081e8e:	428a      	cmp	r2, r1
 8081e90:	dd46      	ble.n	8081f20 <localtime_r+0x1b8>
 8081e92:	3301      	adds	r3, #1
 8081e94:	2b0c      	cmp	r3, #12
 8081e96:	bf08      	it	eq
 8081e98:	6963      	ldreq	r3, [r4, #20]
 8081e9a:	eba2 0201 	sub.w	r2, r2, r1
 8081e9e:	60e2      	str	r2, [r4, #12]
 8081ea0:	bf05      	ittet	eq
 8081ea2:	3301      	addeq	r3, #1
 8081ea4:	2200      	moveq	r2, #0
 8081ea6:	6123      	strne	r3, [r4, #16]
 8081ea8:	6122      	streq	r2, [r4, #16]
 8081eaa:	bf04      	itt	eq
 8081eac:	6163      	streq	r3, [r4, #20]
 8081eae:	61e2      	streq	r2, [r4, #28]
 8081eb0:	e036      	b.n	8081f20 <localtime_r+0x1b8>
 8081eb2:	2b00      	cmp	r3, #0
 8081eb4:	da34      	bge.n	8081f20 <localtime_r+0x1b8>
 8081eb6:	69e2      	ldr	r2, [r4, #28]
 8081eb8:	3318      	adds	r3, #24
 8081eba:	3a01      	subs	r2, #1
 8081ebc:	61e2      	str	r2, [r4, #28]
 8081ebe:	69a2      	ldr	r2, [r4, #24]
 8081ec0:	60a3      	str	r3, [r4, #8]
 8081ec2:	3a01      	subs	r2, #1
 8081ec4:	bf48      	it	mi
 8081ec6:	2206      	movmi	r2, #6
 8081ec8:	61a2      	str	r2, [r4, #24]
 8081eca:	68e2      	ldr	r2, [r4, #12]
 8081ecc:	3a01      	subs	r2, #1
 8081ece:	60e2      	str	r2, [r4, #12]
 8081ed0:	bb32      	cbnz	r2, 8081f20 <localtime_r+0x1b8>
 8081ed2:	6923      	ldr	r3, [r4, #16]
 8081ed4:	3b01      	subs	r3, #1
 8081ed6:	d401      	bmi.n	8081edc <localtime_r+0x174>
 8081ed8:	6123      	str	r3, [r4, #16]
 8081eda:	e01d      	b.n	8081f18 <localtime_r+0x1b0>
 8081edc:	230b      	movs	r3, #11
 8081ede:	6123      	str	r3, [r4, #16]
 8081ee0:	6963      	ldr	r3, [r4, #20]
 8081ee2:	1e5a      	subs	r2, r3, #1
 8081ee4:	f012 0f03 	tst.w	r2, #3
 8081ee8:	6162      	str	r2, [r4, #20]
 8081eea:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8081eee:	d105      	bne.n	8081efc <localtime_r+0x194>
 8081ef0:	2164      	movs	r1, #100	; 0x64
 8081ef2:	fb93 f2f1 	sdiv	r2, r3, r1
 8081ef6:	fb01 3212 	mls	r2, r1, r2, r3
 8081efa:	b94a      	cbnz	r2, 8081f10 <localtime_r+0x1a8>
 8081efc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8081f00:	fb93 f2f1 	sdiv	r2, r3, r1
 8081f04:	fb01 3312 	mls	r3, r1, r2, r3
 8081f08:	fab3 f383 	clz	r3, r3
 8081f0c:	095b      	lsrs	r3, r3, #5
 8081f0e:	e000      	b.n	8081f12 <localtime_r+0x1aa>
 8081f10:	2301      	movs	r3, #1
 8081f12:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8081f16:	61e3      	str	r3, [r4, #28]
 8081f18:	6923      	ldr	r3, [r4, #16]
 8081f1a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8081f1e:	60e3      	str	r3, [r4, #12]
 8081f20:	f000 f9cf 	bl	80822c2 <__tz_unlock>
 8081f24:	4620      	mov	r0, r4
 8081f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081f2a:	bf00      	nop
 8081f2c:	08082b78 	.word	0x08082b78
 8081f30:	2000076c 	.word	0x2000076c

08081f34 <memcpy>:
 8081f34:	b510      	push	{r4, lr}
 8081f36:	1e43      	subs	r3, r0, #1
 8081f38:	440a      	add	r2, r1
 8081f3a:	4291      	cmp	r1, r2
 8081f3c:	d004      	beq.n	8081f48 <memcpy+0x14>
 8081f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8081f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8081f46:	e7f8      	b.n	8081f3a <memcpy+0x6>
 8081f48:	bd10      	pop	{r4, pc}

08081f4a <memset>:
 8081f4a:	4603      	mov	r3, r0
 8081f4c:	4402      	add	r2, r0
 8081f4e:	4293      	cmp	r3, r2
 8081f50:	d002      	beq.n	8081f58 <memset+0xe>
 8081f52:	f803 1b01 	strb.w	r1, [r3], #1
 8081f56:	e7fa      	b.n	8081f4e <memset+0x4>
 8081f58:	4770      	bx	lr
	...

08081f5c <srand>:
 8081f5c:	b538      	push	{r3, r4, r5, lr}
 8081f5e:	4b12      	ldr	r3, [pc, #72]	; (8081fa8 <srand+0x4c>)
 8081f60:	4605      	mov	r5, r0
 8081f62:	681c      	ldr	r4, [r3, #0]
 8081f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8081f66:	b9d3      	cbnz	r3, 8081f9e <srand+0x42>
 8081f68:	2018      	movs	r0, #24
 8081f6a:	f7fe fbe7 	bl	808073c <malloc>
 8081f6e:	f243 330e 	movw	r3, #13070	; 0x330e
 8081f72:	63a0      	str	r0, [r4, #56]	; 0x38
 8081f74:	8003      	strh	r3, [r0, #0]
 8081f76:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8081f7a:	8043      	strh	r3, [r0, #2]
 8081f7c:	f241 2334 	movw	r3, #4660	; 0x1234
 8081f80:	8083      	strh	r3, [r0, #4]
 8081f82:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8081f86:	80c3      	strh	r3, [r0, #6]
 8081f88:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8081f8c:	8103      	strh	r3, [r0, #8]
 8081f8e:	2305      	movs	r3, #5
 8081f90:	8143      	strh	r3, [r0, #10]
 8081f92:	230b      	movs	r3, #11
 8081f94:	8183      	strh	r3, [r0, #12]
 8081f96:	2201      	movs	r2, #1
 8081f98:	2300      	movs	r3, #0
 8081f9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8081f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8081fa0:	2200      	movs	r2, #0
 8081fa2:	611d      	str	r5, [r3, #16]
 8081fa4:	615a      	str	r2, [r3, #20]
 8081fa6:	bd38      	pop	{r3, r4, r5, pc}
 8081fa8:	20000074 	.word	0x20000074

08081fac <strcat>:
 8081fac:	4602      	mov	r2, r0
 8081fae:	b510      	push	{r4, lr}
 8081fb0:	4613      	mov	r3, r2
 8081fb2:	781c      	ldrb	r4, [r3, #0]
 8081fb4:	3201      	adds	r2, #1
 8081fb6:	2c00      	cmp	r4, #0
 8081fb8:	d1fa      	bne.n	8081fb0 <strcat+0x4>
 8081fba:	3b01      	subs	r3, #1
 8081fbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8081fc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8081fc4:	2a00      	cmp	r2, #0
 8081fc6:	d1f9      	bne.n	8081fbc <strcat+0x10>
 8081fc8:	bd10      	pop	{r4, pc}

08081fca <strcmp>:
 8081fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8081fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8081fd2:	2a01      	cmp	r2, #1
 8081fd4:	bf28      	it	cs
 8081fd6:	429a      	cmpcs	r2, r3
 8081fd8:	d0f7      	beq.n	8081fca <strcmp>
 8081fda:	1ad0      	subs	r0, r2, r3
 8081fdc:	4770      	bx	lr

08081fde <strcpy>:
 8081fde:	4603      	mov	r3, r0
 8081fe0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8081fe4:	f803 2b01 	strb.w	r2, [r3], #1
 8081fe8:	2a00      	cmp	r2, #0
 8081fea:	d1f9      	bne.n	8081fe0 <strcpy+0x2>
 8081fec:	4770      	bx	lr
	...

08081ff0 <strdup>:
 8081ff0:	4b02      	ldr	r3, [pc, #8]	; (8081ffc <strdup+0xc>)
 8081ff2:	4601      	mov	r1, r0
 8081ff4:	6818      	ldr	r0, [r3, #0]
 8081ff6:	f000 b803 	b.w	8082000 <_strdup_r>
 8081ffa:	bf00      	nop
 8081ffc:	20000074 	.word	0x20000074

08082000 <_strdup_r>:
 8082000:	b570      	push	{r4, r5, r6, lr}
 8082002:	4606      	mov	r6, r0
 8082004:	4608      	mov	r0, r1
 8082006:	460c      	mov	r4, r1
 8082008:	f000 f80d 	bl	8082026 <strlen>
 808200c:	1c45      	adds	r5, r0, #1
 808200e:	4629      	mov	r1, r5
 8082010:	4630      	mov	r0, r6
 8082012:	f7fe fbbb 	bl	808078c <_malloc_r>
 8082016:	4606      	mov	r6, r0
 8082018:	b118      	cbz	r0, 8082022 <_strdup_r+0x22>
 808201a:	462a      	mov	r2, r5
 808201c:	4621      	mov	r1, r4
 808201e:	f7ff ff89 	bl	8081f34 <memcpy>
 8082022:	4630      	mov	r0, r6
 8082024:	bd70      	pop	{r4, r5, r6, pc}

08082026 <strlen>:
 8082026:	4603      	mov	r3, r0
 8082028:	f813 2b01 	ldrb.w	r2, [r3], #1
 808202c:	2a00      	cmp	r2, #0
 808202e:	d1fb      	bne.n	8082028 <strlen+0x2>
 8082030:	1a18      	subs	r0, r3, r0
 8082032:	3801      	subs	r0, #1
 8082034:	4770      	bx	lr

08082036 <strncmp>:
 8082036:	b530      	push	{r4, r5, lr}
 8082038:	b182      	cbz	r2, 808205c <strncmp+0x26>
 808203a:	1e45      	subs	r5, r0, #1
 808203c:	3901      	subs	r1, #1
 808203e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8082042:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8082046:	42a3      	cmp	r3, r4
 8082048:	d106      	bne.n	8082058 <strncmp+0x22>
 808204a:	43ec      	mvns	r4, r5
 808204c:	4414      	add	r4, r2
 808204e:	42e0      	cmn	r0, r4
 8082050:	d001      	beq.n	8082056 <strncmp+0x20>
 8082052:	2b00      	cmp	r3, #0
 8082054:	d1f3      	bne.n	808203e <strncmp+0x8>
 8082056:	461c      	mov	r4, r3
 8082058:	1b18      	subs	r0, r3, r4
 808205a:	bd30      	pop	{r4, r5, pc}
 808205c:	4610      	mov	r0, r2
 808205e:	bd30      	pop	{r4, r5, pc}

08082060 <_strtoul_r>:
 8082060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8082064:	460e      	mov	r6, r1
 8082066:	4680      	mov	r8, r0
 8082068:	483b      	ldr	r0, [pc, #236]	; (8082158 <_strtoul_r+0xf8>)
 808206a:	f8d0 9000 	ldr.w	r9, [r0]
 808206e:	4635      	mov	r5, r6
 8082070:	f815 4b01 	ldrb.w	r4, [r5], #1
 8082074:	eb09 0004 	add.w	r0, r9, r4
 8082078:	7840      	ldrb	r0, [r0, #1]
 808207a:	f000 0008 	and.w	r0, r0, #8
 808207e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8082082:	b108      	cbz	r0, 8082088 <_strtoul_r+0x28>
 8082084:	462e      	mov	r6, r5
 8082086:	e7f2      	b.n	808206e <_strtoul_r+0xe>
 8082088:	2c2d      	cmp	r4, #45	; 0x2d
 808208a:	d103      	bne.n	8082094 <_strtoul_r+0x34>
 808208c:	1cb5      	adds	r5, r6, #2
 808208e:	7874      	ldrb	r4, [r6, #1]
 8082090:	2701      	movs	r7, #1
 8082092:	e003      	b.n	808209c <_strtoul_r+0x3c>
 8082094:	2c2b      	cmp	r4, #43	; 0x2b
 8082096:	bf04      	itt	eq
 8082098:	7874      	ldrbeq	r4, [r6, #1]
 808209a:	1cb5      	addeq	r5, r6, #2
 808209c:	b113      	cbz	r3, 80820a4 <_strtoul_r+0x44>
 808209e:	2b10      	cmp	r3, #16
 80820a0:	d10a      	bne.n	80820b8 <_strtoul_r+0x58>
 80820a2:	e053      	b.n	808214c <_strtoul_r+0xec>
 80820a4:	2c30      	cmp	r4, #48	; 0x30
 80820a6:	d14f      	bne.n	8082148 <_strtoul_r+0xe8>
 80820a8:	7828      	ldrb	r0, [r5, #0]
 80820aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80820ae:	2858      	cmp	r0, #88	; 0x58
 80820b0:	d145      	bne.n	808213e <_strtoul_r+0xde>
 80820b2:	786c      	ldrb	r4, [r5, #1]
 80820b4:	2310      	movs	r3, #16
 80820b6:	3502      	adds	r5, #2
 80820b8:	f04f 3cff 	mov.w	ip, #4294967295
 80820bc:	fbbc fcf3 	udiv	ip, ip, r3
 80820c0:	fb03 fa0c 	mul.w	sl, r3, ip
 80820c4:	2600      	movs	r6, #0
 80820c6:	ea6f 0a0a 	mvn.w	sl, sl
 80820ca:	4630      	mov	r0, r6
 80820cc:	eb09 0e04 	add.w	lr, r9, r4
 80820d0:	f89e e001 	ldrb.w	lr, [lr, #1]
 80820d4:	f01e 0f04 	tst.w	lr, #4
 80820d8:	d001      	beq.n	80820de <_strtoul_r+0x7e>
 80820da:	3c30      	subs	r4, #48	; 0x30
 80820dc:	e00b      	b.n	80820f6 <_strtoul_r+0x96>
 80820de:	f01e 0e03 	ands.w	lr, lr, #3
 80820e2:	d01a      	beq.n	808211a <_strtoul_r+0xba>
 80820e4:	f1be 0f01 	cmp.w	lr, #1
 80820e8:	bf0c      	ite	eq
 80820ea:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80820ee:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80820f2:	ebce 0404 	rsb	r4, lr, r4
 80820f6:	42a3      	cmp	r3, r4
 80820f8:	dd0f      	ble.n	808211a <_strtoul_r+0xba>
 80820fa:	2e00      	cmp	r6, #0
 80820fc:	db08      	blt.n	8082110 <_strtoul_r+0xb0>
 80820fe:	4560      	cmp	r0, ip
 8082100:	d806      	bhi.n	8082110 <_strtoul_r+0xb0>
 8082102:	d101      	bne.n	8082108 <_strtoul_r+0xa8>
 8082104:	4554      	cmp	r4, sl
 8082106:	dc03      	bgt.n	8082110 <_strtoul_r+0xb0>
 8082108:	fb03 4000 	mla	r0, r3, r0, r4
 808210c:	2601      	movs	r6, #1
 808210e:	e001      	b.n	8082114 <_strtoul_r+0xb4>
 8082110:	f04f 36ff 	mov.w	r6, #4294967295
 8082114:	f815 4b01 	ldrb.w	r4, [r5], #1
 8082118:	e7d8      	b.n	80820cc <_strtoul_r+0x6c>
 808211a:	2e00      	cmp	r6, #0
 808211c:	da07      	bge.n	808212e <_strtoul_r+0xce>
 808211e:	2322      	movs	r3, #34	; 0x22
 8082120:	f8c8 3000 	str.w	r3, [r8]
 8082124:	f04f 30ff 	mov.w	r0, #4294967295
 8082128:	b92a      	cbnz	r2, 8082136 <_strtoul_r+0xd6>
 808212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808212e:	b107      	cbz	r7, 8082132 <_strtoul_r+0xd2>
 8082130:	4240      	negs	r0, r0
 8082132:	b172      	cbz	r2, 8082152 <_strtoul_r+0xf2>
 8082134:	b106      	cbz	r6, 8082138 <_strtoul_r+0xd8>
 8082136:	1e69      	subs	r1, r5, #1
 8082138:	6011      	str	r1, [r2, #0]
 808213a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808213e:	2430      	movs	r4, #48	; 0x30
 8082140:	2b00      	cmp	r3, #0
 8082142:	d1b9      	bne.n	80820b8 <_strtoul_r+0x58>
 8082144:	2308      	movs	r3, #8
 8082146:	e7b7      	b.n	80820b8 <_strtoul_r+0x58>
 8082148:	230a      	movs	r3, #10
 808214a:	e7b5      	b.n	80820b8 <_strtoul_r+0x58>
 808214c:	2c30      	cmp	r4, #48	; 0x30
 808214e:	d0ab      	beq.n	80820a8 <_strtoul_r+0x48>
 8082150:	e7b2      	b.n	80820b8 <_strtoul_r+0x58>
 8082152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8082156:	bf00      	nop
 8082158:	20000010 	.word	0x20000010

0808215c <strtoul>:
 808215c:	4613      	mov	r3, r2
 808215e:	460a      	mov	r2, r1
 8082160:	4601      	mov	r1, r0
 8082162:	4802      	ldr	r0, [pc, #8]	; (808216c <strtoul+0x10>)
 8082164:	6800      	ldr	r0, [r0, #0]
 8082166:	f7ff bf7b 	b.w	8082060 <_strtoul_r>
 808216a:	bf00      	nop
 808216c:	20000074 	.word	0x20000074

08082170 <__tzcalc_limits>:
 8082170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082174:	4604      	mov	r4, r0
 8082176:	f000 fa6f 	bl	8082658 <__gettzinfo>
 808217a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808217e:	429c      	cmp	r4, r3
 8082180:	f340 8096 	ble.w	80822b0 <__tzcalc_limits+0x140>
 8082184:	f240 156d 	movw	r5, #365	; 0x16d
 8082188:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808218c:	18e3      	adds	r3, r4, r3
 808218e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8082192:	109b      	asrs	r3, r3, #2
 8082194:	fb05 3502 	mla	r5, r5, r2, r3
 8082198:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808219c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80821a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80821a4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80821a8:	442b      	add	r3, r5
 80821aa:	18a5      	adds	r5, r4, r2
 80821ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80821b0:	fb94 f7f2 	sdiv	r7, r4, r2
 80821b4:	fb95 f5f2 	sdiv	r5, r5, r2
 80821b8:	fb02 4717 	mls	r7, r2, r7, r4
 80821bc:	441d      	add	r5, r3
 80821be:	2364      	movs	r3, #100	; 0x64
 80821c0:	fb94 f6f3 	sdiv	r6, r4, r3
 80821c4:	fab7 fe87 	clz	lr, r7
 80821c8:	4601      	mov	r1, r0
 80821ca:	fb03 4616 	mls	r6, r3, r6, r4
 80821ce:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80821d2:	9301      	str	r3, [sp, #4]
 80821d4:	f004 0303 	and.w	r3, r4, #3
 80821d8:	6044      	str	r4, [r0, #4]
 80821da:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80821de:	9300      	str	r3, [sp, #0]
 80821e0:	f04f 0c07 	mov.w	ip, #7
 80821e4:	7a0b      	ldrb	r3, [r1, #8]
 80821e6:	2b4a      	cmp	r3, #74	; 0x4a
 80821e8:	d10e      	bne.n	8082208 <__tzcalc_limits+0x98>
 80821ea:	694b      	ldr	r3, [r1, #20]
 80821ec:	9a00      	ldr	r2, [sp, #0]
 80821ee:	18ec      	adds	r4, r5, r3
 80821f0:	b902      	cbnz	r2, 80821f4 <__tzcalc_limits+0x84>
 80821f2:	b906      	cbnz	r6, 80821f6 <__tzcalc_limits+0x86>
 80821f4:	b927      	cbnz	r7, 8082200 <__tzcalc_limits+0x90>
 80821f6:	2b3b      	cmp	r3, #59	; 0x3b
 80821f8:	bfd4      	ite	le
 80821fa:	2300      	movle	r3, #0
 80821fc:	2301      	movgt	r3, #1
 80821fe:	e000      	b.n	8082202 <__tzcalc_limits+0x92>
 8082200:	2300      	movs	r3, #0
 8082202:	4423      	add	r3, r4
 8082204:	3b01      	subs	r3, #1
 8082206:	e03f      	b.n	8082288 <__tzcalc_limits+0x118>
 8082208:	2b44      	cmp	r3, #68	; 0x44
 808220a:	d102      	bne.n	8082212 <__tzcalc_limits+0xa2>
 808220c:	694b      	ldr	r3, [r1, #20]
 808220e:	442b      	add	r3, r5
 8082210:	e03a      	b.n	8082288 <__tzcalc_limits+0x118>
 8082212:	9b00      	ldr	r3, [sp, #0]
 8082214:	b92b      	cbnz	r3, 8082222 <__tzcalc_limits+0xb2>
 8082216:	2e00      	cmp	r6, #0
 8082218:	bf0c      	ite	eq
 808221a:	46f0      	moveq	r8, lr
 808221c:	f04f 0801 	movne.w	r8, #1
 8082220:	e000      	b.n	8082224 <__tzcalc_limits+0xb4>
 8082222:	46f0      	mov	r8, lr
 8082224:	46a9      	mov	r9, r5
 8082226:	4b24      	ldr	r3, [pc, #144]	; (80822b8 <__tzcalc_limits+0x148>)
 8082228:	2230      	movs	r2, #48	; 0x30
 808222a:	fb02 3808 	mla	r8, r2, r8, r3
 808222e:	68cc      	ldr	r4, [r1, #12]
 8082230:	f1a8 0a04 	sub.w	sl, r8, #4
 8082234:	2301      	movs	r3, #1
 8082236:	42a3      	cmp	r3, r4
 8082238:	da04      	bge.n	8082244 <__tzcalc_limits+0xd4>
 808223a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808223e:	3301      	adds	r3, #1
 8082240:	44d9      	add	r9, fp
 8082242:	e7f8      	b.n	8082236 <__tzcalc_limits+0xc6>
 8082244:	f109 0304 	add.w	r3, r9, #4
 8082248:	fb93 fbfc 	sdiv	fp, r3, ip
 808224c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8082250:	ebca 0a03 	rsb	sl, sl, r3
 8082254:	694b      	ldr	r3, [r1, #20]
 8082256:	2c01      	cmp	r4, #1
 8082258:	bfb8      	it	lt
 808225a:	2401      	movlt	r4, #1
 808225c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8082260:	690b      	ldr	r3, [r1, #16]
 8082262:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8082266:	f103 33ff 	add.w	r3, r3, #4294967295
 808226a:	f104 34ff 	add.w	r4, r4, #4294967295
 808226e:	bf48      	it	mi
 8082270:	f10a 0a07 	addmi.w	sl, sl, #7
 8082274:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8082278:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808227c:	4453      	add	r3, sl
 808227e:	42a3      	cmp	r3, r4
 8082280:	db01      	blt.n	8082286 <__tzcalc_limits+0x116>
 8082282:	3b07      	subs	r3, #7
 8082284:	e7fb      	b.n	808227e <__tzcalc_limits+0x10e>
 8082286:	444b      	add	r3, r9
 8082288:	698c      	ldr	r4, [r1, #24]
 808228a:	4a0c      	ldr	r2, [pc, #48]	; (80822bc <__tzcalc_limits+0x14c>)
 808228c:	fb02 4303 	mla	r3, r2, r3, r4
 8082290:	6a0c      	ldr	r4, [r1, #32]
 8082292:	4423      	add	r3, r4
 8082294:	f841 3f1c 	str.w	r3, [r1, #28]!
 8082298:	9b01      	ldr	r3, [sp, #4]
 808229a:	4299      	cmp	r1, r3
 808229c:	d1a2      	bne.n	80821e4 <__tzcalc_limits+0x74>
 808229e:	69c3      	ldr	r3, [r0, #28]
 80822a0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80822a2:	4293      	cmp	r3, r2
 80822a4:	bfac      	ite	ge
 80822a6:	2300      	movge	r3, #0
 80822a8:	2301      	movlt	r3, #1
 80822aa:	6003      	str	r3, [r0, #0]
 80822ac:	2001      	movs	r0, #1
 80822ae:	e000      	b.n	80822b2 <__tzcalc_limits+0x142>
 80822b0:	2000      	movs	r0, #0
 80822b2:	b003      	add	sp, #12
 80822b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80822b8:	08082b78 	.word	0x08082b78
 80822bc:	00015180 	.word	0x00015180

080822c0 <__tz_lock>:
 80822c0:	4770      	bx	lr

080822c2 <__tz_unlock>:
 80822c2:	4770      	bx	lr

080822c4 <_tzset_unlocked>:
 80822c4:	4b01      	ldr	r3, [pc, #4]	; (80822cc <_tzset_unlocked+0x8>)
 80822c6:	6818      	ldr	r0, [r3, #0]
 80822c8:	f000 b802 	b.w	80822d0 <_tzset_unlocked_r>
 80822cc:	20000074 	.word	0x20000074

080822d0 <_tzset_unlocked_r>:
 80822d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80822d4:	b08d      	sub	sp, #52	; 0x34
 80822d6:	4607      	mov	r7, r0
 80822d8:	f000 f9be 	bl	8082658 <__gettzinfo>
 80822dc:	49b0      	ldr	r1, [pc, #704]	; (80825a0 <_tzset_unlocked_r+0x2d0>)
 80822de:	4604      	mov	r4, r0
 80822e0:	4638      	mov	r0, r7
 80822e2:	f000 f9b1 	bl	8082648 <_getenv_r>
 80822e6:	4eaf      	ldr	r6, [pc, #700]	; (80825a4 <_tzset_unlocked_r+0x2d4>)
 80822e8:	4605      	mov	r5, r0
 80822ea:	b960      	cbnz	r0, 8082306 <_tzset_unlocked_r+0x36>
 80822ec:	4bae      	ldr	r3, [pc, #696]	; (80825a8 <_tzset_unlocked_r+0x2d8>)
 80822ee:	4aaf      	ldr	r2, [pc, #700]	; (80825ac <_tzset_unlocked_r+0x2dc>)
 80822f0:	6018      	str	r0, [r3, #0]
 80822f2:	4baf      	ldr	r3, [pc, #700]	; (80825b0 <_tzset_unlocked_r+0x2e0>)
 80822f4:	6018      	str	r0, [r3, #0]
 80822f6:	4baf      	ldr	r3, [pc, #700]	; (80825b4 <_tzset_unlocked_r+0x2e4>)
 80822f8:	6830      	ldr	r0, [r6, #0]
 80822fa:	601a      	str	r2, [r3, #0]
 80822fc:	605a      	str	r2, [r3, #4]
 80822fe:	f7fe fa25 	bl	808074c <free>
 8082302:	6035      	str	r5, [r6, #0]
 8082304:	e148      	b.n	8082598 <_tzset_unlocked_r+0x2c8>
 8082306:	6831      	ldr	r1, [r6, #0]
 8082308:	b979      	cbnz	r1, 808232a <_tzset_unlocked_r+0x5a>
 808230a:	6830      	ldr	r0, [r6, #0]
 808230c:	f7fe fa1e 	bl	808074c <free>
 8082310:	4628      	mov	r0, r5
 8082312:	f7ff fe88 	bl	8082026 <strlen>
 8082316:	1c41      	adds	r1, r0, #1
 8082318:	4638      	mov	r0, r7
 808231a:	f7fe fa37 	bl	808078c <_malloc_r>
 808231e:	6030      	str	r0, [r6, #0]
 8082320:	b148      	cbz	r0, 8082336 <_tzset_unlocked_r+0x66>
 8082322:	4629      	mov	r1, r5
 8082324:	f7ff fe5b 	bl	8081fde <strcpy>
 8082328:	e005      	b.n	8082336 <_tzset_unlocked_r+0x66>
 808232a:	f7ff fe4e 	bl	8081fca <strcmp>
 808232e:	2800      	cmp	r0, #0
 8082330:	f000 8132 	beq.w	8082598 <_tzset_unlocked_r+0x2c8>
 8082334:	e7e9      	b.n	808230a <_tzset_unlocked_r+0x3a>
 8082336:	782b      	ldrb	r3, [r5, #0]
 8082338:	ae0a      	add	r6, sp, #40	; 0x28
 808233a:	2b3a      	cmp	r3, #58	; 0x3a
 808233c:	bf08      	it	eq
 808233e:	3501      	addeq	r5, #1
 8082340:	4633      	mov	r3, r6
 8082342:	4a9d      	ldr	r2, [pc, #628]	; (80825b8 <_tzset_unlocked_r+0x2e8>)
 8082344:	499d      	ldr	r1, [pc, #628]	; (80825bc <_tzset_unlocked_r+0x2ec>)
 8082346:	4628      	mov	r0, r5
 8082348:	f7fe fa10 	bl	808076c <siscanf>
 808234c:	2800      	cmp	r0, #0
 808234e:	f340 8123 	ble.w	8082598 <_tzset_unlocked_r+0x2c8>
 8082352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8082354:	18ef      	adds	r7, r5, r3
 8082356:	5ceb      	ldrb	r3, [r5, r3]
 8082358:	2b2d      	cmp	r3, #45	; 0x2d
 808235a:	d103      	bne.n	8082364 <_tzset_unlocked_r+0x94>
 808235c:	3701      	adds	r7, #1
 808235e:	f04f 35ff 	mov.w	r5, #4294967295
 8082362:	e003      	b.n	808236c <_tzset_unlocked_r+0x9c>
 8082364:	2b2b      	cmp	r3, #43	; 0x2b
 8082366:	bf08      	it	eq
 8082368:	3701      	addeq	r7, #1
 808236a:	2501      	movs	r5, #1
 808236c:	f10d 0a20 	add.w	sl, sp, #32
 8082370:	f10d 0b1e 	add.w	fp, sp, #30
 8082374:	f04f 0800 	mov.w	r8, #0
 8082378:	9603      	str	r6, [sp, #12]
 808237a:	f8cd a008 	str.w	sl, [sp, #8]
 808237e:	9601      	str	r6, [sp, #4]
 8082380:	f8cd b000 	str.w	fp, [sp]
 8082384:	4633      	mov	r3, r6
 8082386:	aa07      	add	r2, sp, #28
 8082388:	498d      	ldr	r1, [pc, #564]	; (80825c0 <_tzset_unlocked_r+0x2f0>)
 808238a:	4638      	mov	r0, r7
 808238c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8082390:	f8ad 8020 	strh.w	r8, [sp, #32]
 8082394:	f7fe f9ea 	bl	808076c <siscanf>
 8082398:	4540      	cmp	r0, r8
 808239a:	f340 80fd 	ble.w	8082598 <_tzset_unlocked_r+0x2c8>
 808239e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80823a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80823a6:	213c      	movs	r1, #60	; 0x3c
 80823a8:	fb01 3302 	mla	r3, r1, r2, r3
 80823ac:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80823b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80823b4:	fb01 3302 	mla	r3, r1, r2, r3
 80823b8:	435d      	muls	r5, r3
 80823ba:	4b7f      	ldr	r3, [pc, #508]	; (80825b8 <_tzset_unlocked_r+0x2e8>)
 80823bc:	6225      	str	r5, [r4, #32]
 80823be:	4d7d      	ldr	r5, [pc, #500]	; (80825b4 <_tzset_unlocked_r+0x2e4>)
 80823c0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80825cc <_tzset_unlocked_r+0x2fc>
 80823c4:	602b      	str	r3, [r5, #0]
 80823c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80823c8:	464a      	mov	r2, r9
 80823ca:	441f      	add	r7, r3
 80823cc:	497b      	ldr	r1, [pc, #492]	; (80825bc <_tzset_unlocked_r+0x2ec>)
 80823ce:	4633      	mov	r3, r6
 80823d0:	4638      	mov	r0, r7
 80823d2:	f7fe f9cb 	bl	808076c <siscanf>
 80823d6:	4540      	cmp	r0, r8
 80823d8:	dc08      	bgt.n	80823ec <_tzset_unlocked_r+0x11c>
 80823da:	682b      	ldr	r3, [r5, #0]
 80823dc:	6a22      	ldr	r2, [r4, #32]
 80823de:	606b      	str	r3, [r5, #4]
 80823e0:	4b71      	ldr	r3, [pc, #452]	; (80825a8 <_tzset_unlocked_r+0x2d8>)
 80823e2:	601a      	str	r2, [r3, #0]
 80823e4:	4b72      	ldr	r3, [pc, #456]	; (80825b0 <_tzset_unlocked_r+0x2e0>)
 80823e6:	f8c3 8000 	str.w	r8, [r3]
 80823ea:	e0d5      	b.n	8082598 <_tzset_unlocked_r+0x2c8>
 80823ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80823ee:	f8c5 9004 	str.w	r9, [r5, #4]
 80823f2:	18fd      	adds	r5, r7, r3
 80823f4:	5cfb      	ldrb	r3, [r7, r3]
 80823f6:	2b2d      	cmp	r3, #45	; 0x2d
 80823f8:	d103      	bne.n	8082402 <_tzset_unlocked_r+0x132>
 80823fa:	3501      	adds	r5, #1
 80823fc:	f04f 37ff 	mov.w	r7, #4294967295
 8082400:	e003      	b.n	808240a <_tzset_unlocked_r+0x13a>
 8082402:	2b2b      	cmp	r3, #43	; 0x2b
 8082404:	bf08      	it	eq
 8082406:	3501      	addeq	r5, #1
 8082408:	2701      	movs	r7, #1
 808240a:	2300      	movs	r3, #0
 808240c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8082410:	f8ad 301e 	strh.w	r3, [sp, #30]
 8082414:	f8ad 3020 	strh.w	r3, [sp, #32]
 8082418:	930a      	str	r3, [sp, #40]	; 0x28
 808241a:	9603      	str	r6, [sp, #12]
 808241c:	f8cd a008 	str.w	sl, [sp, #8]
 8082420:	9601      	str	r6, [sp, #4]
 8082422:	f8cd b000 	str.w	fp, [sp]
 8082426:	4633      	mov	r3, r6
 8082428:	aa07      	add	r2, sp, #28
 808242a:	4965      	ldr	r1, [pc, #404]	; (80825c0 <_tzset_unlocked_r+0x2f0>)
 808242c:	4628      	mov	r0, r5
 808242e:	f7fe f99d 	bl	808076c <siscanf>
 8082432:	2800      	cmp	r0, #0
 8082434:	dc04      	bgt.n	8082440 <_tzset_unlocked_r+0x170>
 8082436:	6a23      	ldr	r3, [r4, #32]
 8082438:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808243c:	63e3      	str	r3, [r4, #60]	; 0x3c
 808243e:	e00e      	b.n	808245e <_tzset_unlocked_r+0x18e>
 8082440:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8082444:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8082448:	213c      	movs	r1, #60	; 0x3c
 808244a:	fb01 3302 	mla	r3, r1, r2, r3
 808244e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8082452:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8082456:	fb01 3302 	mla	r3, r1, r2, r3
 808245a:	435f      	muls	r7, r3
 808245c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808245e:	4627      	mov	r7, r4
 8082460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8082462:	f04f 0900 	mov.w	r9, #0
 8082466:	441d      	add	r5, r3
 8082468:	782b      	ldrb	r3, [r5, #0]
 808246a:	2b2c      	cmp	r3, #44	; 0x2c
 808246c:	bf08      	it	eq
 808246e:	3501      	addeq	r5, #1
 8082470:	f895 8000 	ldrb.w	r8, [r5]
 8082474:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8082478:	d126      	bne.n	80824c8 <_tzset_unlocked_r+0x1f8>
 808247a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808247e:	9302      	str	r3, [sp, #8]
 8082480:	ab09      	add	r3, sp, #36	; 0x24
 8082482:	9300      	str	r3, [sp, #0]
 8082484:	9603      	str	r6, [sp, #12]
 8082486:	9601      	str	r6, [sp, #4]
 8082488:	4633      	mov	r3, r6
 808248a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808248e:	494d      	ldr	r1, [pc, #308]	; (80825c4 <_tzset_unlocked_r+0x2f4>)
 8082490:	4628      	mov	r0, r5
 8082492:	f7fe f96b 	bl	808076c <siscanf>
 8082496:	2803      	cmp	r0, #3
 8082498:	d17e      	bne.n	8082598 <_tzset_unlocked_r+0x2c8>
 808249a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808249e:	1e4b      	subs	r3, r1, #1
 80824a0:	2b0b      	cmp	r3, #11
 80824a2:	d879      	bhi.n	8082598 <_tzset_unlocked_r+0x2c8>
 80824a4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80824a8:	1e53      	subs	r3, r2, #1
 80824aa:	2b04      	cmp	r3, #4
 80824ac:	d874      	bhi.n	8082598 <_tzset_unlocked_r+0x2c8>
 80824ae:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80824b2:	2b06      	cmp	r3, #6
 80824b4:	d870      	bhi.n	8082598 <_tzset_unlocked_r+0x2c8>
 80824b6:	f887 8008 	strb.w	r8, [r7, #8]
 80824ba:	60f9      	str	r1, [r7, #12]
 80824bc:	613a      	str	r2, [r7, #16]
 80824be:	617b      	str	r3, [r7, #20]
 80824c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80824c2:	eb05 0803 	add.w	r8, r5, r3
 80824c6:	e02a      	b.n	808251e <_tzset_unlocked_r+0x24e>
 80824c8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80824cc:	bf06      	itte	eq
 80824ce:	4643      	moveq	r3, r8
 80824d0:	3501      	addeq	r5, #1
 80824d2:	2344      	movne	r3, #68	; 0x44
 80824d4:	220a      	movs	r2, #10
 80824d6:	a90b      	add	r1, sp, #44	; 0x2c
 80824d8:	4628      	mov	r0, r5
 80824da:	9305      	str	r3, [sp, #20]
 80824dc:	f7ff fe3e 	bl	808215c <strtoul>
 80824e0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80824e4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80824e8:	4545      	cmp	r5, r8
 80824ea:	9b05      	ldr	r3, [sp, #20]
 80824ec:	d114      	bne.n	8082518 <_tzset_unlocked_r+0x248>
 80824ee:	234d      	movs	r3, #77	; 0x4d
 80824f0:	f1b9 0f00 	cmp.w	r9, #0
 80824f4:	d107      	bne.n	8082506 <_tzset_unlocked_r+0x236>
 80824f6:	7223      	strb	r3, [r4, #8]
 80824f8:	2303      	movs	r3, #3
 80824fa:	60e3      	str	r3, [r4, #12]
 80824fc:	2302      	movs	r3, #2
 80824fe:	6123      	str	r3, [r4, #16]
 8082500:	f8c4 9014 	str.w	r9, [r4, #20]
 8082504:	e00b      	b.n	808251e <_tzset_unlocked_r+0x24e>
 8082506:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808250a:	230b      	movs	r3, #11
 808250c:	62a3      	str	r3, [r4, #40]	; 0x28
 808250e:	2301      	movs	r3, #1
 8082510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8082512:	2300      	movs	r3, #0
 8082514:	6323      	str	r3, [r4, #48]	; 0x30
 8082516:	e002      	b.n	808251e <_tzset_unlocked_r+0x24e>
 8082518:	b280      	uxth	r0, r0
 808251a:	723b      	strb	r3, [r7, #8]
 808251c:	6178      	str	r0, [r7, #20]
 808251e:	2302      	movs	r3, #2
 8082520:	f8ad 301c 	strh.w	r3, [sp, #28]
 8082524:	2300      	movs	r3, #0
 8082526:	f8ad 301e 	strh.w	r3, [sp, #30]
 808252a:	f8ad 3020 	strh.w	r3, [sp, #32]
 808252e:	930a      	str	r3, [sp, #40]	; 0x28
 8082530:	f898 3000 	ldrb.w	r3, [r8]
 8082534:	2b2f      	cmp	r3, #47	; 0x2f
 8082536:	d10b      	bne.n	8082550 <_tzset_unlocked_r+0x280>
 8082538:	9603      	str	r6, [sp, #12]
 808253a:	f8cd a008 	str.w	sl, [sp, #8]
 808253e:	9601      	str	r6, [sp, #4]
 8082540:	f8cd b000 	str.w	fp, [sp]
 8082544:	4633      	mov	r3, r6
 8082546:	aa07      	add	r2, sp, #28
 8082548:	491f      	ldr	r1, [pc, #124]	; (80825c8 <_tzset_unlocked_r+0x2f8>)
 808254a:	4640      	mov	r0, r8
 808254c:	f7fe f90e 	bl	808076c <siscanf>
 8082550:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8082554:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8082558:	213c      	movs	r1, #60	; 0x3c
 808255a:	fb01 3302 	mla	r3, r1, r2, r3
 808255e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8082562:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8082566:	fb01 3302 	mla	r3, r1, r2, r3
 808256a:	61bb      	str	r3, [r7, #24]
 808256c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808256e:	f109 0901 	add.w	r9, r9, #1
 8082572:	f1b9 0f02 	cmp.w	r9, #2
 8082576:	4445      	add	r5, r8
 8082578:	f107 071c 	add.w	r7, r7, #28
 808257c:	f47f af74 	bne.w	8082468 <_tzset_unlocked_r+0x198>
 8082580:	6860      	ldr	r0, [r4, #4]
 8082582:	f7ff fdf5 	bl	8082170 <__tzcalc_limits>
 8082586:	6a22      	ldr	r2, [r4, #32]
 8082588:	4b07      	ldr	r3, [pc, #28]	; (80825a8 <_tzset_unlocked_r+0x2d8>)
 808258a:	601a      	str	r2, [r3, #0]
 808258c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808258e:	1a9b      	subs	r3, r3, r2
 8082590:	4a07      	ldr	r2, [pc, #28]	; (80825b0 <_tzset_unlocked_r+0x2e0>)
 8082592:	bf18      	it	ne
 8082594:	2301      	movne	r3, #1
 8082596:	6013      	str	r3, [r2, #0]
 8082598:	b00d      	add	sp, #52	; 0x34
 808259a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808259e:	bf00      	nop
 80825a0:	08082bd8 	.word	0x08082bd8
 80825a4:	20000768 	.word	0x20000768
 80825a8:	20000770 	.word	0x20000770
 80825ac:	08082bdb 	.word	0x08082bdb
 80825b0:	2000076c 	.word	0x2000076c
 80825b4:	20000078 	.word	0x20000078
 80825b8:	2000075b 	.word	0x2000075b
 80825bc:	08082bdf 	.word	0x08082bdf
 80825c0:	08082c02 	.word	0x08082c02
 80825c4:	08082bee 	.word	0x08082bee
 80825c8:	08082c01 	.word	0x08082c01
 80825cc:	20000750 	.word	0x20000750

080825d0 <_findenv_r>:
 80825d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80825d4:	4607      	mov	r7, r0
 80825d6:	468b      	mov	fp, r1
 80825d8:	4690      	mov	r8, r2
 80825da:	f000 f8d7 	bl	808278c <__env_lock>
 80825de:	4b19      	ldr	r3, [pc, #100]	; (8082644 <_findenv_r+0x74>)
 80825e0:	681d      	ldr	r5, [r3, #0]
 80825e2:	469a      	mov	sl, r3
 80825e4:	b13d      	cbz	r5, 80825f6 <_findenv_r+0x26>
 80825e6:	465c      	mov	r4, fp
 80825e8:	4623      	mov	r3, r4
 80825ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80825ee:	b142      	cbz	r2, 8082602 <_findenv_r+0x32>
 80825f0:	2a3d      	cmp	r2, #61	; 0x3d
 80825f2:	461c      	mov	r4, r3
 80825f4:	d1f8      	bne.n	80825e8 <_findenv_r+0x18>
 80825f6:	4638      	mov	r0, r7
 80825f8:	f000 f8c9 	bl	808278e <__env_unlock>
 80825fc:	2000      	movs	r0, #0
 80825fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082602:	ebcb 0404 	rsb	r4, fp, r4
 8082606:	46a9      	mov	r9, r5
 8082608:	f859 0b04 	ldr.w	r0, [r9], #4
 808260c:	2800      	cmp	r0, #0
 808260e:	d0f2      	beq.n	80825f6 <_findenv_r+0x26>
 8082610:	4622      	mov	r2, r4
 8082612:	4659      	mov	r1, fp
 8082614:	f7ff fd0f 	bl	8082036 <strncmp>
 8082618:	b988      	cbnz	r0, 808263e <_findenv_r+0x6e>
 808261a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808261e:	191e      	adds	r6, r3, r4
 8082620:	5d1b      	ldrb	r3, [r3, r4]
 8082622:	2b3d      	cmp	r3, #61	; 0x3d
 8082624:	d10b      	bne.n	808263e <_findenv_r+0x6e>
 8082626:	f8da 3000 	ldr.w	r3, [sl]
 808262a:	4638      	mov	r0, r7
 808262c:	1aed      	subs	r5, r5, r3
 808262e:	10ad      	asrs	r5, r5, #2
 8082630:	f8c8 5000 	str.w	r5, [r8]
 8082634:	f000 f8ab 	bl	808278e <__env_unlock>
 8082638:	1c70      	adds	r0, r6, #1
 808263a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808263e:	464d      	mov	r5, r9
 8082640:	e7e1      	b.n	8082606 <_findenv_r+0x36>
 8082642:	bf00      	nop
 8082644:	200000c0 	.word	0x200000c0

08082648 <_getenv_r>:
 8082648:	b507      	push	{r0, r1, r2, lr}
 808264a:	aa01      	add	r2, sp, #4
 808264c:	f7ff ffc0 	bl	80825d0 <_findenv_r>
 8082650:	b003      	add	sp, #12
 8082652:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08082658 <__gettzinfo>:
 8082658:	4800      	ldr	r0, [pc, #0]	; (808265c <__gettzinfo+0x4>)
 808265a:	4770      	bx	lr
 808265c:	20000080 	.word	0x20000080

08082660 <gmtime_r>:
 8082660:	6802      	ldr	r2, [r0, #0]
 8082662:	4b46      	ldr	r3, [pc, #280]	; (808277c <gmtime_r+0x11c>)
 8082664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082666:	fb92 f4f3 	sdiv	r4, r2, r3
 808266a:	fb03 2214 	mls	r2, r3, r4, r2
 808266e:	2a00      	cmp	r2, #0
 8082670:	bfbc      	itt	lt
 8082672:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8082676:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808267a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808267e:	fb92 f3f0 	sdiv	r3, r2, r0
 8082682:	fb00 2213 	mls	r2, r0, r3, r2
 8082686:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808268a:	608b      	str	r3, [r1, #8]
 808268c:	fb92 f3f0 	sdiv	r3, r2, r0
 8082690:	fb00 2213 	mls	r2, r0, r3, r2
 8082694:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8082698:	bfac      	ite	ge
 808269a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808269e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80826a2:	604b      	str	r3, [r1, #4]
 80826a4:	600a      	str	r2, [r1, #0]
 80826a6:	2307      	movs	r3, #7
 80826a8:	1ce2      	adds	r2, r4, #3
 80826aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80826ae:	4d34      	ldr	r5, [pc, #208]	; (8082780 <gmtime_r+0x120>)
 80826b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80826b4:	fb94 f5f5 	sdiv	r5, r4, r5
 80826b8:	1ad3      	subs	r3, r2, r3
 80826ba:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80826be:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80826c2:	618b      	str	r3, [r1, #24]
 80826c4:	4b2f      	ldr	r3, [pc, #188]	; (8082784 <gmtime_r+0x124>)
 80826c6:	4830      	ldr	r0, [pc, #192]	; (8082788 <gmtime_r+0x128>)
 80826c8:	fb03 4405 	mla	r4, r3, r5, r4
 80826cc:	fbb4 f2f2 	udiv	r2, r4, r2
 80826d0:	fbb4 f3f7 	udiv	r3, r4, r7
 80826d4:	fbb4 f0f0 	udiv	r0, r4, r0
 80826d8:	4422      	add	r2, r4
 80826da:	1ad2      	subs	r2, r2, r3
 80826dc:	f648 6694 	movw	r6, #36500	; 0x8e94
 80826e0:	1a13      	subs	r3, r2, r0
 80826e2:	f240 126d 	movw	r2, #365	; 0x16d
 80826e6:	fbb3 f6f6 	udiv	r6, r3, r6
 80826ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80826ee:	fbb3 f3f7 	udiv	r3, r3, r7
 80826f2:	4434      	add	r4, r6
 80826f4:	1ae3      	subs	r3, r4, r3
 80826f6:	fb02 3310 	mls	r3, r2, r0, r3
 80826fa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80826fe:	2499      	movs	r4, #153	; 0x99
 8082700:	3202      	adds	r2, #2
 8082702:	fbb2 f2f4 	udiv	r2, r2, r4
 8082706:	4354      	muls	r4, r2
 8082708:	1ca6      	adds	r6, r4, #2
 808270a:	2405      	movs	r4, #5
 808270c:	fbb6 f4f4 	udiv	r4, r6, r4
 8082710:	2a0a      	cmp	r2, #10
 8082712:	bf34      	ite	cc
 8082714:	2602      	movcc	r6, #2
 8082716:	f06f 0609 	mvncs.w	r6, #9
 808271a:	4416      	add	r6, r2
 808271c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8082720:	fb02 0505 	mla	r5, r2, r5, r0
 8082724:	1c5f      	adds	r7, r3, #1
 8082726:	2e01      	cmp	r6, #1
 8082728:	bf98      	it	ls
 808272a:	3501      	addls	r5, #1
 808272c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8082730:	eba7 0704 	sub.w	r7, r7, r4
 8082734:	d302      	bcc.n	808273c <gmtime_r+0xdc>
 8082736:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808273a:	e014      	b.n	8082766 <gmtime_r+0x106>
 808273c:	0782      	lsls	r2, r0, #30
 808273e:	d105      	bne.n	808274c <gmtime_r+0xec>
 8082740:	2464      	movs	r4, #100	; 0x64
 8082742:	fbb0 f2f4 	udiv	r2, r0, r4
 8082746:	fb04 0212 	mls	r2, r4, r2, r0
 808274a:	b94a      	cbnz	r2, 8082760 <gmtime_r+0x100>
 808274c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8082750:	fbb0 f4f2 	udiv	r4, r0, r2
 8082754:	fb02 0014 	mls	r0, r2, r4, r0
 8082758:	fab0 f280 	clz	r2, r0
 808275c:	0952      	lsrs	r2, r2, #5
 808275e:	e000      	b.n	8082762 <gmtime_r+0x102>
 8082760:	2201      	movs	r2, #1
 8082762:	333b      	adds	r3, #59	; 0x3b
 8082764:	441a      	add	r2, r3
 8082766:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808276a:	2300      	movs	r3, #0
 808276c:	61ca      	str	r2, [r1, #28]
 808276e:	614d      	str	r5, [r1, #20]
 8082770:	610e      	str	r6, [r1, #16]
 8082772:	60cf      	str	r7, [r1, #12]
 8082774:	620b      	str	r3, [r1, #32]
 8082776:	4608      	mov	r0, r1
 8082778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808277a:	bf00      	nop
 808277c:	00015180 	.word	0x00015180
 8082780:	00023ab1 	.word	0x00023ab1
 8082784:	fffdc54f 	.word	0xfffdc54f
 8082788:	00023ab0 	.word	0x00023ab0

0808278c <__env_lock>:
 808278c:	4770      	bx	lr

0808278e <__env_unlock>:
 808278e:	4770      	bx	lr

08082790 <dynalib_user>:
 8082790:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 80827a0:	0000 0000 002c 6150 6c79 616f 3a64 5300     ....,.Payload:.S
 80827b0:	6174 7574 5273 6961 476e 7561 6567 4d00     tatusRainGauge.M
 80827c0:	7365 6173 6567 7320 6e65 0074 6c53 6565     essage sent.Slee
 80827d0:	0070 0000                                   p...

080827d4 <_ZTV8SPIClass>:
	...
 80827dc:	079d 0808 079f 0808 6162 6475 5300 7265     ........baud.Ser
 80827ec:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80827fc:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 808280c:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 808281c:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 808282c:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 808283c:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 808284c:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 808285c:	0070 3025 3031 2075 5d00 0020 6425 2c00     p.%010u .] .%d.,
 808286c:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 808287c:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 808288c:	0a0d 6600 6c00 006e 6e66 6300 646f 0065     ...f.ln.fn.code.
 808289c:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
 80828ac:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80828bc:	0072 6170 696e 0063 6c61 006c 2b25 3330     r.panic.all.%+03
 80828cc:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80828dc:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80828ec:	656d 0000                                   me..

080828f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80828f8:	0dd5 0808 0ddb 0808 0e1f 0808 0de9 0808     ................
 8082908:	0dd7 0808                                   ....

0808290c <_ZTV9IPAddress>:
	...
 8082914:	136d 0808 135d 0808 135f 0808               m...]..._...

08082920 <_ZTV9USBSerial>:
	...
 8082928:	1401 0808 1451 0808 145f 0808 0999 0808     ....Q..._.......
 8082938:	143d 0808 1403 0808 1419 0808 144b 0808     =...........K...
 8082948:	142f 0808 13fd 0808                         /.......

08082950 <_ZTVN5spark13CellularClassE>:
	...
 8082958:	1643 0808 1639 0808 162f 0808 15a1 0808     C...9.../.......
 8082968:	1623 0808 1617 0808 160b 0808 1603 0808     #...............
 8082978:	15f9 0808 15ef 0808 15ab 0808               ............

08082984 <_ZTV11USARTSerial>:
	...
 808298c:	167d 0808 16cd 0808 16db 0808 0999 0808     }...............
 808299c:	1691 0808 16b3 0808 169f 0808 16c7 0808     ................
 80829ac:	167f 0808 1683 0808                         ........

080829b4 <_ZTV7TwoWire>:
	...
 80829bc:	17a9 0808 17f3 0808 17cb 0808 17ab 0808     ................
 80829cc:	17d3 0808 17db 0808 17e3 0808 17eb 0808     ................

080829dc <_ZTVN5spark12NetworkClassE>:
	...
 80829e4:	182d 0808 1837 0808 1841 0808 184b 0808     -...7...A...K...
 80829f4:	1855 0808 1861 0808 186d 0808 1879 0808     U...a...m...y...
 8082a04:	1881 0808 188b 0808 1895 0808               ............

08082a10 <_ctype_>:
 8082a10:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8082a20:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8082a30:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8082a40:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8082a50:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8082a60:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8082a70:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8082a80:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8082a90:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08082b14 <__sf_fake_stdin>:
	...

08082b34 <__sf_fake_stdout>:
	...

08082b54 <__sf_fake_stderr>:
	...
 8082b74:	0043 0000                                   C...

08082b78 <__month_lengths>:
 8082b78:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8082b88:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8082b98:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8082ba8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8082bb8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8082bc8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8082bd8:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8082be8:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8082bf8:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8082c08:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08082c14 <link_const_variable_data_end>:
 8082c14:	08080331 	.word	0x08080331
 8082c18:	0808080d 	.word	0x0808080d
 8082c1c:	08080b1d 	.word	0x08080b1d
 8082c20:	08080c11 	.word	0x08080c11
 8082c24:	08080c69 	.word	0x08080c69
 8082c28:	0808164d 	.word	0x0808164d
 8082c2c:	080818e1 	.word	0x080818e1
 8082c30:	080819b9 	.word	0x080819b9
 8082c34:	08081a15 	.word	0x08081a15
 8082c38:	08081a99 	.word	0x08081a99
 8082c3c:	08081b1d 	.word	0x08081b1d
 8082c40:	08081be1 	.word	0x08081be1
 8082c44:	08081ca5 	.word	0x08081ca5

08082c48 <link_constructors_end>:
	...
