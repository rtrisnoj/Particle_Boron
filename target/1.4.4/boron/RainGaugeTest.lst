
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Rain_Gauge/src/RainGaugeTest/target/1.4.4/boron/RainGaugeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016f70  2**0
                  CONTENTS
  4 .data         000000c4  2003e2d8  000d6e80  0000e2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000454  2003e39c  2003e39c  0001e39c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6f44  000d6f44  00016f44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6f6c  000d6f6c  00016f6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d7bcf  00000000  00000000  00016f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011085  00000000  00000000  000eeb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ebbd  00000000  00000000  000ffbc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002530  00000000  00000000  0011e781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000046f8  00000000  00000000  00120cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034b4f  00000000  00000000  001253a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000295de  00000000  00000000  00159ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010182d  00000000  00000000  001834d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d1c8  00000000  00000000  00284d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f861 	bl	d60f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f866 	bl	d610a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2d8 	.word	0x2003e2d8
   d4048:	000d6e80 	.word	0x000d6e80
   d404c:	2003e39c 	.word	0x2003e39c
   d4050:	2003e39c 	.word	0x2003e39c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fee3 	bl	d4e24 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6e78 	.word	0x000d6e78
   d4080:	000d6e3c 	.word	0x000d6e3c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f89b 	bl	d41c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 be95 	b.w	d4dc0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bb81 	b.w	d479c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bb87 	b.w	d47ac <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bb85 	b.w	d47ac <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:

SYSTEM_MODE (MANUAL)


void setup()
{
   d40b4:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   d40b6:	f001 fa67 	bl	d5588 <_Z16_fetch_usbserialv>
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
   d40ba:	4d10      	ldr	r5, [pc, #64]	; (d40fc <setup+0x48>)
  pinMode(led2, OUTPUT);
   d40bc:	4c10      	ldr	r4, [pc, #64]	; (d4100 <setup+0x4c>)
SYSTEM_MODE (MANUAL)


void setup()
{
  Serial.begin(9600);
   d40be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40c2:	f001 fa55 	bl	d5570 <_ZN9USBSerial5beginEl>
  pinMode(buttonPin, INPUT_PULLUP);
   d40c6:	2102      	movs	r1, #2
   d40c8:	2004      	movs	r0, #4
   d40ca:	f001 fd3b 	bl	d5b44 <pinMode>
  pinMode(led1, OUTPUT);
   d40ce:	8828      	ldrh	r0, [r5, #0]
   d40d0:	2101      	movs	r1, #1
   d40d2:	f001 fd37 	bl	d5b44 <pinMode>
  pinMode(led2, OUTPUT);
   d40d6:	2101      	movs	r1, #1
   d40d8:	8820      	ldrh	r0, [r4, #0]
   d40da:	f001 fd33 	bl	d5b44 <pinMode>
  prevMinute = Time.minute();
   d40de:	f000 fe0d 	bl	d4cfc <_ZN9TimeClass6minuteEv>
   d40e2:	4b08      	ldr	r3, [pc, #32]	; (d4104 <setup+0x50>)
  digitalWrite(led1, LOW);
   d40e4:	2100      	movs	r1, #0
{
  Serial.begin(9600);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  prevMinute = Time.minute();
   d40e6:	6018      	str	r0, [r3, #0]
  digitalWrite(led1, LOW);
   d40e8:	8828      	ldrh	r0, [r5, #0]
   d40ea:	f001 fd3c 	bl	d5b66 <digitalWrite>
  digitalWrite(led2, LOW);
   d40ee:	8820      	ldrh	r0, [r4, #0]
   d40f0:	2100      	movs	r1, #0
}
   d40f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  prevMinute = Time.minute();
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
   d40f6:	f001 bd36 	b.w	d5b66 <digitalWrite>
   d40fa:	bf00      	nop
   d40fc:	2003e3c4 	.word	0x2003e3c4
   d4100:	2003e2d8 	.word	0x2003e2d8
   d4104:	2003e3bc 	.word	0x2003e3bc

000d4108 <_Z14initConnectionv>:
    //Serial.println("Sleep");
    //publish("warning", "Call setEnabled() to enable deep sleep");

}

void initConnection(){
   d4108:	b510      	push	{r4, lr}
   d410a:	4c14      	ldr	r4, [pc, #80]	; (d415c <_Z14initConnectionv+0x54>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d410c:	2300      	movs	r3, #0
   d410e:	461a      	mov	r2, r3
   d4110:	4619      	mov	r1, r3
   d4112:	6860      	ldr	r0, [r4, #4]
   d4114:	f000 fada 	bl	d46cc <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4118:	2300      	movs	r3, #0
   d411a:	461a      	mov	r2, r3
   d411c:	4619      	mov	r1, r3
   d411e:	6860      	ldr	r0, [r4, #4]
   d4120:	f000 fab4 	bl	d468c <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4124:	2200      	movs	r2, #0
   d4126:	4611      	mov	r1, r2
   d4128:	6860      	ldr	r0, [r4, #4]
   d412a:	f000 fac7 	bl	d46bc <network_ready>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d412e:	b168      	cbz	r0, d414c <_Z14initConnectionv+0x44>
   d4130:	4b0a      	ldr	r3, [pc, #40]	; (d415c <_Z14initConnectionv+0x54>)
   d4132:	2200      	movs	r2, #0
   d4134:	4611      	mov	r1, r2
   d4136:	6858      	ldr	r0, [r3, #4]
   d4138:	f000 fac0 	bl	d46bc <network_ready>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d413c:	f000 fafe 	bl	d473c <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4140:	f000 fb0c 	bl	d475c <spark_cloud_flag_connected>
   d4144:	b928      	cbnz	r0, d4152 <_Z14initConnectionv+0x4a>
            spark_process();
   d4146:	f000 faf1 	bl	d472c <spark_process>
   d414a:	e7f9      	b.n	d4140 <_Z14initConnectionv+0x38>
   d414c:	f000 faee 	bl	d472c <spark_process>
   d4150:	e7e8      	b.n	d4124 <_Z14initConnectionv+0x1c>
  Cellular.on();
  Cellular.connect();
  waitUntil(Cellular.ready);
  Particle.connect();
  waitUntil(Particle.connected);
}
   d4152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4156:	f000 bb01 	b.w	d475c <spark_cloud_flag_connected>
   d415a:	bf00      	nop
   d415c:	2003e4c0 	.word	0x2003e4c0

000d4160 <_Z20disconnectConnectionv>:

void disconnectConnection(){
   d4160:	b510      	push	{r4, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4162:	f000 faf3 	bl	d474c <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4166:	f000 faf9 	bl	d475c <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d416a:	4604      	mov	r4, r0
   d416c:	b950      	cbnz	r0, d4184 <_Z20disconnectConnectionv+0x24>
   d416e:	f000 faf5 	bl	d475c <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4172:	4806      	ldr	r0, [pc, #24]	; (d418c <_Z20disconnectConnectionv+0x2c>)
   d4174:	4623      	mov	r3, r4
   d4176:	4622      	mov	r2, r4
   d4178:	4621      	mov	r1, r4
   d417a:	6840      	ldr	r0, [r0, #4]
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d417c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4180:	f000 baac 	b.w	d46dc <network_off>
            spark_process();
   d4184:	f000 fad2 	bl	d472c <spark_process>
   d4188:	e7ed      	b.n	d4166 <_Z20disconnectConnectionv+0x6>
   d418a:	bf00      	nop
   d418c:	2003e4c0 	.word	0x2003e4c0

000d4190 <_Z22calculateRainGaugeDatav>:
void calculateRainGaugeData(){
   d4190:	b510      	push	{r4, lr}
   if (buttonState == HIGH)
   d4192:	4b0a      	ldr	r3, [pc, #40]	; (d41bc <_Z22calculateRainGaugeDatav+0x2c>)
   d4194:	681b      	ldr	r3, [r3, #0]
   d4196:	2b01      	cmp	r3, #1
   d4198:	d00f      	beq.n	d41ba <_Z22calculateRainGaugeDatav+0x2a>
        //Serial.println("HIGH");
        }
        else
        {
        // turn LED off:
        i++;
   d419a:	4c09      	ldr	r4, [pc, #36]	; (d41c0 <_Z22calculateRainGaugeDatav+0x30>)
   d419c:	6823      	ldr	r3, [r4, #0]
        delay(400);
   d419e:	f44f 70c8 	mov.w	r0, #400	; 0x190
        //Serial.println("HIGH");
        }
        else
        {
        // turn LED off:
        i++;
   d41a2:	3301      	adds	r3, #1
   d41a4:	6023      	str	r3, [r4, #0]
        delay(400);
   d41a6:	f000 fdbd 	bl	d4d24 <delay>
        Serial.println(i);
   d41aa:	f001 f9ed 	bl	d5588 <_Z16_fetch_usbserialv>
   d41ae:	6821      	ldr	r1, [r4, #0]
   d41b0:	220a      	movs	r2, #10

        //Serial.println(err);
        }
   d41b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        else
        {
        // turn LED off:
        i++;
        delay(400);
        Serial.println(i);
   d41b6:	f000 bd27 	b.w	d4c08 <_ZN5Print7printlnEii>
   d41ba:	bd10      	pop	{r4, pc}
   d41bc:	2003e3c0 	.word	0x2003e3c0
   d41c0:	2003e3b0 	.word	0x2003e3b0

000d41c4 <loop>:
  prevMinute = Time.minute();
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);
}
void loop()
{
   d41c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d41c8:	b086      	sub	sp, #24
    //System.wakeup();
    currentMinute = Time.minute();
   d41ca:	f000 fd97 	bl	d4cfc <_ZN9TimeClass6minuteEv>
   d41ce:	4e47      	ldr	r6, [pc, #284]	; (d42ec <loop+0x128>)
    // read the state of the pushbutton value:
    buttonState = digitalRead(buttonPin);

    if (currentMinute - prevMinute >= logInterval)
   d41d0:	4c47      	ldr	r4, [pc, #284]	; (d42f0 <loop+0x12c>)
  digitalWrite(led2, LOW);
}
void loop()
{
    //System.wakeup();
    currentMinute = Time.minute();
   d41d2:	6030      	str	r0, [r6, #0]
    // read the state of the pushbutton value:
    buttonState = digitalRead(buttonPin);
   d41d4:	2004      	movs	r0, #4
   d41d6:	f001 fcdf 	bl	d5b98 <digitalRead>
   d41da:	4b46      	ldr	r3, [pc, #280]	; (d42f4 <loop+0x130>)

    if (currentMinute - prevMinute >= logInterval)
   d41dc:	6822      	ldr	r2, [r4, #0]
   d41de:	4d46      	ldr	r5, [pc, #280]	; (d42f8 <loop+0x134>)
void loop()
{
    //System.wakeup();
    currentMinute = Time.minute();
    // read the state of the pushbutton value:
    buttonState = digitalRead(buttonPin);
   d41e0:	6018      	str	r0, [r3, #0]

    if (currentMinute - prevMinute >= logInterval)
   d41e2:	6833      	ldr	r3, [r6, #0]
   d41e4:	1a9b      	subs	r3, r3, r2
   d41e6:	682a      	ldr	r2, [r5, #0]
   d41e8:	4293      	cmp	r3, r2
   d41ea:	46b0      	mov	r8, r6
   d41ec:	462f      	mov	r7, r5
   d41ee:	d35e      	bcc.n	d42ae <loop+0xea>
    {
      
       //log the data
      if (temp == 0){
   d41f0:	4d42      	ldr	r5, [pc, #264]	; (d42fc <loop+0x138>)
   d41f2:	4e43      	ldr	r6, [pc, #268]	; (d4300 <loop+0x13c>)
   d41f4:	682b      	ldr	r3, [r5, #0]
   d41f6:	b11b      	cbz	r3, d4200 <loop+0x3c>
        strcat(payload,String(i));
      }
      else {
        strcat(payload,",");
   d41f8:	4942      	ldr	r1, [pc, #264]	; (d4304 <loop+0x140>)
   d41fa:	4843      	ldr	r0, [pc, #268]	; (d4308 <loop+0x144>)
   d41fc:	f001 ffb6 	bl	d616c <strcat>
        strcat(payload,String(i));
   d4200:	220a      	movs	r2, #10
   d4202:	6831      	ldr	r1, [r6, #0]
   d4204:	a802      	add	r0, sp, #8
   d4206:	f000 fc22 	bl	d4a4e <_ZN6StringC1Eih>
   d420a:	9902      	ldr	r1, [sp, #8]
   d420c:	483e      	ldr	r0, [pc, #248]	; (d4308 <loop+0x144>)
   d420e:	f001 ffad 	bl	d616c <strcat>
   d4212:	a802      	add	r0, sp, #8
   d4214:	f000 fbc3 	bl	d499e <_ZN6StringD1Ev>
      }
      Serial.print("Payload:");
   d4218:	f001 f9b6 	bl	d5588 <_Z16_fetch_usbserialv>
   d421c:	493b      	ldr	r1, [pc, #236]	; (d430c <loop+0x148>)
   d421e:	f000 fc7b 	bl	d4b18 <_ZN5Print5printEPKc>
      Serial.println(payload);
   d4222:	f001 f9b1 	bl	d5588 <_Z16_fetch_usbserialv>
   d4226:	4938      	ldr	r1, [pc, #224]	; (d4308 <loop+0x144>)
   d4228:	f000 fc89 	bl	d4b3e <_ZN5Print7printlnEPKc>
      Serial.println(prevMinute);
   d422c:	f001 f9ac 	bl	d5588 <_Z16_fetch_usbserialv>
   d4230:	220a      	movs	r2, #10
   d4232:	6821      	ldr	r1, [r4, #0]
   d4234:	f000 fcbc 	bl	d4bb0 <_ZN5Print7printlnEmi>
     
      temp++;
      i = 0;
   d4238:	2200      	movs	r2, #0
      }
      Serial.print("Payload:");
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
   d423a:	682b      	ldr	r3, [r5, #0]
      i = 0;
   d423c:	6032      	str	r2, [r6, #0]
      prevMinute = currentMinute;
   d423e:	f8d8 2000 	ldr.w	r2, [r8]
   d4242:	6022      	str	r2, [r4, #0]

      if (temp >= sendInterval/logInterval)
   d4244:	4a32      	ldr	r2, [pc, #200]	; (d4310 <loop+0x14c>)
   d4246:	6839      	ldr	r1, [r7, #0]
   d4248:	6812      	ldr	r2, [r2, #0]
   d424a:	fbb2 f2f1 	udiv	r2, r2, r1
      }
      Serial.print("Payload:");
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
   d424e:	3301      	adds	r3, #1
      i = 0;
      prevMinute = currentMinute;

      if (temp >= sendInterval/logInterval)
   d4250:	4293      	cmp	r3, r2
      }
      Serial.print("Payload:");
      Serial.println(payload);
      Serial.println(prevMinute);
     
      temp++;
   d4252:	602b      	str	r3, [r5, #0]
      i = 0;
      prevMinute = currentMinute;

      if (temp >= sendInterval/logInterval)
   d4254:	d347      	bcc.n	d42e6 <loop+0x122>
      {
        //initiliaze connection, Cellular and Particle cloud handshake
        initConnection();
   d4256:	f7ff ff57 	bl	d4108 <_Z14initConnectionv>
   d425a:	4b2e      	ldr	r3, [pc, #184]	; (d4314 <loop+0x150>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d425c:	4a2a      	ldr	r2, [pc, #168]	; (d4308 <loop+0x144>)
   d425e:	781b      	ldrb	r3, [r3, #0]
   d4260:	f88d 3000 	strb.w	r3, [sp]
   d4264:	492c      	ldr	r1, [pc, #176]	; (d4318 <loop+0x154>)
   d4266:	233c      	movs	r3, #60	; 0x3c
   d4268:	a802      	add	r0, sp, #8
   d426a:	f000 ff37 	bl	d50dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d426e:	9c03      	ldr	r4, [sp, #12]
   d4270:	b17c      	cbz	r4, d4292 <loop+0xce>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4272:	6863      	ldr	r3, [r4, #4]
   d4274:	3b01      	subs	r3, #1
   d4276:	6063      	str	r3, [r4, #4]
   d4278:	b95b      	cbnz	r3, d4292 <loop+0xce>
        {
          _M_dispose();
   d427a:	6823      	ldr	r3, [r4, #0]
   d427c:	4620      	mov	r0, r4
   d427e:	689b      	ldr	r3, [r3, #8]
   d4280:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4282:	68a3      	ldr	r3, [r4, #8]
   d4284:	3b01      	subs	r3, #1
   d4286:	60a3      	str	r3, [r4, #8]
   d4288:	b91b      	cbnz	r3, d4292 <loop+0xce>
            _M_destroy();
   d428a:	6823      	ldr	r3, [r4, #0]
   d428c:	4620      	mov	r0, r4
   d428e:	68db      	ldr	r3, [r3, #12]
   d4290:	4798      	blx	r3

        //send Message
        Particle.publish("StatusRainGauge",payload ,PRIVATE);
        //Particle.publish("Temp", "{ 'id':'1C93F9','data':'ffffffffffffffff30','time':'1570476362','device':'1C93F9','lqi':'Good'}", PRIVATE);
        Serial.println("Message sent");
   d4292:	f001 f979 	bl	d5588 <_Z16_fetch_usbserialv>
   d4296:	4921      	ldr	r1, [pc, #132]	; (d431c <loop+0x158>)
   d4298:	f000 fc51 	bl	d4b3e <_ZN5Print7printlnEPKc>
        strcpy(payload,"");
   d429c:	4920      	ldr	r1, [pc, #128]	; (d4320 <loop+0x15c>)
   d429e:	481a      	ldr	r0, [pc, #104]	; (d4308 <loop+0x144>)
   d42a0:	f001 ff7d 	bl	d619e <strcpy>
        temp = 0;
        counter = 0;
   d42a4:	4a1f      	ldr	r2, [pc, #124]	; (d4324 <loop+0x160>)
        //send Message
        Particle.publish("StatusRainGauge",payload ,PRIVATE);
        //Particle.publish("Temp", "{ 'id':'1C93F9','data':'ffffffffffffffff30','time':'1570476362','device':'1C93F9','lqi':'Good'}", PRIVATE);
        Serial.println("Message sent");
        strcpy(payload,"");
        temp = 0;
   d42a6:	2300      	movs	r3, #0
   d42a8:	602b      	str	r3, [r5, #0]
        counter = 0;
   d42aa:	6013      	str	r3, [r2, #0]
   d42ac:	e01b      	b.n	d42e6 <loop+0x122>
      }
     
    }
    else
    {
        if (!counter)
   d42ae:	4c1d      	ldr	r4, [pc, #116]	; (d4324 <loop+0x160>)
   d42b0:	6826      	ldr	r6, [r4, #0]
   d42b2:	b9b6      	cbnz	r6, d42e2 <loop+0x11e>
        {
        //Turn of everything
        disconnectConnection();
   d42b4:	f7ff ff54 	bl	d4160 <_Z20disconnectConnectionv>
        //Go to sleep
        Serial.println("Sleep");
   d42b8:	f001 f966 	bl	d5588 <_Z16_fetch_usbserialv>
   d42bc:	491a      	ldr	r1, [pc, #104]	; (d4328 <loop+0x164>)
   d42be:	f000 fc3e 	bl	d4b3e <_ZN5Print7printlnEPKc>
        Serial.println("");
   d42c2:	f001 f961 	bl	d5588 <_Z16_fetch_usbserialv>
   d42c6:	4916      	ldr	r1, [pc, #88]	; (d4320 <loop+0x15c>)
   d42c8:	f000 fc39 	bl	d4b3e <_ZN5Print7printlnEPKc>
        System.sleep(logInterval * 60);
   d42cc:	682a      	ldr	r2, [r5, #0]
    static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF);
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, long seconds=0) {
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
   d42ce:	4b17      	ldr	r3, [pc, #92]	; (d432c <loop+0x168>)
   d42d0:	213c      	movs	r1, #60	; 0x3c
   d42d2:	681b      	ldr	r3, [r3, #0]
   d42d4:	434a      	muls	r2, r1
   d42d6:	a802      	add	r0, sp, #8
   d42d8:	4631      	mov	r1, r6
   d42da:	f000 faed 	bl	d48b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
        counter = 1;
   d42de:	2301      	movs	r3, #1
   d42e0:	6023      	str	r3, [r4, #0]
        }

        //Get the rain gauge data 
        calculateRainGaugeData();
   d42e2:	f7ff ff55 	bl	d4190 <_Z22calculateRainGaugeDatav>
    }

    //Serial.println("Sleep");
    //publish("warning", "Call setEnabled() to enable deep sleep");

}
   d42e6:	b006      	add	sp, #24
   d42e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d42ec:	2003e3a0 	.word	0x2003e3a0
   d42f0:	2003e3bc 	.word	0x2003e3bc
   d42f4:	2003e3c0 	.word	0x2003e3c0
   d42f8:	2003e2dc 	.word	0x2003e2dc
   d42fc:	2003e3a4 	.word	0x2003e3a4
   d4300:	2003e3b0 	.word	0x2003e3b0
   d4304:	000d6968 	.word	0x000d6968
   d4308:	2003e3c8 	.word	0x2003e3c8
   d430c:	000d696a 	.word	0x000d696a
   d4310:	2003e2e0 	.word	0x2003e2e0
   d4314:	2003e3ae 	.word	0x2003e3ae
   d4318:	000d6973 	.word	0x000d6973
   d431c:	000d6983 	.word	0x000d6983
   d4320:	000d6a83 	.word	0x000d6a83
   d4324:	2003e3b4 	.word	0x2003e3b4
   d4328:	000d6990 	.word	0x000d6990
   d432c:	2003e3b8 	.word	0x2003e3b8

000d4330 <_GLOBAL__sub_I_led1>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4330:	4b09      	ldr	r3, [pc, #36]	; (d4358 <_GLOBAL__sub_I_led1+0x28>)
        delay(400);
        Serial.println(i);

        //Serial.println(err);
        }
   d4332:	b510      	push	{r4, lr}
   d4334:	2400      	movs	r4, #0
   d4336:	601c      	str	r4, [r3, #0]
   d4338:	4b08      	ldr	r3, [pc, #32]	; (d435c <_GLOBAL__sub_I_led1+0x2c>)
   d433a:	2201      	movs	r2, #1
   d433c:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d433e:	f000 f821 	bl	d4384 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4342:	4b07      	ldr	r3, [pc, #28]	; (d4360 <_GLOBAL__sub_I_led1+0x30>)
   d4344:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4348:	701c      	strb	r4, [r3, #0]
   d434a:	805c      	strh	r4, [r3, #2]
   d434c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d434e:	2003      	movs	r0, #3
   d4350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4354:	f000 b956 	b.w	d4604 <set_system_mode>
   d4358:	2003e3b8 	.word	0x2003e3b8
   d435c:	2003e3ae 	.word	0x2003e3ae
   d4360:	2003e3a8 	.word	0x2003e3a8

000d4364 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <netdb_freeaddrinfo+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	689b      	ldr	r3, [r3, #8]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030268 	.word	0x00030268

000d4374 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <netdb_getaddrinfo+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	68db      	ldr	r3, [r3, #12]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030268 	.word	0x00030268

000d4384 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_Pin_Map+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	681b      	ldr	r3, [r3, #0]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003022c 	.word	0x0003022c

000d4394 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_Pin_Mode+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	689b      	ldr	r3, [r3, #8]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003022c 	.word	0x0003022c

000d43a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_Get_Pin_Mode+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	68db      	ldr	r3, [r3, #12]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003022c 	.word	0x0003022c

000d43b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_GPIO_Write+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	691b      	ldr	r3, [r3, #16]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003022c 	.word	0x0003022c

000d43c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_GPIO_Read+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	695b      	ldr	r3, [r3, #20]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003022c 	.word	0x0003022c

000d43d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_SPI_Init+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	69db      	ldr	r3, [r3, #28]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030230 	.word	0x00030230

000d43e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_SPI_Is_Enabled+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6a1b      	ldr	r3, [r3, #32]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030230 	.word	0x00030230

000d43f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_RNG_GetRandomNumber+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	685b      	ldr	r3, [r3, #4]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030218 	.word	0x00030218

000d4404 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	695b      	ldr	r3, [r3, #20]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030218 	.word	0x00030218

000d4414 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_RTC_Get_UnixTime+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	69db      	ldr	r3, [r3, #28]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030218 	.word	0x00030218

000d4424 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_RTC_Time_Is_Valid+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030218 	.word	0x00030218

000d4434 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <os_thread_is_current+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	689b      	ldr	r3, [r3, #8]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030248 	.word	0x00030248

000d4444 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <os_thread_join+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	691b      	ldr	r3, [r3, #16]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	00030248 	.word	0x00030248

000d4454 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <os_thread_cleanup+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	695b      	ldr	r3, [r3, #20]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030248 	.word	0x00030248

000d4464 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <os_mutex_create+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030248 	.word	0x00030248

000d4474 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <os_mutex_recursive_create+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030248 	.word	0x00030248

000d4484 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <inet_inet_ntop+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	695b      	ldr	r3, [r3, #20]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030264 	.word	0x00030264

000d4494 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_USART_Init+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	681b      	ldr	r3, [r3, #0]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003023c 	.word	0x0003023c

000d44a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USART_Write_Data+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	68db      	ldr	r3, [r3, #12]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003023c 	.word	0x0003023c

000d44b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USART_Available_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	691b      	ldr	r3, [r3, #16]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003023c 	.word	0x0003023c

000d44c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USART_Read_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003023c 	.word	0x0003023c

000d44d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_USART_Peek_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	699b      	ldr	r3, [r3, #24]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	0003023c 	.word	0x0003023c

000d44e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_USART_Flush_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	69db      	ldr	r3, [r3, #28]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	0003023c 	.word	0x0003023c

000d44f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_USART_Is_Enabled+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6a1b      	ldr	r3, [r3, #32]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	0003023c 	.word	0x0003023c

000d4504 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_USART_Available_Data_For_Write+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	0003023c 	.word	0x0003023c

000d4514 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_I2C_Write_Data+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6a1b      	ldr	r3, [r3, #32]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030228 	.word	0x00030228

000d4524 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_I2C_Available_Data+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030228 	.word	0x00030228

000d4534 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_I2C_Read_Data+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030228 	.word	0x00030228

000d4544 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_I2C_Peek_Data+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030228 	.word	0x00030228

000d4554 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_I2C_Flush_Data+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030228 	.word	0x00030228

000d4564 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_I2C_Is_Enabled+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030228 	.word	0x00030228

000d4574 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_I2C_Init+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030228 	.word	0x00030228

000d4584 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_USB_USART_Init+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	681b      	ldr	r3, [r3, #0]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003024c 	.word	0x0003024c

000d4594 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_USB_USART_Begin+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	685b      	ldr	r3, [r3, #4]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003024c 	.word	0x0003024c

000d45a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_USB_USART_Available_Data+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	691b      	ldr	r3, [r3, #16]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003024c 	.word	0x0003024c

000d45b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	695b      	ldr	r3, [r3, #20]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003024c 	.word	0x0003024c

000d45c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_USB_USART_Receive_Data+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	699b      	ldr	r3, [r3, #24]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003024c 	.word	0x0003024c

000d45d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_USB_USART_Send_Data+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	69db      	ldr	r3, [r3, #28]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003024c 	.word	0x0003024c

000d45e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_USB_USART_Flush_Data+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6a1b      	ldr	r3, [r3, #32]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003024c 	.word	0x0003024c

000d45f4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <system_mode+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	681b      	ldr	r3, [r3, #0]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030220 	.word	0x00030220

000d4604 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <set_system_mode+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	685b      	ldr	r3, [r3, #4]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030220 	.word	0x00030220

000d4614 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <system_delay_ms+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	695b      	ldr	r3, [r3, #20]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030220 	.word	0x00030220

000d4624 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <system_sleep+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	699b      	ldr	r3, [r3, #24]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030220 	.word	0x00030220

000d4634 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <application_thread_current+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030220 	.word	0x00030220

000d4644 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <application_thread_invoke+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030220 	.word	0x00030220

000d4654 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <system_thread_get_state+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030220 	.word	0x00030220

000d4664 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b03      	ldr	r3, [pc, #12]	; (d4674 <system_ctrl_set_app_request_handler+0x10>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d466e:	9301      	str	r3, [sp, #4]
   d4670:	bd08      	pop	{r3, pc}
   d4672:	0000      	.short	0x0000
   d4674:	00030220 	.word	0x00030220

000d4678 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b03      	ldr	r3, [pc, #12]	; (d4688 <system_ctrl_set_result+0x10>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4682:	9301      	str	r3, [sp, #4]
   d4684:	bd08      	pop	{r3, pc}
   d4686:	0000      	.short	0x0000
   d4688:	00030220 	.word	0x00030220

000d468c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <network_connect+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	685b      	ldr	r3, [r3, #4]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030240 	.word	0x00030240

000d469c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <network_connecting+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	689b      	ldr	r3, [r3, #8]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030240 	.word	0x00030240

000d46ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <network_disconnect+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	68db      	ldr	r3, [r3, #12]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030240 	.word	0x00030240

000d46bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <network_ready+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	691b      	ldr	r3, [r3, #16]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030240 	.word	0x00030240

000d46cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <network_on+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	695b      	ldr	r3, [r3, #20]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030240 	.word	0x00030240

000d46dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <network_off+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	699b      	ldr	r3, [r3, #24]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030240 	.word	0x00030240

000d46ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <network_listen+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	69db      	ldr	r3, [r3, #28]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	00030240 	.word	0x00030240

000d46fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <network_listening+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	6a1b      	ldr	r3, [r3, #32]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	00030240 	.word	0x00030240

000d470c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <network_set_listen_timeout+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030240 	.word	0x00030240

000d471c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <network_get_listen_timeout+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030240 	.word	0x00030240

000d472c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <spark_process+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	689b      	ldr	r3, [r3, #8]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030244 	.word	0x00030244

000d473c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <spark_cloud_flag_connect+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	68db      	ldr	r3, [r3, #12]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030244 	.word	0x00030244

000d474c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <spark_cloud_flag_disconnect+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	691b      	ldr	r3, [r3, #16]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030244 	.word	0x00030244

000d475c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <spark_cloud_flag_connected+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	695b      	ldr	r3, [r3, #20]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030244 	.word	0x00030244

000d476c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <spark_send_event+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6a1b      	ldr	r3, [r3, #32]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030244 	.word	0x00030244

000d477c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <spark_sync_time_pending+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030244 	.word	0x00030244

000d478c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030244 	.word	0x00030244

000d479c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <malloc+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	681b      	ldr	r3, [r3, #0]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	0003021c 	.word	0x0003021c

000d47ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <free+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	685b      	ldr	r3, [r3, #4]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003021c 	.word	0x0003021c

000d47bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <realloc+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	0003021c 	.word	0x0003021c

000d47cc <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <siscanf+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	699b      	ldr	r3, [r3, #24]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	0003021c 	.word	0x0003021c

000d47dc <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <abort+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	0003021c 	.word	0x0003021c

000d47ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <_malloc_r+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	0003021c 	.word	0x0003021c

000d47fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d47fc:	2200      	movs	r2, #0
   d47fe:	4611      	mov	r1, r2
   d4800:	6840      	ldr	r0, [r0, #4]
   d4802:	f7ff bf7b 	b.w	d46fc <network_listening>

000d4806 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4806:	2200      	movs	r2, #0
   d4808:	4611      	mov	r1, r2
   d480a:	6840      	ldr	r0, [r0, #4]
   d480c:	f7ff bf86 	b.w	d471c <network_get_listen_timeout>

000d4810 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4810:	2200      	movs	r2, #0
   d4812:	6840      	ldr	r0, [r0, #4]
   d4814:	f7ff bf7a 	b.w	d470c <network_set_listen_timeout>

000d4818 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4818:	2200      	movs	r2, #0
   d481a:	f081 0101 	eor.w	r1, r1, #1
   d481e:	6840      	ldr	r0, [r0, #4]
   d4820:	f7ff bf64 	b.w	d46ec <network_listen>

000d4824 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4824:	2300      	movs	r3, #0
   d4826:	461a      	mov	r2, r3
   d4828:	4619      	mov	r1, r3
   d482a:	6840      	ldr	r0, [r0, #4]
   d482c:	f7ff bf56 	b.w	d46dc <network_off>

000d4830 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4830:	2300      	movs	r3, #0
   d4832:	461a      	mov	r2, r3
   d4834:	4619      	mov	r1, r3
   d4836:	6840      	ldr	r0, [r0, #4]
   d4838:	f7ff bf48 	b.w	d46cc <network_on>

000d483c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d483c:	2200      	movs	r2, #0
   d483e:	4611      	mov	r1, r2
   d4840:	6840      	ldr	r0, [r0, #4]
   d4842:	f7ff bf3b 	b.w	d46bc <network_ready>

000d4846 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4846:	2200      	movs	r2, #0
   d4848:	4611      	mov	r1, r2
   d484a:	6840      	ldr	r0, [r0, #4]
   d484c:	f7ff bf26 	b.w	d469c <network_connecting>

000d4850 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4850:	2200      	movs	r2, #0
   d4852:	2102      	movs	r1, #2
   d4854:	6840      	ldr	r0, [r0, #4]
   d4856:	f7ff bf29 	b.w	d46ac <network_disconnect>

000d485a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d485a:	2300      	movs	r3, #0
   d485c:	461a      	mov	r2, r3
   d485e:	6840      	ldr	r0, [r0, #4]
   d4860:	f7ff bf14 	b.w	d468c <network_connect>

000d4864 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4864:	4b02      	ldr	r3, [pc, #8]	; (d4870 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4866:	2203      	movs	r2, #3
   d4868:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d486a:	4a02      	ldr	r2, [pc, #8]	; (d4874 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d486c:	601a      	str	r2, [r3, #0]
   d486e:	4770      	bx	lr
   d4870:	2003e448 	.word	0x2003e448
   d4874:	000d69a0 	.word	0x000d69a0

000d4878 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4878:	4770      	bx	lr

000d487a <_ZN8SPIClassD0Ev>:
   d487a:	b510      	push	{r4, lr}
   d487c:	2110      	movs	r1, #16
   d487e:	4604      	mov	r4, r0
   d4880:	f001 f9e5 	bl	d5c4e <_ZdlPvj>
   d4884:	4620      	mov	r0, r4
   d4886:	bd10      	pop	{r4, pc}

000d4888 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4888:	b570      	push	{r4, r5, r6, lr}
   d488a:	4b08      	ldr	r3, [pc, #32]	; (d48ac <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d488c:	6003      	str	r3, [r0, #0]
   d488e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4890:	2500      	movs	r5, #0
   d4892:	460e      	mov	r6, r1
   d4894:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4898:	f7ff fde4 	bl	d4464 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d489c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d489e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d48a0:	f7ff fd98 	bl	d43d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d48a4:	60a5      	str	r5, [r4, #8]
}
   d48a6:	4620      	mov	r0, r4
   d48a8:	bd70      	pop	{r4, r5, r6, pc}
   d48aa:	bf00      	nop
   d48ac:	000d69d4 	.word	0x000d69d4

000d48b0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d48b0:	7900      	ldrb	r0, [r0, #4]
   d48b2:	f7ff bd97 	b.w	d43e4 <HAL_SPI_Is_Enabled>
	...

000d48b8 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d48b8:	b510      	push	{r4, lr}
   d48ba:	4604      	mov	r4, r0
   d48bc:	4608      	mov	r0, r1
   d48be:	4611      	mov	r1, r2
   d48c0:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d48c2:	2300      	movs	r3, #0
   d48c4:	f7ff feae 	bl	d4624 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d48c8:	4b06      	ldr	r3, [pc, #24]	; (d48e4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d48ca:	2200      	movs	r2, #0
   d48cc:	701a      	strb	r2, [r3, #0]
   d48ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d48d2:	8058      	strh	r0, [r3, #2]
   d48d4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d48d6:	681a      	ldr	r2, [r3, #0]
   d48d8:	889b      	ldrh	r3, [r3, #4]
   d48da:	6022      	str	r2, [r4, #0]
   d48dc:	80a3      	strh	r3, [r4, #4]
}
   d48de:	4620      	mov	r0, r4
   d48e0:	bd10      	pop	{r4, pc}
   d48e2:	bf00      	nop
   d48e4:	2003e450 	.word	0x2003e450

000d48e8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d48e8:	4b04      	ldr	r3, [pc, #16]	; (d48fc <_GLOBAL__sub_I_System+0x14>)
   d48ea:	2000      	movs	r0, #0
   d48ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d48f0:	7018      	strb	r0, [r3, #0]
   d48f2:	8058      	strh	r0, [r3, #2]
   d48f4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d48f6:	f7ff be85 	b.w	d4604 <set_system_mode>
   d48fa:	bf00      	nop
   d48fc:	2003e450 	.word	0x2003e450

000d4900 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4900:	b510      	push	{r4, lr}
   d4902:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4904:	f001 fc6f 	bl	d61e6 <strlen>
   d4908:	3801      	subs	r0, #1
   d490a:	1823      	adds	r3, r4, r0
   d490c:	4620      	mov	r0, r4
	while(i<j){
   d490e:	4298      	cmp	r0, r3
   d4910:	d206      	bcs.n	d4920 <_Z11str_reversePc+0x20>
		c = *i;
   d4912:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4914:	7819      	ldrb	r1, [r3, #0]
   d4916:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d491a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d491e:	e7f6      	b.n	d490e <_Z11str_reversePc+0xe>
   d4920:	bd10      	pop	{r4, pc}

000d4922 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4922:	b570      	push	{r4, r5, r6, lr}
   d4924:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4926:	1e91      	subs	r1, r2, #2
   d4928:	2922      	cmp	r1, #34	; 0x22
   d492a:	d820      	bhi.n	d496e <ultoa+0x4c>
   d492c:	4625      	mov	r5, r4
   d492e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4930:	b910      	cbnz	r0, d4938 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4932:	4423      	add	r3, r4
            *ptr++ = '0';
   d4934:	2230      	movs	r2, #48	; 0x30
   d4936:	e00e      	b.n	d4956 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4938:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d493c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4940:	b2c1      	uxtb	r1, r0
   d4942:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4946:	2809      	cmp	r0, #9
                *ptr += '0';
   d4948:	bf94      	ite	ls
   d494a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d494c:	3157      	addhi	r1, #87	; 0x57
   d494e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4952:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4954:	e7eb      	b.n	d492e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4956:	4299      	cmp	r1, r3
   d4958:	d202      	bcs.n	d4960 <ultoa+0x3e>
            *ptr++ = '0';
   d495a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d495e:	e7fa      	b.n	d4956 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4960:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4962:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4964:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4966:	f7ff ffcb 	bl	d4900 <_Z11str_reversePc>
	return buffer;
   d496a:	4620      	mov	r0, r4
   d496c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d496e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4970:	bd70      	pop	{r4, r5, r6, pc}

000d4972 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4972:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4974:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4976:	460c      	mov	r4, r1
   d4978:	4615      	mov	r5, r2
	if(a<0){
   d497a:	da0b      	bge.n	d4994 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d497c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4980:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4984:	bf14      	ite	ne
   d4986:	4258      	negne	r0, r3
   d4988:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d498a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d498c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d498e:	462a      	mov	r2, r5
   d4990:	4419      	add	r1, r3
   d4992:	e000      	b.n	d4996 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4994:	2301      	movs	r3, #1
   d4996:	f7ff ffc4 	bl	d4922 <ultoa>
	}
	return buffer;
}
   d499a:	4620      	mov	r0, r4
   d499c:	bd38      	pop	{r3, r4, r5, pc}

000d499e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d499e:	b510      	push	{r4, lr}
   d49a0:	4604      	mov	r4, r0
{
	free(buffer);
   d49a2:	6800      	ldr	r0, [r0, #0]
   d49a4:	f7ff ff02 	bl	d47ac <free>
}
   d49a8:	4620      	mov	r0, r4
   d49aa:	bd10      	pop	{r4, pc}

000d49ac <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49ac:	b510      	push	{r4, lr}
   d49ae:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d49b0:	6800      	ldr	r0, [r0, #0]
   d49b2:	b108      	cbz	r0, d49b8 <_ZN6String10invalidateEv+0xc>
   d49b4:	f7ff fefa 	bl	d47ac <free>
	buffer = NULL;
   d49b8:	2300      	movs	r3, #0
   d49ba:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d49bc:	60a3      	str	r3, [r4, #8]
   d49be:	6063      	str	r3, [r4, #4]
   d49c0:	bd10      	pop	{r4, pc}

000d49c2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d49c2:	b538      	push	{r3, r4, r5, lr}
   d49c4:	4604      	mov	r4, r0
   d49c6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d49c8:	6800      	ldr	r0, [r0, #0]
   d49ca:	3101      	adds	r1, #1
   d49cc:	f7ff fef6 	bl	d47bc <realloc>
	if (newbuffer) {
   d49d0:	b110      	cbz	r0, d49d8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d49d2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d49d6:	2001      	movs	r0, #1
	}
	return 0;
}
   d49d8:	bd38      	pop	{r3, r4, r5, pc}

000d49da <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d49da:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d49dc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d49de:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d49e0:	b113      	cbz	r3, d49e8 <_ZN6String7reserveEj+0xe>
   d49e2:	6843      	ldr	r3, [r0, #4]
   d49e4:	428b      	cmp	r3, r1
   d49e6:	d207      	bcs.n	d49f8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d49e8:	4620      	mov	r0, r4
   d49ea:	f7ff ffea 	bl	d49c2 <_ZN6String12changeBufferEj>
   d49ee:	b120      	cbz	r0, d49fa <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d49f0:	68a3      	ldr	r3, [r4, #8]
   d49f2:	b90b      	cbnz	r3, d49f8 <_ZN6String7reserveEj+0x1e>
   d49f4:	6822      	ldr	r2, [r4, #0]
   d49f6:	7013      	strb	r3, [r2, #0]
   d49f8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d49fa:	bd10      	pop	{r4, pc}

000d49fc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d49fc:	b570      	push	{r4, r5, r6, lr}
   d49fe:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4a00:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a02:	4604      	mov	r4, r0
   d4a04:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4a06:	f7ff ffe8 	bl	d49da <_ZN6String7reserveEj>
   d4a0a:	b918      	cbnz	r0, d4a14 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4a0c:	4620      	mov	r0, r4
   d4a0e:	f7ff ffcd 	bl	d49ac <_ZN6String10invalidateEv>
		return *this;
   d4a12:	e009      	b.n	d4a28 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4a14:	462a      	mov	r2, r5
   d4a16:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4a18:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a1a:	6820      	ldr	r0, [r4, #0]
   d4a1c:	f001 fb6a 	bl	d60f4 <memcpy>
	buffer[len] = 0;
   d4a20:	6822      	ldr	r2, [r4, #0]
   d4a22:	68a3      	ldr	r3, [r4, #8]
   d4a24:	2100      	movs	r1, #0
   d4a26:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4a28:	4620      	mov	r0, r4
   d4a2a:	bd70      	pop	{r4, r5, r6, pc}

000d4a2c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4a2c:	b538      	push	{r3, r4, r5, lr}
   d4a2e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4a30:	460c      	mov	r4, r1
   d4a32:	b141      	cbz	r1, d4a46 <_ZN6StringaSEPKc+0x1a>
   d4a34:	4608      	mov	r0, r1
   d4a36:	f001 fbd6 	bl	d61e6 <strlen>
   d4a3a:	4621      	mov	r1, r4
   d4a3c:	4602      	mov	r2, r0
   d4a3e:	4628      	mov	r0, r5
   d4a40:	f7ff ffdc 	bl	d49fc <_ZN6String4copyEPKcj>
   d4a44:	e001      	b.n	d4a4a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4a46:	f7ff ffb1 	bl	d49ac <_ZN6String10invalidateEv>

	return *this;
}
   d4a4a:	4628      	mov	r0, r5
   d4a4c:	bd38      	pop	{r3, r4, r5, pc}

000d4a4e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4a4e:	b510      	push	{r4, lr}
   d4a50:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a52:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4a54:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4a56:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d4a58:	6063      	str	r3, [r4, #4]
	len = 0;
   d4a5a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4a5c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4a5e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d4a60:	a901      	add	r1, sp, #4
   d4a62:	f7ff ff86 	bl	d4972 <itoa>
	*this = buf;
   d4a66:	a901      	add	r1, sp, #4
   d4a68:	4620      	mov	r0, r4
   d4a6a:	f7ff ffdf 	bl	d4a2c <_ZN6StringaSEPKc>
}
   d4a6e:	4620      	mov	r0, r4
   d4a70:	b00a      	add	sp, #40	; 0x28
   d4a72:	bd10      	pop	{r4, pc}

000d4a74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a74:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a76:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4a78:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4a7a:	689b      	ldr	r3, [r3, #8]
   d4a7c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a7e:	68a3      	ldr	r3, [r4, #8]
   d4a80:	3b01      	subs	r3, #1
   d4a82:	60a3      	str	r3, [r4, #8]
   d4a84:	b92b      	cbnz	r3, d4a92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110+0x1e>
            _M_destroy();
   d4a86:	6823      	ldr	r3, [r4, #0]
   d4a88:	4620      	mov	r0, r4
   d4a8a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4a90:	4718      	bx	r3
   d4a92:	bd10      	pop	{r4, pc}

000d4a94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4a94:	680b      	ldr	r3, [r1, #0]
   d4a96:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4a98:	b113      	cbz	r3, d4aa0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4a9a:	685a      	ldr	r2, [r3, #4]
   d4a9c:	3201      	adds	r2, #1
   d4a9e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4aa0:	4770      	bx	lr

000d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4aa2:	b510      	push	{r4, lr}
   d4aa4:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4aa6:	6800      	ldr	r0, [r0, #0]
   d4aa8:	b128      	cbz	r0, d4ab6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4aaa:	6843      	ldr	r3, [r0, #4]
   d4aac:	3b01      	subs	r3, #1
   d4aae:	6043      	str	r3, [r0, #4]
   d4ab0:	b90b      	cbnz	r3, d4ab6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4ab2:	f7ff ffdf 	bl	d4a74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.110>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4ab6:	4620      	mov	r0, r4
   d4ab8:	bd10      	pop	{r4, pc}
	...

000d4abc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4abc:	4802      	ldr	r0, [pc, #8]	; (d4ac8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4abe:	2300      	movs	r3, #0
   d4ac0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4ac2:	f7ff bcd7 	b.w	d4474 <os_mutex_recursive_create>
   d4ac6:	bf00      	nop
   d4ac8:	2003e458 	.word	0x2003e458

000d4acc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ace:	4606      	mov	r6, r0
   d4ad0:	460d      	mov	r5, r1
   d4ad2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4ad4:	2400      	movs	r4, #0
  while (size--) {
   d4ad6:	42bd      	cmp	r5, r7
   d4ad8:	d00c      	beq.n	d4af4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4ada:	6833      	ldr	r3, [r6, #0]
   d4adc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ae0:	689b      	ldr	r3, [r3, #8]
   d4ae2:	4630      	mov	r0, r6
   d4ae4:	4798      	blx	r3
     if (chunk>=0)
   d4ae6:	2800      	cmp	r0, #0
   d4ae8:	db01      	blt.n	d4aee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4aea:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4aec:	e7f3      	b.n	d4ad6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4aee:	2c00      	cmp	r4, #0
   d4af0:	bf08      	it	eq
   d4af2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4af4:	4620      	mov	r0, r4
   d4af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4af8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4af8:	b570      	push	{r4, r5, r6, lr}
   d4afa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4afc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4afe:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4b00:	b149      	cbz	r1, d4b16 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4b02:	f001 fb70 	bl	d61e6 <strlen>
   d4b06:	682b      	ldr	r3, [r5, #0]
   d4b08:	4602      	mov	r2, r0
   d4b0a:	4621      	mov	r1, r4
   d4b0c:	4628      	mov	r0, r5
   d4b0e:	68db      	ldr	r3, [r3, #12]
    }
   d4b10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b14:	4718      	bx	r3
    }
   d4b16:	bd70      	pop	{r4, r5, r6, pc}

000d4b18 <_ZN5Print5printEPKc>:
   d4b18:	b508      	push	{r3, lr}
   d4b1a:	f7ff ffed 	bl	d4af8 <_ZN5Print5writeEPKc>
   d4b1e:	bd08      	pop	{r3, pc}

000d4b20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4b20:	6803      	ldr	r3, [r0, #0]
   d4b22:	689b      	ldr	r3, [r3, #8]
   d4b24:	4718      	bx	r3

000d4b26 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4b26:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4b28:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4b2a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4b2c:	f7ff fff8 	bl	d4b20 <_ZN5Print5printEc>
  n += print('\n');
   d4b30:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4b32:	4604      	mov	r4, r0
  n += print('\n');
   d4b34:	4628      	mov	r0, r5
   d4b36:	f7ff fff3 	bl	d4b20 <_ZN5Print5printEc>
  return n;
}
   d4b3a:	4420      	add	r0, r4
   d4b3c:	bd38      	pop	{r3, r4, r5, pc}

000d4b3e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4b3e:	b538      	push	{r3, r4, r5, lr}
   d4b40:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4b42:	f7ff ffd9 	bl	d4af8 <_ZN5Print5writeEPKc>
   d4b46:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4b48:	4628      	mov	r0, r5
   d4b4a:	f7ff ffec 	bl	d4b26 <_ZN5Print7printlnEv>
  return n;
}
   d4b4e:	4420      	add	r0, r4
   d4b50:	bd38      	pop	{r3, r4, r5, pc}

000d4b52 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b52:	b530      	push	{r4, r5, lr}
   d4b54:	b08b      	sub	sp, #44	; 0x2c
   d4b56:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4b58:	2100      	movs	r1, #0
   d4b5a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4b5e:	2a01      	cmp	r2, #1
   d4b60:	bf98      	it	ls
   d4b62:	220a      	movls	r2, #10
   d4b64:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4b68:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4b6c:	fb05 3312 	mls	r3, r5, r2, r3
   d4b70:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4b74:	2b09      	cmp	r3, #9
   d4b76:	bf94      	ite	ls
   d4b78:	3330      	addls	r3, #48	; 0x30
   d4b7a:	3337      	addhi	r3, #55	; 0x37
   d4b7c:	b2db      	uxtb	r3, r3
   d4b7e:	4621      	mov	r1, r4
   d4b80:	f804 3901 	strb.w	r3, [r4], #-1
   d4b84:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4b86:	2d00      	cmp	r5, #0
   d4b88:	d1ee      	bne.n	d4b68 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4b8a:	f7ff ffb5 	bl	d4af8 <_ZN5Print5writeEPKc>
}
   d4b8e:	b00b      	add	sp, #44	; 0x2c
   d4b90:	bd30      	pop	{r4, r5, pc}

000d4b92 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4b92:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4b94:	b92a      	cbnz	r2, d4ba2 <_ZN5Print5printEmi+0x10>
   d4b96:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4b98:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4b9c:	689b      	ldr	r3, [r3, #8]
   d4b9e:	b2c9      	uxtb	r1, r1
   d4ba0:	4718      	bx	r3
  else return printNumber(n, base);
   d4ba2:	b2d2      	uxtb	r2, r2
}
   d4ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4ba8:	f7ff bfd3 	b.w	d4b52 <_ZN5Print11printNumberEmh>

000d4bac <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4bac:	f7ff bff1 	b.w	d4b92 <_ZN5Print5printEmi>

000d4bb0 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d4bb0:	b538      	push	{r3, r4, r5, lr}
   d4bb2:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d4bb4:	f7ff ffed 	bl	d4b92 <_ZN5Print5printEmi>
   d4bb8:	4604      	mov	r4, r0
  n += println();
   d4bba:	4628      	mov	r0, r5
   d4bbc:	f7ff ffb3 	bl	d4b26 <_ZN5Print7printlnEv>
  return n;
}
   d4bc0:	4420      	add	r0, r4
   d4bc2:	bd38      	pop	{r3, r4, r5, pc}

000d4bc4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4bc8:	4607      	mov	r7, r0
   d4bca:	460e      	mov	r6, r1
  if (base == 0) {
   d4bcc:	4615      	mov	r5, r2
   d4bce:	b92a      	cbnz	r2, d4bdc <_ZN5Print5printEli+0x18>
    return write(n);
   d4bd0:	6803      	ldr	r3, [r0, #0]
   d4bd2:	b2c9      	uxtb	r1, r1
   d4bd4:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4bda:	4718      	bx	r3
  } else if (base == 10) {
   d4bdc:	2a0a      	cmp	r2, #10
   d4bde:	d102      	bne.n	d4be6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4be0:	2900      	cmp	r1, #0
   d4be2:	da01      	bge.n	d4be8 <_ZN5Print5printEli+0x24>
   d4be4:	e004      	b.n	d4bf0 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4be6:	b2d2      	uxtb	r2, r2
  }
}
   d4be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4bec:	f7ff bfb1 	b.w	d4b52 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4bf0:	212d      	movs	r1, #45	; 0x2d
   d4bf2:	f7ff ff95 	bl	d4b20 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4bf6:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4bf8:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4bfa:	4271      	negs	r1, r6
   d4bfc:	4638      	mov	r0, r7
   d4bfe:	f7ff ffa8 	bl	d4b52 <_ZN5Print11printNumberEmh>
   d4c02:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c08 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d4c08:	b538      	push	{r3, r4, r5, lr}
   d4c0a:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4c0c:	f7ff ffda 	bl	d4bc4 <_ZN5Print5printEli>
   d4c10:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d4c12:	4628      	mov	r0, r5
   d4c14:	f7ff ff87 	bl	d4b26 <_ZN5Print7printlnEv>
  return n;
}
   d4c18:	4420      	add	r0, r4
   d4c1a:	bd38      	pop	{r3, r4, r5, pc}

000d4c1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4c1c:	4b01      	ldr	r3, [pc, #4]	; (d4c24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4c1e:	4a02      	ldr	r2, [pc, #8]	; (d4c28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4c20:	601a      	str	r2, [r3, #0]
   d4c22:	4770      	bx	lr
   d4c24:	2003e45c 	.word	0x2003e45c
   d4c28:	000d6a4f 	.word	0x000d6a4f

000d4c2c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d4c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d4c2e:	4b14      	ldr	r3, [pc, #80]	; (d4c80 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d4c30:	4f14      	ldr	r7, [pc, #80]	; (d4c84 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d4c32:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d4c34:	4b14      	ldr	r3, [pc, #80]	; (d4c88 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d4c36:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d4c38:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d4c3a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d4c3c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d4c3e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d4c40:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d4c42:	d01b      	beq.n	d4c7c <_ZL22Refresh_UnixTime_Cachel+0x50>
   d4c44:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d4c46:	ad01      	add	r5, sp, #4
   d4c48:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d4c4c:	f001 f95a 	bl	d5f04 <localtime>
	calendar_time->tm_year += 1900;
   d4c50:	6943      	ldr	r3, [r0, #20]
   d4c52:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d4c56:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d4c58:	4604      	mov	r4, r0
   d4c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4c62:	f8d4 e000 	ldr.w	lr, [r4]
   d4c66:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d4c6a:	ad01      	add	r5, sp, #4
   d4c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c6e:	4c07      	ldr	r4, [pc, #28]	; (d4c8c <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d4c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d4c76:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d4c78:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d4c7c:	b00b      	add	sp, #44	; 0x2c
   d4c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c80:	2003e490 	.word	0x2003e490
   d4c84:	2003e48c 	.word	0x2003e48c
   d4c88:	2003e488 	.word	0x2003e488
   d4c8c:	2003e460 	.word	0x2003e460

000d4c90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d4c90:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4c92:	2000      	movs	r0, #0
   d4c94:	f7ff fd72 	bl	d477c <spark_sync_time_pending>
   d4c98:	b128      	cbz	r0, d4ca6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c9a:	f7ff fd5f 	bl	d475c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4c9e:	f080 0001 	eor.w	r0, r0, #1
   d4ca2:	b2c0      	uxtb	r0, r0
   d4ca4:	bd08      	pop	{r3, pc}
   d4ca6:	2001      	movs	r0, #1
    }
   d4ca8:	bd08      	pop	{r3, pc}

000d4caa <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d4caa:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d4cac:	2000      	movs	r0, #0
   d4cae:	f7ff fbb9 	bl	d4424 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d4cb2:	4604      	mov	r4, r0
   d4cb4:	b968      	cbnz	r0, d4cd2 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d4cb6:	f7ff fc9d 	bl	d45f4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d4cba:	2801      	cmp	r0, #1
   d4cbc:	d10b      	bne.n	d4cd6 <_ZN9TimeClass7isValidEv+0x2c>
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	f7ff fcc8 	bl	d4654 <system_thread_get_state>
   d4cc4:	b938      	cbnz	r0, d4cd6 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d4cc6:	f7ff ffe3 	bl	d4c90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4cca:	b930      	cbnz	r0, d4cda <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d4ccc:	f7ff fd2e 	bl	d472c <spark_process>
   d4cd0:	e7f9      	b.n	d4cc6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d4cd2:	2001      	movs	r0, #1
   d4cd4:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d4cd6:	2000      	movs	r0, #0
   d4cd8:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d4cda:	f7ff ffd9 	bl	d4c90 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d4cde:	2000      	movs	r0, #0
   d4ce0:	f7ff fba0 	bl	d4424 <HAL_RTC_Time_Is_Valid>
   d4ce4:	3000      	adds	r0, #0
   d4ce6:	bf18      	it	ne
   d4ce8:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d4cea:	bd10      	pop	{r4, pc}

000d4cec <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d4cec:	b508      	push	{r3, lr}
    (void)isValid();
   d4cee:	f7ff ffdc 	bl	d4caa <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d4cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d4cf6:	f7ff bb8d 	b.w	d4414 <HAL_RTC_Get_UnixTime>
	...

000d4cfc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d4cfc:	b508      	push	{r3, lr}
	return minute(now());
   d4cfe:	f7ff fff5 	bl	d4cec <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d4d02:	f7ff ff93 	bl	d4c2c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d4d06:	4b01      	ldr	r3, [pc, #4]	; (d4d0c <_ZN9TimeClass6minuteEv+0x10>)
   d4d08:	6858      	ldr	r0, [r3, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	2003e460 	.word	0x2003e460

000d4d10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d10:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d12:	681a      	ldr	r2, [r3, #0]
   d4d14:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d16:	601a      	str	r2, [r3, #0]
   d4d18:	4770      	bx	lr
   d4d1a:	bf00      	nop
   d4d1c:	2003e2e4 	.word	0x2003e2e4
   d4d20:	2003e484 	.word	0x2003e484

000d4d24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d24:	2100      	movs	r1, #0
   d4d26:	f7ff bc75 	b.w	d4614 <system_delay_ms>

000d4d2a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d2a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d2c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d2e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4d30:	b113      	cbz	r3, d4d38 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d32:	2203      	movs	r2, #3
   d4d34:	4601      	mov	r1, r0
   d4d36:	4798      	blx	r3
    }
   d4d38:	4620      	mov	r0, r4
   d4d3a:	bd10      	pop	{r4, pc}

000d4d3c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d40:	f7ff fff3 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd10      	pop	{r4, pc}

000d4d48 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4d48:	b513      	push	{r0, r1, r4, lr}
   d4d4a:	460b      	mov	r3, r1
   d4d4c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d4e:	c803      	ldmia	r0, {r0, r1}
   d4d50:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d54:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d58:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d5c:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4d60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4d64:	b002      	add	sp, #8
   d4d66:	bd10      	pop	{r4, pc}

000d4d68 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4d68:	4803      	ldr	r0, [pc, #12]	; (d4d78 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d6a:	4a04      	ldr	r2, [pc, #16]	; (d4d7c <_GLOBAL__sub_I_RGB+0x14>)
   d4d6c:	4904      	ldr	r1, [pc, #16]	; (d4d80 <_GLOBAL__sub_I_RGB+0x18>)
   d4d6e:	2300      	movs	r3, #0
   d4d70:	6083      	str	r3, [r0, #8]
   d4d72:	f000 bf67 	b.w	d5c44 <__aeabi_atexit>
   d4d76:	bf00      	nop
   d4d78:	2003e494 	.word	0x2003e494
   d4d7c:	2003e39c 	.word	0x2003e39c
   d4d80:	000d4d3d 	.word	0x000d4d3d

000d4d84 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4d84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4d86:	4b0c      	ldr	r3, [pc, #48]	; (d4db8 <serialEventRun+0x34>)
   d4d88:	b133      	cbz	r3, d4d98 <serialEventRun+0x14>
   d4d8a:	f000 fbfd 	bl	d5588 <_Z16_fetch_usbserialv>
   d4d8e:	6803      	ldr	r3, [r0, #0]
   d4d90:	691b      	ldr	r3, [r3, #16]
   d4d92:	4798      	blx	r3
   d4d94:	2800      	cmp	r0, #0
   d4d96:	dc09      	bgt.n	d4dac <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4d98:	4b08      	ldr	r3, [pc, #32]	; (d4dbc <serialEventRun+0x38>)
   d4d9a:	b163      	cbz	r3, d4db6 <serialEventRun+0x32>
   d4d9c:	f000 fcc2 	bl	d5724 <_Z22__fetch_global_Serial1v>
   d4da0:	6803      	ldr	r3, [r0, #0]
   d4da2:	691b      	ldr	r3, [r3, #16]
   d4da4:	4798      	blx	r3
   d4da6:	2800      	cmp	r0, #0
   d4da8:	dc03      	bgt.n	d4db2 <serialEventRun+0x2e>
   d4daa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4dac:	f3af 8000 	nop.w
   d4db0:	e7f2      	b.n	d4d98 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4db2:	f3af 8000 	nop.w
   d4db6:	bd08      	pop	{r3, pc}
	...

000d4dc0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4dc0:	b508      	push	{r3, lr}
	serialEventRun();
   d4dc2:	f7ff ffdf 	bl	d4d84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4dc6:	f7ff fb1d 	bl	d4404 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4dca:	4b01      	ldr	r3, [pc, #4]	; (d4dd0 <_post_loop+0x10>)
   d4dcc:	6018      	str	r0, [r3, #0]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	2003e70c 	.word	0x2003e70c

000d4dd4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4dd4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4dd6:	2300      	movs	r3, #0
   d4dd8:	9300      	str	r3, [sp, #0]
   d4dda:	461a      	mov	r2, r3
   d4ddc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4de0:	f7ff fc4a 	bl	d4678 <system_ctrl_set_result>
}
   d4de4:	b003      	add	sp, #12
   d4de6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4dec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4dec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4dee:	8843      	ldrh	r3, [r0, #2]
   d4df0:	2b0a      	cmp	r3, #10
   d4df2:	d008      	beq.n	d4e06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4df4:	2b50      	cmp	r3, #80	; 0x50
   d4df6:	d109      	bne.n	d4e0c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4df8:	4b09      	ldr	r3, [pc, #36]	; (d4e20 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4dfa:	681b      	ldr	r3, [r3, #0]
   d4dfc:	b13b      	cbz	r3, d4e0e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4dfe:	b003      	add	sp, #12
   d4e00:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4e04:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4e06:	f7ff ffe5 	bl	d4dd4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4e0a:	e006      	b.n	d4e1a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e0c:	2300      	movs	r3, #0
   d4e0e:	9300      	str	r3, [sp, #0]
   d4e10:	461a      	mov	r2, r3
   d4e12:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e16:	f7ff fc2f 	bl	d4678 <system_ctrl_set_result>
        break;
    }
}
   d4e1a:	b003      	add	sp, #12
   d4e1c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e20:	2003e4a4 	.word	0x2003e4a4

000d4e24 <module_user_init_hook>:

void module_user_init_hook()
{
   d4e24:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4e26:	f7ff fae5 	bl	d43f4 <HAL_RNG_GetRandomNumber>
   d4e2a:	4604      	mov	r4, r0
    srand(seed);
   d4e2c:	f001 f976 	bl	d611c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4e30:	4b07      	ldr	r3, [pc, #28]	; (d4e50 <module_user_init_hook+0x2c>)
   d4e32:	b113      	cbz	r3, d4e3a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4e34:	4620      	mov	r0, r4
   d4e36:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4e3a:	2100      	movs	r1, #0
   d4e3c:	4804      	ldr	r0, [pc, #16]	; (d4e50 <module_user_init_hook+0x2c>)
   d4e3e:	f7ff fca5 	bl	d478c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e42:	2100      	movs	r1, #0
   d4e44:	4803      	ldr	r0, [pc, #12]	; (d4e54 <module_user_init_hook+0x30>)
}
   d4e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4e4a:	f7ff bc0b 	b.w	d4664 <system_ctrl_set_app_request_handler>
   d4e4e:	bf00      	nop
   d4e50:	00000000 	.word	0x00000000
   d4e54:	000d4ded 	.word	0x000d4ded

000d4e58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e58:	4770      	bx	lr

000d4e5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4e5a:	2000      	movs	r0, #0
   d4e5c:	4770      	bx	lr

000d4e5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4e5e:	b510      	push	{r4, lr}
   d4e60:	2110      	movs	r1, #16
   d4e62:	4604      	mov	r4, r0
   d4e64:	f000 fef3 	bl	d5c4e <_ZdlPvj>
   d4e68:	4620      	mov	r0, r4
   d4e6a:	bd10      	pop	{r4, pc}

000d4e6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4e6c:	b508      	push	{r3, lr}
      { delete this; }
   d4e6e:	b108      	cbz	r0, d4e74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4e70:	f7ff fff5 	bl	d4e5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4e74:	bd08      	pop	{r3, pc}

000d4e76 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e76:	2200      	movs	r2, #0
   d4e78:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4e7a:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4e7c:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4e80:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4e82:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4e86:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e88:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e8a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4e8c:	680c      	ldr	r4, [r1, #0]
   d4e8e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e90:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4e92:	bd10      	pop	{r4, pc}

000d4e94 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4e94:	b510      	push	{r4, lr}
   d4e96:	4604      	mov	r4, r0
    free((void*)msg_);
   d4e98:	6800      	ldr	r0, [r0, #0]
   d4e9a:	f7ff fc87 	bl	d47ac <free>
}
   d4e9e:	4620      	mov	r0, r4
   d4ea0:	bd10      	pop	{r4, pc}

000d4ea2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4ea2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4ea4:	68c4      	ldr	r4, [r0, #12]
   d4ea6:	b1f4      	cbz	r4, d4ee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4ea8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4eaa:	2b02      	cmp	r3, #2
   d4eac:	d103      	bne.n	d4eb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4eae:	f104 000c 	add.w	r0, r4, #12
   d4eb2:	f7ff ffef 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4eb6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4eb8:	b135      	cbz	r5, d4ec8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4eba:	4628      	mov	r0, r5
   d4ebc:	f7ff ff35 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
   d4ec0:	2110      	movs	r1, #16
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	f000 fec3 	bl	d5c4e <_ZdlPvj>
   d4ec8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4eca:	b135      	cbz	r5, d4eda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4ecc:	4628      	mov	r0, r5
   d4ece:	f7ff ff2c 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
   d4ed2:	2110      	movs	r1, #16
   d4ed4:	4628      	mov	r0, r5
   d4ed6:	f000 feba 	bl	d5c4e <_ZdlPvj>
   d4eda:	4620      	mov	r0, r4
   d4edc:	2114      	movs	r1, #20
   d4ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4ee2:	f000 beb4 	b.w	d5c4e <_ZdlPvj>
   d4ee6:	bd38      	pop	{r3, r4, r5, pc}

000d4ee8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4ee8:	b513      	push	{r0, r1, r4, lr}
   d4eea:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4eec:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4ef0:	2300      	movs	r3, #0
   d4ef2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ef4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ef6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4ef8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4efa:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4efc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4efe:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f00:	f7ff fdcf 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f04:	4620      	mov	r0, r4
   d4f06:	b002      	add	sp, #8
   d4f08:	bd10      	pop	{r4, pc}

000d4f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4f0c:	460c      	mov	r4, r1
   d4f0e:	ad02      	add	r5, sp, #8
   d4f10:	f854 3b04 	ldr.w	r3, [r4], #4
   d4f14:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4f18:	4606      	mov	r6, r0
   d4f1a:	460f      	mov	r7, r1
   d4f1c:	a801      	add	r0, sp, #4
   d4f1e:	4621      	mov	r1, r4
   d4f20:	f7ff fdb8 	bl	d4a94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4f24:	4629      	mov	r1, r5
   d4f26:	4630      	mov	r0, r6
   d4f28:	f7ff ffde 	bl	d4ee8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4f2c:	a801      	add	r0, sp, #4
   d4f2e:	f7ff fdb8 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4f32:	4620      	mov	r0, r4
   d4f34:	f7ff fdb5 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4f38:	4638      	mov	r0, r7
   d4f3a:	2108      	movs	r1, #8
   d4f3c:	f000 fe87 	bl	d5c4e <_ZdlPvj>
        return p;
    }
   d4f40:	4630      	mov	r0, r6
   d4f42:	b003      	add	sp, #12
   d4f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4f48:	b538      	push	{r3, r4, r5, lr}
   d4f4a:	2300      	movs	r3, #0
   d4f4c:	4604      	mov	r4, r0
   d4f4e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f50:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4f52:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f54:	f7ff f89f 	bl	d4096 <_Znwj>
   d4f58:	b128      	cbz	r0, d4f66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4f5a:	2301      	movs	r3, #1
   d4f5c:	6043      	str	r3, [r0, #4]
   d4f5e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d4f60:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4f62:	6003      	str	r3, [r0, #0]
   d4f64:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4f66:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4f68:	4620      	mov	r0, r4
   d4f6a:	bd38      	pop	{r3, r4, r5, pc}
   d4f6c:	000d6aec 	.word	0x000d6aec

000d4f70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f74:	b90a      	cbnz	r2, d4f7a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4f76:	f000 fe6c 	bl	d5c52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f7a:	68c3      	ldr	r3, [r0, #12]
    }
   d4f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f80:	4718      	bx	r3

000d4f82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f82:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f84:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f86:	f100 0110 	add.w	r1, r0, #16
   d4f8a:	f7ff fff1 	bl	d4f70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4f8e:	bd08      	pop	{r3, pc}

000d4f90 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f90:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4f92:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4f94:	b90a      	cbnz	r2, d4f9a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4f96:	f000 fe5c 	bl	d5c52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4f9a:	68c3      	ldr	r3, [r0, #12]
    }
   d4f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4fa0:	4718      	bx	r3

000d4fa2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4fa2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4fa4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4fa6:	f100 0110 	add.w	r1, r0, #16
   d4faa:	f7ff fff1 	bl	d4f90 <_ZNKSt8functionIFvRKbEEclES1_>
   d4fae:	bd08      	pop	{r3, pc}

000d4fb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fb0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fb2:	2300      	movs	r3, #0
   d4fb4:	6083      	str	r3, [r0, #8]
   d4fb6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4fb8:	4604      	mov	r4, r0
   d4fba:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4fbc:	b12b      	cbz	r3, d4fca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4fbe:	2202      	movs	r2, #2
   d4fc0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4fc2:	68eb      	ldr	r3, [r5, #12]
   d4fc4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4fc6:	68ab      	ldr	r3, [r5, #8]
   d4fc8:	60a3      	str	r3, [r4, #8]
	}
    }
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4fd2:	b089      	sub	sp, #36	; 0x24
   d4fd4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4fd6:	4668      	mov	r0, sp
   d4fd8:	f7ff ff4d 	bl	d4e76 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4fdc:	2300      	movs	r3, #0
   d4fde:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4fe2:	f04f 0202 	mov.w	r2, #2
   d4fe6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d4fea:	2b00      	cmp	r3, #0
   d4fec:	d103      	bne.n	d4ff6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d4fee:	e8c4 2f41 	strexb	r1, r2, [r4]
   d4ff2:	2900      	cmp	r1, #0
   d4ff4:	d1f7      	bne.n	d4fe6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d4ff6:	d002      	beq.n	d4ffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d4ff8:	f88d 3008 	strb.w	r3, [sp, #8]
   d4ffc:	e063      	b.n	d50c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4ffe:	f114 050c 	adds.w	r5, r4, #12
   d5002:	d003      	beq.n	d500c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5004:	4669      	mov	r1, sp
   d5006:	4628      	mov	r0, r5
   d5008:	f7ff ff35 	bl	d4e76 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d500c:	f3bf 8f5f 	dmb	sy
   d5010:	2301      	movs	r3, #1
   d5012:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5014:	2000      	movs	r0, #0
   d5016:	f104 0308 	add.w	r3, r4, #8
   d501a:	f3bf 8f5f 	dmb	sy
   d501e:	e853 6f00 	ldrex	r6, [r3]
   d5022:	e843 0200 	strex	r2, r0, [r3]
   d5026:	2a00      	cmp	r2, #0
   d5028:	d1f9      	bne.n	d501e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d502a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d502e:	2e00      	cmp	r6, #0
   d5030:	d049      	beq.n	d50c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5032:	f7ff faff 	bl	d4634 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5036:	b120      	cbz	r0, d5042 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5038:	4629      	mov	r1, r5
   d503a:	4630      	mov	r0, r6
   d503c:	f7ff ff98 	bl	d4f70 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5040:	e03a      	b.n	d50b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5042:	4631      	mov	r1, r6
   d5044:	a802      	add	r0, sp, #8
   d5046:	f7ff ffb3 	bl	d4fb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d504a:	68e0      	ldr	r0, [r4, #12]
   d504c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5050:	b108      	cbz	r0, d5056 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5052:	f001 f8ad 	bl	d61b0 <strdup>
   d5056:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5058:	2010      	movs	r0, #16
   d505a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d505e:	f7ff f81a 	bl	d4096 <_Znwj>
   d5062:	4605      	mov	r5, r0
   d5064:	b1e8      	cbz	r0, d50a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5066:	2700      	movs	r7, #0
   d5068:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d506a:	2018      	movs	r0, #24
   d506c:	f7ff f813 	bl	d4096 <_Znwj>
   d5070:	4604      	mov	r4, r0
   d5072:	b188      	cbz	r0, d5098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5074:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5076:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5078:	a802      	add	r0, sp, #8
   d507a:	f7ff fe65 	bl	d4d48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d507e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5080:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5082:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5084:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5086:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5088:	a906      	add	r1, sp, #24
   d508a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d508c:	60e3      	str	r3, [r4, #12]
   d508e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5092:	9205      	str	r2, [sp, #20]
   d5094:	f7ff feef 	bl	d4e76 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5098:	4b0d      	ldr	r3, [pc, #52]	; (d50d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d509a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d509c:	4b0d      	ldr	r3, [pc, #52]	; (d50d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d509e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d50a0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d50a2:	a806      	add	r0, sp, #24
   d50a4:	f7ff fef6 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50a8:	a802      	add	r0, sp, #8
   d50aa:	f7ff fe3e 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d50ae:	2200      	movs	r2, #0
   d50b0:	4629      	mov	r1, r5
   d50b2:	4809      	ldr	r0, [pc, #36]	; (d50d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d50b4:	f7ff fac6 	bl	d4644 <application_thread_invoke>
   d50b8:	4630      	mov	r0, r6
   d50ba:	f7ff fe36 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d50be:	2110      	movs	r1, #16
   d50c0:	4630      	mov	r0, r6
   d50c2:	f000 fdc4 	bl	d5c4e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d50c6:	4668      	mov	r0, sp
   d50c8:	f7ff fee4 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
    }
   d50cc:	b009      	add	sp, #36	; 0x24
   d50ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50d0:	000d4f83 	.word	0x000d4f83
   d50d4:	000d51f9 	.word	0x000d51f9
   d50d8:	000d57a5 	.word	0x000d57a5

000d50dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d50dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50e0:	b08b      	sub	sp, #44	; 0x2c
   d50e2:	4606      	mov	r6, r0
   d50e4:	460f      	mov	r7, r1
   d50e6:	4690      	mov	r8, r2
   d50e8:	4699      	mov	r9, r3
   d50ea:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50ee:	f7ff fb35 	bl	d475c <spark_cloud_flag_connected>
   d50f2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d50f4:	4683      	mov	fp, r0
   d50f6:	bb30      	cbnz	r0, d5146 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d50fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d50fe:	a905      	add	r1, sp, #20
   d5100:	4628      	mov	r0, r5
   d5102:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5106:	f7ff feb6 	bl	d4e76 <_ZN8particle5ErrorC1EOS0_>
   d510a:	2014      	movs	r0, #20
   d510c:	f7fe ffc3 	bl	d4096 <_Znwj>
   d5110:	4604      	mov	r4, r0
   d5112:	b158      	cbz	r0, d512c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5114:	2302      	movs	r3, #2
   d5116:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5118:	2301      	movs	r3, #1
   d511a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d511c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5120:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5124:	4629      	mov	r1, r5
   d5126:	300c      	adds	r0, #12
   d5128:	f7ff fea5 	bl	d4e76 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d512c:	4630      	mov	r0, r6
   d512e:	4621      	mov	r1, r4
   d5130:	f840 4b04 	str.w	r4, [r0], #4
   d5134:	f7ff ff08 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5138:	4628      	mov	r0, r5
   d513a:	f7ff feab 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d513e:	a805      	add	r0, sp, #20
   d5140:	f7ff fea8 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
   d5144:	e052      	b.n	d51ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5146:	2400      	movs	r4, #0
   d5148:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d514a:	2014      	movs	r0, #20
   d514c:	606c      	str	r4, [r5, #4]
   d514e:	60ac      	str	r4, [r5, #8]
   d5150:	9307      	str	r3, [sp, #28]
   d5152:	f7fe ffa0 	bl	d4096 <_Znwj>
   d5156:	4601      	mov	r1, r0
   d5158:	b118      	cbz	r0, d5162 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d515a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d515c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d515e:	6044      	str	r4, [r0, #4]
   d5160:	6084      	str	r4, [r0, #8]
   d5162:	a804      	add	r0, sp, #16
   d5164:	9103      	str	r1, [sp, #12]
   d5166:	f7ff feef 	bl	d4f48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d516a:	4b22      	ldr	r3, [pc, #136]	; (d51f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d516c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d516e:	2008      	movs	r0, #8
   d5170:	f7fe ff91 	bl	d4096 <_Znwj>
   d5174:	4604      	mov	r4, r0
   d5176:	b128      	cbz	r0, d5184 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5178:	9b03      	ldr	r3, [sp, #12]
   d517a:	f840 3b04 	str.w	r3, [r0], #4
   d517e:	a904      	add	r1, sp, #16
   d5180:	f7ff fc88 	bl	d4a94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5184:	9500      	str	r5, [sp, #0]
   d5186:	fa5f f38a 	uxtb.w	r3, sl
   d518a:	464a      	mov	r2, r9
   d518c:	4641      	mov	r1, r8
   d518e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5190:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5192:	f7ff faeb 	bl	d476c <spark_send_event>
   d5196:	b920      	cbnz	r0, d51a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5198:	9b03      	ldr	r3, [sp, #12]
   d519a:	785b      	ldrb	r3, [r3, #1]
   d519c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d51a0:	b183      	cbz	r3, d51c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d51a2:	9b03      	ldr	r3, [sp, #12]
   d51a4:	9305      	str	r3, [sp, #20]
   d51a6:	a904      	add	r1, sp, #16
   d51a8:	a806      	add	r0, sp, #24
   d51aa:	f7ff fc73 	bl	d4a94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d51ae:	a905      	add	r1, sp, #20
   d51b0:	4630      	mov	r0, r6
   d51b2:	f7ff fe99 	bl	d4ee8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51b6:	a806      	add	r0, sp, #24
   d51b8:	f7ff fc73 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51bc:	a804      	add	r0, sp, #16
   d51be:	f7ff fc70 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51c2:	e013      	b.n	d51ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d51c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d51c8:	a905      	add	r1, sp, #20
   d51ca:	a803      	add	r0, sp, #12
   d51cc:	9205      	str	r2, [sp, #20]
   d51ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51d2:	f7ff fefd 	bl	d4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d51d6:	a805      	add	r0, sp, #20
   d51d8:	f7ff fe5c 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d51dc:	a805      	add	r0, sp, #20
   d51de:	9909      	ldr	r1, [sp, #36]	; 0x24
   d51e0:	f7ff fe93 	bl	d4f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d51e4:	a806      	add	r0, sp, #24
   d51e6:	f7ff fc5c 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51ea:	e7da      	b.n	d51a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d51ec:	4630      	mov	r0, r6
   d51ee:	b00b      	add	sp, #44	; 0x2c
   d51f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d51f4:	000d5369 	.word	0x000d5369

000d51f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d51f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d51fe:	d006      	beq.n	d520e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5200:	2a03      	cmp	r2, #3
   d5202:	d017      	beq.n	d5234 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5204:	2a01      	cmp	r2, #1
   d5206:	d122      	bne.n	d524e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5208:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d520a:	6003      	str	r3, [r0, #0]
	      break;
   d520c:	e01f      	b.n	d524e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d520e:	2018      	movs	r0, #24
   d5210:	680e      	ldr	r6, [r1, #0]
   d5212:	f7fe ff40 	bl	d4096 <_Znwj>
   d5216:	4605      	mov	r5, r0
   d5218:	b150      	cbz	r0, d5230 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d521a:	4631      	mov	r1, r6
   d521c:	f7ff fec8 	bl	d4fb0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5220:	6930      	ldr	r0, [r6, #16]
   d5222:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5226:	b108      	cbz	r0, d522c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5228:	f000 ffc2 	bl	d61b0 <strdup>
   d522c:	6128      	str	r0, [r5, #16]
   d522e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5230:	6025      	str	r5, [r4, #0]
   d5232:	e00c      	b.n	d524e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5234:	6804      	ldr	r4, [r0, #0]
   d5236:	b154      	cbz	r4, d524e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5238:	f104 0010 	add.w	r0, r4, #16
   d523c:	f7ff fe2a 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5240:	4620      	mov	r0, r4
   d5242:	f7ff fd72 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5246:	2118      	movs	r1, #24
   d5248:	4620      	mov	r0, r4
   d524a:	f000 fd00 	bl	d5c4e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d524e:	2000      	movs	r0, #0
   d5250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5252 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5252:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5254:	2300      	movs	r3, #0
   d5256:	6083      	str	r3, [r0, #8]
   d5258:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d525a:	4604      	mov	r4, r0
   d525c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d525e:	b12b      	cbz	r3, d526c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5260:	2202      	movs	r2, #2
   d5262:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5264:	68eb      	ldr	r3, [r5, #12]
   d5266:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5268:	68ab      	ldr	r3, [r5, #8]
   d526a:	60a3      	str	r3, [r4, #8]
	}
    }
   d526c:	4620      	mov	r0, r4
   d526e:	bd38      	pop	{r3, r4, r5, pc}

000d5270 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5270:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5272:	b570      	push	{r4, r5, r6, lr}
   d5274:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5276:	d006      	beq.n	d5286 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5278:	2a03      	cmp	r2, #3
   d527a:	d011      	beq.n	d52a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d527c:	2a01      	cmp	r2, #1
   d527e:	d118      	bne.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5280:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5282:	6003      	str	r3, [r0, #0]
	      break;
   d5284:	e015      	b.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5286:	2014      	movs	r0, #20
   d5288:	680e      	ldr	r6, [r1, #0]
   d528a:	f7fe ff04 	bl	d4096 <_Znwj>
   d528e:	4605      	mov	r5, r0
   d5290:	b120      	cbz	r0, d529c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5292:	4631      	mov	r1, r6
   d5294:	f7ff ffdd 	bl	d5252 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5298:	7c33      	ldrb	r3, [r6, #16]
   d529a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d529c:	6025      	str	r5, [r4, #0]
   d529e:	e008      	b.n	d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52a0:	6804      	ldr	r4, [r0, #0]
   d52a2:	b134      	cbz	r4, d52b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d52a4:	4620      	mov	r0, r4
   d52a6:	f7ff fd40 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d52aa:	2114      	movs	r1, #20
   d52ac:	4620      	mov	r0, r4
   d52ae:	f000 fcce 	bl	d5c4e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d52b2:	2000      	movs	r0, #0
   d52b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d52b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d52b8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d52ba:	2300      	movs	r3, #0
   d52bc:	b087      	sub	sp, #28
   d52be:	460c      	mov	r4, r1
   d52c0:	f3bf 8f5f 	dmb	sy
   d52c4:	e850 6f00 	ldrex	r6, [r0]
   d52c8:	e840 3200 	strex	r2, r3, [r0]
   d52cc:	2a00      	cmp	r2, #0
   d52ce:	d1f9      	bne.n	d52c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d52d0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d52d4:	2e00      	cmp	r6, #0
   d52d6:	d03f      	beq.n	d5358 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52d8:	4618      	mov	r0, r3
   d52da:	f7ff f9ab 	bl	d4634 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52de:	4607      	mov	r7, r0
   d52e0:	b120      	cbz	r0, d52ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52e2:	4621      	mov	r1, r4
   d52e4:	4630      	mov	r0, r6
   d52e6:	f7ff fe53 	bl	d4f90 <_ZNKSt8functionIFvRKbEEclES1_>
   d52ea:	e02e      	b.n	d534a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d52ec:	4631      	mov	r1, r6
   d52ee:	a801      	add	r0, sp, #4
   d52f0:	f7ff ffaf 	bl	d5252 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52f4:	7823      	ldrb	r3, [r4, #0]
   d52f6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d52fa:	2010      	movs	r0, #16
   d52fc:	f7fe fecb 	bl	d4096 <_Znwj>
   d5300:	4605      	mov	r5, r0
   d5302:	b1d0      	cbz	r0, d533a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5304:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5306:	2014      	movs	r0, #20
   d5308:	f7fe fec5 	bl	d4096 <_Znwj>
   d530c:	4604      	mov	r4, r0
   d530e:	b178      	cbz	r0, d5330 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5310:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5312:	4601      	mov	r1, r0
   d5314:	a801      	add	r0, sp, #4
   d5316:	f7ff fd17 	bl	d4d48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d531a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d531c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d531e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5320:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5322:	9203      	str	r2, [sp, #12]
   d5324:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5326:	60e3      	str	r3, [r4, #12]
   d5328:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d532c:	9204      	str	r2, [sp, #16]
   d532e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5330:	4b0a      	ldr	r3, [pc, #40]	; (d535c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5332:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5334:	4b0a      	ldr	r3, [pc, #40]	; (d5360 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5336:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5338:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d533a:	a801      	add	r0, sp, #4
   d533c:	f7ff fcf5 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5340:	2200      	movs	r2, #0
   d5342:	4629      	mov	r1, r5
   d5344:	4807      	ldr	r0, [pc, #28]	; (d5364 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5346:	f7ff f97d 	bl	d4644 <application_thread_invoke>
   d534a:	4630      	mov	r0, r6
   d534c:	f7ff fced 	bl	d4d2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5350:	2110      	movs	r1, #16
   d5352:	4630      	mov	r0, r6
   d5354:	f000 fc7b 	bl	d5c4e <_ZdlPvj>
        }
    }
   d5358:	b007      	add	sp, #28
   d535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d535c:	000d4fa3 	.word	0x000d4fa3
   d5360:	000d5271 	.word	0x000d5271
   d5364:	000d57a5 	.word	0x000d57a5

000d5368 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5368:	b530      	push	{r4, r5, lr}
   d536a:	b085      	sub	sp, #20
   d536c:	4604      	mov	r4, r0
   d536e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5370:	4668      	mov	r0, sp
   d5372:	4611      	mov	r1, r2
   d5374:	f7ff fdc9 	bl	d4f0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5378:	b17c      	cbz	r4, d539a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d537a:	b224      	sxth	r4, r4
   d537c:	4628      	mov	r0, r5
   d537e:	b10d      	cbz	r5, d5384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5380:	f000 ff16 	bl	d61b0 <strdup>
   d5384:	9002      	str	r0, [sp, #8]
   d5386:	a902      	add	r1, sp, #8
   d5388:	4668      	mov	r0, sp
   d538a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d538e:	f7ff fe1f 	bl	d4fd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5392:	a802      	add	r0, sp, #8
   d5394:	f7ff fd7e 	bl	d4e94 <_ZN8particle5ErrorD1Ev>
   d5398:	e01d      	b.n	d53d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d539a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d539c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d53a0:	f04f 0201 	mov.w	r2, #1
   d53a4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d53a8:	42a3      	cmp	r3, r4
   d53aa:	d103      	bne.n	d53b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d53ac:	e8c0 2f41 	strexb	r1, r2, [r0]
   d53b0:	2900      	cmp	r1, #0
   d53b2:	d1f7      	bne.n	d53a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d53b4:	d002      	beq.n	d53bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d53b6:	f88d 3008 	strb.w	r3, [sp, #8]
   d53ba:	e00c      	b.n	d53d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d53bc:	f110 010c 	adds.w	r1, r0, #12
   d53c0:	f04f 0301 	mov.w	r3, #1
   d53c4:	bf18      	it	ne
   d53c6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d53c8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d53cc:	3004      	adds	r0, #4
   d53ce:	f800 3c03 	strb.w	r3, [r0, #-3]
   d53d2:	f7ff ff71 	bl	d52b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d53d6:	a801      	add	r0, sp, #4
   d53d8:	f7ff fb63 	bl	d4aa2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d53dc:	b005      	add	sp, #20
   d53de:	bd30      	pop	{r4, r5, pc}

000d53e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d53e0:	4770      	bx	lr

000d53e2 <_ZN9IPAddressD0Ev>:
   d53e2:	b510      	push	{r4, lr}
   d53e4:	2118      	movs	r1, #24
   d53e6:	4604      	mov	r4, r0
   d53e8:	f000 fc31 	bl	d5c4e <_ZdlPvj>
   d53ec:	4620      	mov	r0, r4
   d53ee:	bd10      	pop	{r4, pc}

000d53f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d53f2:	7d03      	ldrb	r3, [r0, #20]
   d53f4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d53f6:	b08d      	sub	sp, #52	; 0x34
   d53f8:	460e      	mov	r6, r1
   d53fa:	f100 0704 	add.w	r7, r0, #4
   d53fe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5402:	d002      	beq.n	d540a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5404:	f100 0508 	add.w	r5, r0, #8
   d5408:	e018      	b.n	d543c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d540a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d540c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d540e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5412:	232f      	movs	r3, #47	; 0x2f
   d5414:	462a      	mov	r2, r5
   d5416:	200a      	movs	r0, #10
   d5418:	f7ff f834 	bl	d4484 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d541c:	4628      	mov	r0, r5
   d541e:	f000 fee2 	bl	d61e6 <strlen>
   d5422:	6833      	ldr	r3, [r6, #0]
   d5424:	4602      	mov	r2, r0
   d5426:	68db      	ldr	r3, [r3, #12]
   d5428:	4629      	mov	r1, r5
   d542a:	4630      	mov	r0, r6
   d542c:	4798      	blx	r3
   d542e:	e00f      	b.n	d5450 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5430:	b124      	cbz	r4, d543c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5432:	212e      	movs	r1, #46	; 0x2e
   d5434:	4630      	mov	r0, r6
   d5436:	f7ff fb73 	bl	d4b20 <_ZN5Print5printEc>
   d543a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d543c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5440:	220a      	movs	r2, #10
   d5442:	4630      	mov	r0, r6
   d5444:	f7ff fbb2 	bl	d4bac <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5448:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d544a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d544c:	d1f0      	bne.n	d5430 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d544e:	4620      	mov	r0, r4
    }
    return n;
}
   d5450:	b00d      	add	sp, #52	; 0x34
   d5452:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5454 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5454:	b510      	push	{r4, lr}
   d5456:	4b05      	ldr	r3, [pc, #20]	; (d546c <_ZN9IPAddressC1Ev+0x18>)
   d5458:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d545a:	2211      	movs	r2, #17
   d545c:	f840 3b04 	str.w	r3, [r0], #4
   d5460:	2100      	movs	r1, #0
   d5462:	f000 fe52 	bl	d610a <memset>
{
    clear();
}
   d5466:	4620      	mov	r0, r4
   d5468:	bd10      	pop	{r4, pc}
   d546a:	bf00      	nop
   d546c:	000d6b08 	.word	0x000d6b08

000d5470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5470:	4603      	mov	r3, r0
   d5472:	4a07      	ldr	r2, [pc, #28]	; (d5490 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5474:	b510      	push	{r4, lr}
   d5476:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d547a:	f101 0210 	add.w	r2, r1, #16
   d547e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5482:	f843 4b04 	str.w	r4, [r3], #4
   d5486:	4291      	cmp	r1, r2
   d5488:	d1f9      	bne.n	d547e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d548a:	780a      	ldrb	r2, [r1, #0]
   d548c:	701a      	strb	r2, [r3, #0]
}
   d548e:	bd10      	pop	{r4, pc}
   d5490:	000d6b08 	.word	0x000d6b08

000d5494 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5494:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5496:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d549a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d549e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d54a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d54a6:	2304      	movs	r3, #4
   d54a8:	6041      	str	r1, [r0, #4]
   d54aa:	7503      	strb	r3, [r0, #20]
   d54ac:	bd10      	pop	{r4, pc}

000d54ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d54ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d54b0:	780d      	ldrb	r5, [r1, #0]
   d54b2:	788b      	ldrb	r3, [r1, #2]
   d54b4:	784a      	ldrb	r2, [r1, #1]
   d54b6:	78c9      	ldrb	r1, [r1, #3]
   d54b8:	9100      	str	r1, [sp, #0]
   d54ba:	4629      	mov	r1, r5
   d54bc:	f7ff ffea 	bl	d5494 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d54c0:	b003      	add	sp, #12
   d54c2:	bd30      	pop	{r4, r5, pc}

000d54c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54c4:	7441      	strb	r1, [r0, #17]
   d54c6:	4770      	bx	lr

000d54c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54c8:	4770      	bx	lr

000d54ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d54ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d54cc:	2100      	movs	r1, #0
   d54ce:	7c00      	ldrb	r0, [r0, #16]
   d54d0:	f7ff f878 	bl	d45c4 <HAL_USB_USART_Receive_Data>
}
   d54d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54d8:	bf28      	it	cs
   d54da:	f04f 30ff 	movcs.w	r0, #4294967295
   d54de:	bd08      	pop	{r3, pc}

000d54e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d54e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d54e2:	2101      	movs	r1, #1
   d54e4:	7c00      	ldrb	r0, [r0, #16]
   d54e6:	f7ff f86d 	bl	d45c4 <HAL_USB_USART_Receive_Data>
}
   d54ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d54ee:	bf28      	it	cs
   d54f0:	f04f 30ff 	movcs.w	r0, #4294967295
   d54f4:	bd08      	pop	{r3, pc}

000d54f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d54f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d54f8:	7c00      	ldrb	r0, [r0, #16]
   d54fa:	f7ff f85b 	bl	d45b4 <HAL_USB_USART_Available_Data_For_Write>
}
   d54fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5502:	bd08      	pop	{r3, pc}

000d5504 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5504:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5506:	7c00      	ldrb	r0, [r0, #16]
   d5508:	f7ff f84c 	bl	d45a4 <HAL_USB_USART_Available_Data>
}
   d550c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5510:	bd08      	pop	{r3, pc}

000d5512 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5512:	7c00      	ldrb	r0, [r0, #16]
   d5514:	f7ff b866 	b.w	d45e4 <HAL_USB_USART_Flush_Data>

000d5518 <_ZN9USBSerialD0Ev>:
   d5518:	b510      	push	{r4, lr}
   d551a:	2114      	movs	r1, #20
   d551c:	4604      	mov	r4, r0
   d551e:	f000 fb96 	bl	d5c4e <_ZdlPvj>
   d5522:	4620      	mov	r0, r4
   d5524:	bd10      	pop	{r4, pc}

000d5526 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5526:	b538      	push	{r3, r4, r5, lr}
   d5528:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d552a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d552c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d552e:	f7ff f841 	bl	d45b4 <HAL_USB_USART_Available_Data_For_Write>
   d5532:	2800      	cmp	r0, #0
   d5534:	dc01      	bgt.n	d553a <_ZN9USBSerial5writeEh+0x14>
   d5536:	7c60      	ldrb	r0, [r4, #17]
   d5538:	b128      	cbz	r0, d5546 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d553a:	4629      	mov	r1, r5
   d553c:	7c20      	ldrb	r0, [r4, #16]
   d553e:	f7ff f849 	bl	d45d4 <HAL_USB_USART_Send_Data>
   d5542:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5546:	bd38      	pop	{r3, r4, r5, pc}

000d5548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5548:	b510      	push	{r4, lr}
   d554a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d554c:	2300      	movs	r3, #0
   d554e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5554:	60a3      	str	r3, [r4, #8]
   d5556:	4b05      	ldr	r3, [pc, #20]	; (d556c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5558:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d555a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d555c:	4608      	mov	r0, r1
{
  _serial = serial;
   d555e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5560:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5562:	4611      	mov	r1, r2
   d5564:	f7ff f80e 	bl	d4584 <HAL_USB_USART_Init>
}
   d5568:	4620      	mov	r0, r4
   d556a:	bd10      	pop	{r4, pc}
   d556c:	000d6b1c 	.word	0x000d6b1c

000d5570 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5570:	2200      	movs	r2, #0
   d5572:	7c00      	ldrb	r0, [r0, #16]
   d5574:	f7ff b80e 	b.w	d4594 <HAL_USB_USART_Begin>

000d5578 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5578:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d557a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d557c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d557e:	2100      	movs	r1, #0
   d5580:	f000 fdc3 	bl	d610a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}

000d5588 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5588:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d558a:	4d0e      	ldr	r5, [pc, #56]	; (d55c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d558c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d558e:	a801      	add	r0, sp, #4
   d5590:	f7ff fff2 	bl	d5578 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5594:	6829      	ldr	r1, [r5, #0]
   d5596:	f011 0401 	ands.w	r4, r1, #1
   d559a:	d110      	bne.n	d55be <_Z16_fetch_usbserialv+0x36>
   d559c:	4628      	mov	r0, r5
   d559e:	f7fe fd80 	bl	d40a2 <__cxa_guard_acquire>
   d55a2:	b160      	cbz	r0, d55be <_Z16_fetch_usbserialv+0x36>
   d55a4:	aa01      	add	r2, sp, #4
   d55a6:	4621      	mov	r1, r4
   d55a8:	4807      	ldr	r0, [pc, #28]	; (d55c8 <_Z16_fetch_usbserialv+0x40>)
   d55aa:	f7ff ffcd 	bl	d5548 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55ae:	4628      	mov	r0, r5
   d55b0:	f7fe fd7c 	bl	d40ac <__cxa_guard_release>
   d55b4:	4a05      	ldr	r2, [pc, #20]	; (d55cc <_Z16_fetch_usbserialv+0x44>)
   d55b6:	4906      	ldr	r1, [pc, #24]	; (d55d0 <_Z16_fetch_usbserialv+0x48>)
   d55b8:	4803      	ldr	r0, [pc, #12]	; (d55c8 <_Z16_fetch_usbserialv+0x40>)
   d55ba:	f000 fb43 	bl	d5c44 <__aeabi_atexit>
	return _usbserial;
}
   d55be:	4802      	ldr	r0, [pc, #8]	; (d55c8 <_Z16_fetch_usbserialv+0x40>)
   d55c0:	b007      	add	sp, #28
   d55c2:	bd30      	pop	{r4, r5, pc}
   d55c4:	2003e4a8 	.word	0x2003e4a8
   d55c8:	2003e4ac 	.word	0x2003e4ac
   d55cc:	2003e39c 	.word	0x2003e39c
   d55d0:	000d54c9 	.word	0x000d54c9

000d55d4 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d55d4:	2200      	movs	r2, #0
   d55d6:	4611      	mov	r1, r2
   d55d8:	6840      	ldr	r0, [r0, #4]
   d55da:	f7ff b86f 	b.w	d46bc <network_ready>

000d55de <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55de:	2200      	movs	r2, #0
   d55e0:	4611      	mov	r1, r2
   d55e2:	6840      	ldr	r0, [r0, #4]
   d55e4:	f7ff b88a 	b.w	d46fc <network_listening>

000d55e8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d55e8:	2200      	movs	r2, #0
   d55ea:	4611      	mov	r1, r2
   d55ec:	6840      	ldr	r0, [r0, #4]
   d55ee:	f7ff b895 	b.w	d471c <network_get_listen_timeout>

000d55f2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d55f2:	2200      	movs	r2, #0
   d55f4:	6840      	ldr	r0, [r0, #4]
   d55f6:	f7ff b889 	b.w	d470c <network_set_listen_timeout>

000d55fa <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d55fa:	2200      	movs	r2, #0
   d55fc:	f081 0101 	eor.w	r1, r1, #1
   d5600:	6840      	ldr	r0, [r0, #4]
   d5602:	f7ff b873 	b.w	d46ec <network_listen>

000d5606 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5606:	2300      	movs	r3, #0
   d5608:	461a      	mov	r2, r3
   d560a:	4619      	mov	r1, r3
   d560c:	6840      	ldr	r0, [r0, #4]
   d560e:	f7ff b865 	b.w	d46dc <network_off>

000d5612 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5612:	2300      	movs	r3, #0
   d5614:	461a      	mov	r2, r3
   d5616:	4619      	mov	r1, r3
   d5618:	6840      	ldr	r0, [r0, #4]
   d561a:	f7ff b857 	b.w	d46cc <network_on>

000d561e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d561e:	2200      	movs	r2, #0
   d5620:	4611      	mov	r1, r2
   d5622:	6840      	ldr	r0, [r0, #4]
   d5624:	f7ff b83a 	b.w	d469c <network_connecting>

000d5628 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5628:	2200      	movs	r2, #0
   d562a:	2102      	movs	r1, #2
   d562c:	6840      	ldr	r0, [r0, #4]
   d562e:	f7ff b83d 	b.w	d46ac <network_disconnect>

000d5632 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5632:	2300      	movs	r3, #0
   d5634:	461a      	mov	r2, r3
   d5636:	6840      	ldr	r0, [r0, #4]
   d5638:	f7ff b828 	b.w	d468c <network_connect>

000d563c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d563c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d563e:	4c08      	ldr	r4, [pc, #32]	; (d5660 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5640:	2528      	movs	r5, #40	; 0x28
   d5642:	462a      	mov	r2, r5
   d5644:	2100      	movs	r1, #0
   d5646:	4620      	mov	r0, r4
   d5648:	f000 fd5f 	bl	d610a <memset>
        cid = -1;
   d564c:	f04f 33ff 	mov.w	r3, #4294967295
   d5650:	6063      	str	r3, [r4, #4]
   d5652:	4b04      	ldr	r3, [pc, #16]	; (d5664 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5654:	8025      	strh	r5, [r4, #0]
   d5656:	2204      	movs	r2, #4
   d5658:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d565a:	4a03      	ldr	r2, [pc, #12]	; (d5668 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d565c:	601a      	str	r2, [r3, #0]
   d565e:	bd38      	pop	{r3, r4, r5, pc}
   d5660:	2003e4c8 	.word	0x2003e4c8
   d5664:	2003e4c0 	.word	0x2003e4c0
   d5668:	000d6b4c 	.word	0x000d6b4c

000d566c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d566c:	4770      	bx	lr

000d566e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d566e:	7441      	strb	r1, [r0, #17]
   d5670:	4770      	bx	lr

000d5672 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5672:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5674:	7c00      	ldrb	r0, [r0, #16]
   d5676:	f7fe ff45 	bl	d4504 <HAL_USART_Available_Data_For_Write>
}
   d567a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d567e:	bd08      	pop	{r3, pc}

000d5680 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5680:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5682:	7c00      	ldrb	r0, [r0, #16]
   d5684:	f7fe ff16 	bl	d44b4 <HAL_USART_Available_Data>
}
   d5688:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d568c:	bd08      	pop	{r3, pc}

000d568e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d568e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5690:	7c00      	ldrb	r0, [r0, #16]
   d5692:	f7fe ff1f 	bl	d44d4 <HAL_USART_Peek_Data>
}
   d5696:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d569a:	bf28      	it	cs
   d569c:	f04f 30ff 	movcs.w	r0, #4294967295
   d56a0:	bd08      	pop	{r3, pc}

000d56a2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d56a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d56a4:	7c00      	ldrb	r0, [r0, #16]
   d56a6:	f7fe ff0d 	bl	d44c4 <HAL_USART_Read_Data>
}
   d56aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d56ae:	bf28      	it	cs
   d56b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d56b4:	bd08      	pop	{r3, pc}

000d56b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d56b6:	7c00      	ldrb	r0, [r0, #16]
   d56b8:	f7fe bf14 	b.w	d44e4 <HAL_USART_Flush_Data>

000d56bc <_ZN11USARTSerialD0Ev>:
   d56bc:	b510      	push	{r4, lr}
   d56be:	2114      	movs	r1, #20
   d56c0:	4604      	mov	r4, r0
   d56c2:	f000 fac4 	bl	d5c4e <_ZdlPvj>
   d56c6:	4620      	mov	r0, r4
   d56c8:	bd10      	pop	{r4, pc}

000d56ca <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56ca:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56cc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d56ce:	4604      	mov	r4, r0
   d56d0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d56d2:	b925      	cbnz	r5, d56de <_ZN11USARTSerial5writeEh+0x14>
   d56d4:	7c00      	ldrb	r0, [r0, #16]
   d56d6:	f7fe ff15 	bl	d4504 <HAL_USART_Available_Data_For_Write>
   d56da:	2800      	cmp	r0, #0
   d56dc:	dd05      	ble.n	d56ea <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56de:	4631      	mov	r1, r6
   d56e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d56e6:	f7fe bedd 	b.w	d44a4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d56ea:	4628      	mov	r0, r5
   d56ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d56f0:	b510      	push	{r4, lr}
   d56f2:	4604      	mov	r4, r0
   d56f4:	4608      	mov	r0, r1
   d56f6:	4611      	mov	r1, r2
   d56f8:	2200      	movs	r2, #0
   d56fa:	6062      	str	r2, [r4, #4]
   d56fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5700:	60a2      	str	r2, [r4, #8]
   d5702:	4a05      	ldr	r2, [pc, #20]	; (d5718 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5704:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5706:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5708:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d570a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d570c:	461a      	mov	r2, r3
   d570e:	f7fe fec1 	bl	d4494 <HAL_USART_Init>
}
   d5712:	4620      	mov	r0, r4
   d5714:	bd10      	pop	{r4, pc}
   d5716:	bf00      	nop
   d5718:	000d6b80 	.word	0x000d6b80

000d571c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d571c:	7c00      	ldrb	r0, [r0, #16]
   d571e:	f7fe bee9 	b.w	d44f4 <HAL_USART_Is_Enabled>
	...

000d5724 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5726:	4c19      	ldr	r4, [pc, #100]	; (d578c <_Z22__fetch_global_Serial1v+0x68>)
   d5728:	6825      	ldr	r5, [r4, #0]
   d572a:	b94d      	cbnz	r5, d5740 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d572c:	2084      	movs	r0, #132	; 0x84
   d572e:	f7fe fcb2 	bl	d4096 <_Znwj>
   d5732:	4606      	mov	r6, r0
   d5734:	b118      	cbz	r0, d573e <_Z22__fetch_global_Serial1v+0x1a>
   d5736:	2284      	movs	r2, #132	; 0x84
   d5738:	4629      	mov	r1, r5
   d573a:	f000 fce6 	bl	d610a <memset>
   d573e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5740:	4d13      	ldr	r5, [pc, #76]	; (d5790 <_Z22__fetch_global_Serial1v+0x6c>)
   d5742:	682e      	ldr	r6, [r5, #0]
   d5744:	b94e      	cbnz	r6, d575a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5746:	2084      	movs	r0, #132	; 0x84
   d5748:	f7fe fca5 	bl	d4096 <_Znwj>
   d574c:	4607      	mov	r7, r0
   d574e:	b118      	cbz	r0, d5758 <_Z22__fetch_global_Serial1v+0x34>
   d5750:	2284      	movs	r2, #132	; 0x84
   d5752:	4631      	mov	r1, r6
   d5754:	f000 fcd9 	bl	d610a <memset>
   d5758:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d575a:	4f0e      	ldr	r7, [pc, #56]	; (d5794 <_Z22__fetch_global_Serial1v+0x70>)
   d575c:	6839      	ldr	r1, [r7, #0]
   d575e:	f011 0601 	ands.w	r6, r1, #1
   d5762:	d111      	bne.n	d5788 <_Z22__fetch_global_Serial1v+0x64>
   d5764:	4638      	mov	r0, r7
   d5766:	f7fe fc9c 	bl	d40a2 <__cxa_guard_acquire>
   d576a:	b168      	cbz	r0, d5788 <_Z22__fetch_global_Serial1v+0x64>
   d576c:	6822      	ldr	r2, [r4, #0]
   d576e:	682b      	ldr	r3, [r5, #0]
   d5770:	4809      	ldr	r0, [pc, #36]	; (d5798 <_Z22__fetch_global_Serial1v+0x74>)
   d5772:	4631      	mov	r1, r6
   d5774:	f7ff ffbc 	bl	d56f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5778:	4638      	mov	r0, r7
   d577a:	f7fe fc97 	bl	d40ac <__cxa_guard_release>
   d577e:	4a07      	ldr	r2, [pc, #28]	; (d579c <_Z22__fetch_global_Serial1v+0x78>)
   d5780:	4907      	ldr	r1, [pc, #28]	; (d57a0 <_Z22__fetch_global_Serial1v+0x7c>)
   d5782:	4805      	ldr	r0, [pc, #20]	; (d5798 <_Z22__fetch_global_Serial1v+0x74>)
   d5784:	f000 fa5e 	bl	d5c44 <__aeabi_atexit>
#endif
	return serial1;
}
   d5788:	4803      	ldr	r0, [pc, #12]	; (d5798 <_Z22__fetch_global_Serial1v+0x74>)
   d578a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d578c:	2003e50c 	.word	0x2003e50c
   d5790:	2003e504 	.word	0x2003e504
   d5794:	2003e508 	.word	0x2003e508
   d5798:	2003e4f0 	.word	0x2003e4f0
   d579c:	2003e39c 	.word	0x2003e39c
   d57a0:	000d566d 	.word	0x000d566d

000d57a4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d57a4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d57a6:	6883      	ldr	r3, [r0, #8]
   d57a8:	4604      	mov	r4, r0
   d57aa:	b90b      	cbnz	r3, d57b0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d57ac:	f000 fa51 	bl	d5c52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d57b0:	68c3      	ldr	r3, [r0, #12]
   d57b2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d57b4:	68a3      	ldr	r3, [r4, #8]
   d57b6:	b11b      	cbz	r3, d57c0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d57b8:	2203      	movs	r2, #3
   d57ba:	4621      	mov	r1, r4
   d57bc:	4620      	mov	r0, r4
   d57be:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57c0:	4620      	mov	r0, r4
   d57c2:	2110      	movs	r1, #16
}
   d57c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d57c8:	f000 ba41 	b.w	d5c4e <_ZdlPvj>

000d57cc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d57cc:	4770      	bx	lr

000d57ce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d57ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57d0:	4606      	mov	r6, r0
   d57d2:	4615      	mov	r5, r2
   d57d4:	460c      	mov	r4, r1
   d57d6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57d8:	42bc      	cmp	r4, r7
   d57da:	d006      	beq.n	d57ea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d57dc:	6833      	ldr	r3, [r6, #0]
   d57de:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57e2:	689b      	ldr	r3, [r3, #8]
   d57e4:	4630      	mov	r0, r6
   d57e6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57e8:	e7f6      	b.n	d57d8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d57ea:	4628      	mov	r0, r5
   d57ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d57ee:	2200      	movs	r2, #0
   d57f0:	7c00      	ldrb	r0, [r0, #16]
   d57f2:	f7fe be8f 	b.w	d4514 <HAL_I2C_Write_Data>

000d57f6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d57f6:	2100      	movs	r1, #0
   d57f8:	7c00      	ldrb	r0, [r0, #16]
   d57fa:	f7fe be93 	b.w	d4524 <HAL_I2C_Available_Data>

000d57fe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d57fe:	2100      	movs	r1, #0
   d5800:	7c00      	ldrb	r0, [r0, #16]
   d5802:	f7fe be97 	b.w	d4534 <HAL_I2C_Read_Data>

000d5806 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5806:	2100      	movs	r1, #0
   d5808:	7c00      	ldrb	r0, [r0, #16]
   d580a:	f7fe be9b 	b.w	d4544 <HAL_I2C_Peek_Data>

000d580e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d580e:	2100      	movs	r1, #0
   d5810:	7c00      	ldrb	r0, [r0, #16]
   d5812:	f7fe be9f 	b.w	d4554 <HAL_I2C_Flush_Data>

000d5816 <_ZN7TwoWireD0Ev>:
   d5816:	b510      	push	{r4, lr}
   d5818:	2114      	movs	r1, #20
   d581a:	4604      	mov	r4, r0
   d581c:	f000 fa17 	bl	d5c4e <_ZdlPvj>
   d5820:	4620      	mov	r0, r4
   d5822:	bd10      	pop	{r4, pc}

000d5824 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5824:	b510      	push	{r4, lr}
   d5826:	4604      	mov	r4, r0
   d5828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d582c:	4608      	mov	r0, r1
   d582e:	60a3      	str	r3, [r4, #8]
   d5830:	2100      	movs	r1, #0
   d5832:	4b04      	ldr	r3, [pc, #16]	; (d5844 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5834:	7420      	strb	r0, [r4, #16]
   d5836:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5838:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d583a:	f7fe fe9b 	bl	d4574 <HAL_I2C_Init>

}
   d583e:	4620      	mov	r0, r4
   d5840:	bd10      	pop	{r4, pc}
   d5842:	bf00      	nop
   d5844:	000d6bb0 	.word	0x000d6bb0

000d5848 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5848:	2100      	movs	r1, #0
   d584a:	7c00      	ldrb	r0, [r0, #16]
   d584c:	f7fe be8a 	b.w	d4564 <HAL_I2C_Is_Enabled>

000d5850 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5850:	2200      	movs	r2, #0
   d5852:	4611      	mov	r1, r2
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	f7fe bf51 	b.w	d46fc <network_listening>

000d585a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d585a:	2200      	movs	r2, #0
   d585c:	4611      	mov	r1, r2
   d585e:	6840      	ldr	r0, [r0, #4]
   d5860:	f7fe bf5c 	b.w	d471c <network_get_listen_timeout>

000d5864 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5864:	2200      	movs	r2, #0
   d5866:	6840      	ldr	r0, [r0, #4]
   d5868:	f7fe bf50 	b.w	d470c <network_set_listen_timeout>

000d586c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d586c:	2200      	movs	r2, #0
   d586e:	f081 0101 	eor.w	r1, r1, #1
   d5872:	6840      	ldr	r0, [r0, #4]
   d5874:	f7fe bf3a 	b.w	d46ec <network_listen>

000d5878 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5878:	2300      	movs	r3, #0
   d587a:	461a      	mov	r2, r3
   d587c:	2101      	movs	r1, #1
   d587e:	6840      	ldr	r0, [r0, #4]
   d5880:	f7fe bf2c 	b.w	d46dc <network_off>

000d5884 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5884:	2300      	movs	r3, #0
   d5886:	461a      	mov	r2, r3
   d5888:	4619      	mov	r1, r3
   d588a:	6840      	ldr	r0, [r0, #4]
   d588c:	f7fe bf1e 	b.w	d46cc <network_on>

000d5890 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5890:	2200      	movs	r2, #0
   d5892:	4611      	mov	r1, r2
   d5894:	6840      	ldr	r0, [r0, #4]
   d5896:	f7fe bf11 	b.w	d46bc <network_ready>

000d589a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d589a:	2200      	movs	r2, #0
   d589c:	4611      	mov	r1, r2
   d589e:	6840      	ldr	r0, [r0, #4]
   d58a0:	f7fe befc 	b.w	d469c <network_connecting>

000d58a4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58a4:	2200      	movs	r2, #0
   d58a6:	2102      	movs	r1, #2
   d58a8:	6840      	ldr	r0, [r0, #4]
   d58aa:	f7fe beff 	b.w	d46ac <network_disconnect>

000d58ae <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d58ae:	2300      	movs	r3, #0
   d58b0:	461a      	mov	r2, r3
   d58b2:	6840      	ldr	r0, [r0, #4]
   d58b4:	f7fe beea 	b.w	d468c <network_connect>

000d58b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d58b8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58ba:	4605      	mov	r5, r0
   d58bc:	b188      	cbz	r0, d58e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d58be:	6804      	ldr	r4, [r0, #0]
   d58c0:	b14c      	cbz	r4, d58d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d58c2:	68a3      	ldr	r3, [r4, #8]
   d58c4:	b11b      	cbz	r3, d58ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58c6:	2203      	movs	r2, #3
   d58c8:	4621      	mov	r1, r4
   d58ca:	4620      	mov	r0, r4
   d58cc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58ce:	2110      	movs	r1, #16
   d58d0:	4620      	mov	r0, r4
   d58d2:	f000 f9bc 	bl	d5c4e <_ZdlPvj>
   d58d6:	4628      	mov	r0, r5
   d58d8:	2114      	movs	r1, #20
      }
   d58da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d58de:	f000 b9b6 	b.w	d5c4e <_ZdlPvj>
   d58e2:	bd38      	pop	{r3, r4, r5, pc}

000d58e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d58e4:	b110      	cbz	r0, d58ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d58e6:	6803      	ldr	r3, [r0, #0]
   d58e8:	685b      	ldr	r3, [r3, #4]
   d58ea:	4718      	bx	r3
   d58ec:	4770      	bx	lr

000d58ee <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d58ee:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d58f0:	6803      	ldr	r3, [r0, #0]
   d58f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d58f4:	b1bb      	cbz	r3, d5926 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d58f6:	6858      	ldr	r0, [r3, #4]
   d58f8:	f7fe fd9c 	bl	d4434 <os_thread_is_current>
   d58fc:	b978      	cbnz	r0, d591e <_ZN6ThreadD1Ev+0x30>
   d58fe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5900:	7c5a      	ldrb	r2, [r3, #17]
   d5902:	b912      	cbnz	r2, d590a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5904:	6858      	ldr	r0, [r3, #4]
   d5906:	f7fe fd9d 	bl	d4444 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d590a:	6823      	ldr	r3, [r4, #0]
   d590c:	6858      	ldr	r0, [r3, #4]
   d590e:	f7fe fda1 	bl	d4454 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5912:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5914:	2300      	movs	r3, #0
   d5916:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5918:	b128      	cbz	r0, d5926 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d591a:	f7ff ffcd 	bl	d58b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d591e:	6820      	ldr	r0, [r4, #0]
   d5920:	b108      	cbz	r0, d5926 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5922:	f7ff ffc9 	bl	d58b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5926:	4620      	mov	r0, r4
   d5928:	bd10      	pop	{r4, pc}
	...

000d592c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d592c:	b538      	push	{r3, r4, r5, lr}
   d592e:	4b0c      	ldr	r3, [pc, #48]	; (d5960 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5930:	6003      	str	r3, [r0, #0]
   d5932:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5934:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5938:	b108      	cbz	r0, d593e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d593a:	f7fe fbb0 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d593e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5942:	b135      	cbz	r5, d5952 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5944:	4628      	mov	r0, r5
   d5946:	f7ff ffd2 	bl	d58ee <_ZN6ThreadD1Ev>
   d594a:	2104      	movs	r1, #4
   d594c:	4628      	mov	r0, r5
   d594e:	f000 f97e 	bl	d5c4e <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5952:	68a0      	ldr	r0, [r4, #8]
   d5954:	b108      	cbz	r0, d595a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5956:	f7ff ffc5 	bl	d58e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d595a:	4620      	mov	r0, r4
   d595c:	bd38      	pop	{r3, r4, r5, pc}
   d595e:	bf00      	nop
   d5960:	000d6bd8 	.word	0x000d6bd8

000d5964 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5964:	b538      	push	{r3, r4, r5, lr}
   d5966:	4c0e      	ldr	r4, [pc, #56]	; (d59a0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5968:	4b0e      	ldr	r3, [pc, #56]	; (d59a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d596a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d596c:	2500      	movs	r5, #0
   d596e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5970:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5974:	6063      	str	r3, [r4, #4]
   d5976:	60a5      	str	r5, [r4, #8]
   d5978:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d597c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5980:	f7fe fd78 	bl	d4474 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5984:	4b08      	ldr	r3, [pc, #32]	; (d59a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5986:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d598a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d598e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5990:	4620      	mov	r0, r4
   d5992:	4a06      	ldr	r2, [pc, #24]	; (d59ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5994:	4906      	ldr	r1, [pc, #24]	; (d59b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d599a:	f000 b953 	b.w	d5c44 <__aeabi_atexit>
   d599e:	bf00      	nop
   d59a0:	2003e510 	.word	0x2003e510
   d59a4:	000d6c0c 	.word	0x000d6c0c
   d59a8:	000d6bd8 	.word	0x000d6bd8
   d59ac:	2003e39c 	.word	0x2003e39c
   d59b0:	000d592d 	.word	0x000d592d

000d59b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d59b4:	2300      	movs	r3, #0
   d59b6:	461a      	mov	r2, r3
   d59b8:	6840      	ldr	r0, [r0, #4]
   d59ba:	f7fe be67 	b.w	d468c <network_connect>

000d59be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d59be:	2200      	movs	r2, #0
   d59c0:	2102      	movs	r1, #2
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	f7fe be72 	b.w	d46ac <network_disconnect>

000d59c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d59c8:	2200      	movs	r2, #0
   d59ca:	4611      	mov	r1, r2
   d59cc:	6840      	ldr	r0, [r0, #4]
   d59ce:	f7fe be65 	b.w	d469c <network_connecting>

000d59d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d59d2:	2200      	movs	r2, #0
   d59d4:	4611      	mov	r1, r2
   d59d6:	6840      	ldr	r0, [r0, #4]
   d59d8:	f7fe be70 	b.w	d46bc <network_ready>

000d59dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d59dc:	2300      	movs	r3, #0
   d59de:	461a      	mov	r2, r3
   d59e0:	4619      	mov	r1, r3
   d59e2:	6840      	ldr	r0, [r0, #4]
   d59e4:	f7fe be72 	b.w	d46cc <network_on>

000d59e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d59e8:	2300      	movs	r3, #0
   d59ea:	461a      	mov	r2, r3
   d59ec:	4619      	mov	r1, r3
   d59ee:	6840      	ldr	r0, [r0, #4]
   d59f0:	f7fe be74 	b.w	d46dc <network_off>

000d59f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d59f4:	2200      	movs	r2, #0
   d59f6:	f081 0101 	eor.w	r1, r1, #1
   d59fa:	6840      	ldr	r0, [r0, #4]
   d59fc:	f7fe be76 	b.w	d46ec <network_listen>

000d5a00 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a00:	2200      	movs	r2, #0
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	f7fe be82 	b.w	d470c <network_set_listen_timeout>

000d5a08 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a08:	2200      	movs	r2, #0
   d5a0a:	4611      	mov	r1, r2
   d5a0c:	6840      	ldr	r0, [r0, #4]
   d5a0e:	f7fe be85 	b.w	d471c <network_get_listen_timeout>

000d5a12 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a12:	2200      	movs	r2, #0
   d5a14:	4611      	mov	r1, r2
   d5a16:	6840      	ldr	r0, [r0, #4]
   d5a18:	f7fe be70 	b.w	d46fc <network_listening>

000d5a1c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a20:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a22:	b095      	sub	sp, #84	; 0x54
   d5a24:	4616      	mov	r6, r2
   d5a26:	460d      	mov	r5, r1
   d5a28:	4607      	mov	r7, r0
    IPAddress addr;
   d5a2a:	f7ff fd13 	bl	d5454 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5a2e:	4621      	mov	r1, r4
   d5a30:	2220      	movs	r2, #32
   d5a32:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a34:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a36:	f000 fb68 	bl	d610a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a3a:	2340      	movs	r3, #64	; 0x40
   d5a3c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a3e:	4621      	mov	r1, r4
   d5a40:	466b      	mov	r3, sp
   d5a42:	aa0c      	add	r2, sp, #48	; 0x30
   d5a44:	4630      	mov	r0, r6
   d5a46:	f7fe fc95 	bl	d4374 <netdb_getaddrinfo>
    if (!r) {
   d5a4a:	4604      	mov	r4, r0
   d5a4c:	2800      	cmp	r0, #0
   d5a4e:	d144      	bne.n	d5ada <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a50:	4602      	mov	r2, r0
   d5a52:	2101      	movs	r1, #1
   d5a54:	6868      	ldr	r0, [r5, #4]
   d5a56:	f7fe fe31 	bl	d46bc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a5a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a5c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a5e:	4622      	mov	r2, r4
   d5a60:	6868      	ldr	r0, [r5, #4]
   d5a62:	f7fe fe2b 	bl	d46bc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a66:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a68:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5a6a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a6c:	2e00      	cmp	r6, #0
   d5a6e:	d034      	beq.n	d5ada <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5a70:	2900      	cmp	r1, #0
   d5a72:	d132      	bne.n	d5ada <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5a74:	6873      	ldr	r3, [r6, #4]
   d5a76:	2b02      	cmp	r3, #2
   d5a78:	d002      	beq.n	d5a80 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5a7a:	2b0a      	cmp	r3, #10
   d5a7c:	d009      	beq.n	d5a92 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5a7e:	e02a      	b.n	d5ad6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5a80:	f1b8 0f00 	cmp.w	r8, #0
   d5a84:	d027      	beq.n	d5ad6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5a86:	6971      	ldr	r1, [r6, #20]
   d5a88:	4638      	mov	r0, r7
   d5a8a:	3104      	adds	r1, #4
   d5a8c:	f7ff fd0f 	bl	d54ae <_ZN9IPAddressaSEPKh>
   d5a90:	e020      	b.n	d5ad4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a92:	f1b9 0f00 	cmp.w	r9, #0
   d5a96:	d01e      	beq.n	d5ad6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a98:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a9a:	2211      	movs	r2, #17
   d5a9c:	a801      	add	r0, sp, #4
   d5a9e:	f000 fb34 	bl	d610a <memset>
                    a.v = 6;
   d5aa2:	2306      	movs	r3, #6
   d5aa4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5aa8:	ad01      	add	r5, sp, #4
   d5aaa:	f104 0308 	add.w	r3, r4, #8
   d5aae:	3418      	adds	r4, #24
   d5ab0:	6818      	ldr	r0, [r3, #0]
   d5ab2:	6859      	ldr	r1, [r3, #4]
   d5ab4:	462a      	mov	r2, r5
   d5ab6:	c203      	stmia	r2!, {r0, r1}
   d5ab8:	3308      	adds	r3, #8
   d5aba:	42a3      	cmp	r3, r4
   d5abc:	4615      	mov	r5, r2
   d5abe:	d1f7      	bne.n	d5ab0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5ac0:	a901      	add	r1, sp, #4
   d5ac2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ac4:	ad07      	add	r5, sp, #28
   d5ac6:	f7ff fcd3 	bl	d5470 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5acc:	1d3c      	adds	r4, r7, #4
   d5ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ad0:	682b      	ldr	r3, [r5, #0]
   d5ad2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ad4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ad6:	69f6      	ldr	r6, [r6, #28]
   d5ad8:	e7c8      	b.n	d5a6c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ada:	9800      	ldr	r0, [sp, #0]
   d5adc:	f7fe fc42 	bl	d4364 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ae0:	4638      	mov	r0, r7
   d5ae2:	b015      	add	sp, #84	; 0x54
   d5ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ae8:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5aea:	4a03      	ldr	r2, [pc, #12]	; (d5af8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5aec:	601a      	str	r2, [r3, #0]
   d5aee:	2200      	movs	r2, #0
   d5af0:	605a      	str	r2, [r3, #4]
   d5af2:	4770      	bx	lr
   d5af4:	2003e6e4 	.word	0x2003e6e4
   d5af8:	000d6c0c 	.word	0x000d6c0c

000d5afc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5afc:	b510      	push	{r4, lr}
   d5afe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5b00:	480f      	ldr	r0, [pc, #60]	; (d5b40 <pinAvailable+0x44>)
   d5b02:	f7fe fed5 	bl	d48b0 <_ZN8SPIClass9isEnabledEv>
   d5b06:	b128      	cbz	r0, d5b14 <pinAvailable+0x18>
   d5b08:	f1a4 030b 	sub.w	r3, r4, #11
   d5b0c:	2b02      	cmp	r3, #2
   d5b0e:	d801      	bhi.n	d5b14 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5b10:	2000      	movs	r0, #0
   d5b12:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5b14:	f000 f876 	bl	d5c04 <_Z19__fetch_global_Wirev>
   d5b18:	f7ff fe96 	bl	d5848 <_ZN7TwoWire9isEnabledEv>
   d5b1c:	b108      	cbz	r0, d5b22 <pinAvailable+0x26>
   d5b1e:	2c01      	cmp	r4, #1
   d5b20:	d9f6      	bls.n	d5b10 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5b22:	f7ff fdff 	bl	d5724 <_Z22__fetch_global_Serial1v>
   d5b26:	f7ff fdf9 	bl	d571c <_ZN11USARTSerial9isEnabledEv>
   d5b2a:	b118      	cbz	r0, d5b34 <pinAvailable+0x38>
   d5b2c:	f1a4 0309 	sub.w	r3, r4, #9
   d5b30:	2b01      	cmp	r3, #1
   d5b32:	d9ed      	bls.n	d5b10 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5b34:	2c23      	cmp	r4, #35	; 0x23
   d5b36:	bf8c      	ite	hi
   d5b38:	2000      	movhi	r0, #0
   d5b3a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5b3c:	bd10      	pop	{r4, pc}
   d5b3e:	bf00      	nop
   d5b40:	2003e6ec 	.word	0x2003e6ec

000d5b44 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b44:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5b46:	b538      	push	{r3, r4, r5, lr}
   d5b48:	4604      	mov	r4, r0
   d5b4a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b4c:	d80a      	bhi.n	d5b64 <pinMode+0x20>
   d5b4e:	29ff      	cmp	r1, #255	; 0xff
   d5b50:	d008      	beq.n	d5b64 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5b52:	f7ff ffd3 	bl	d5afc <pinAvailable>
   d5b56:	b128      	cbz	r0, d5b64 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5b58:	4629      	mov	r1, r5
   d5b5a:	4620      	mov	r0, r4
}
   d5b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5b60:	f7fe bc18 	b.w	d4394 <HAL_Pin_Mode>
   d5b64:	bd38      	pop	{r3, r4, r5, pc}

000d5b66 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5b66:	b538      	push	{r3, r4, r5, lr}
   d5b68:	4604      	mov	r4, r0
   d5b6a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5b6c:	f7fe fc1a 	bl	d43a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5b70:	28ff      	cmp	r0, #255	; 0xff
   d5b72:	d010      	beq.n	d5b96 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5b74:	2806      	cmp	r0, #6
   d5b76:	d804      	bhi.n	d5b82 <digitalWrite+0x1c>
   d5b78:	234d      	movs	r3, #77	; 0x4d
   d5b7a:	fa23 f000 	lsr.w	r0, r3, r0
   d5b7e:	07c3      	lsls	r3, r0, #31
   d5b80:	d409      	bmi.n	d5b96 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5b82:	4620      	mov	r0, r4
   d5b84:	f7ff ffba 	bl	d5afc <pinAvailable>
   d5b88:	b128      	cbz	r0, d5b96 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5b8a:	4629      	mov	r1, r5
   d5b8c:	4620      	mov	r0, r4
}
   d5b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5b92:	f7fe bc0f 	b.w	d43b4 <HAL_GPIO_Write>
   d5b96:	bd38      	pop	{r3, r4, r5, pc}

000d5b98 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5b98:	b510      	push	{r4, lr}
   d5b9a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5b9c:	f7fe fc02 	bl	d43a4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5ba0:	3804      	subs	r0, #4
   d5ba2:	b2c0      	uxtb	r0, r0
   d5ba4:	2801      	cmp	r0, #1
   d5ba6:	d908      	bls.n	d5bba <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5ba8:	4620      	mov	r0, r4
   d5baa:	f7ff ffa7 	bl	d5afc <pinAvailable>
   d5bae:	b120      	cbz	r0, d5bba <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5bb0:	4620      	mov	r0, r4
}
   d5bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5bb6:	f7fe bc05 	b.w	d43c4 <HAL_GPIO_Read>
}
   d5bba:	2000      	movs	r0, #0
   d5bbc:	bd10      	pop	{r4, pc}
	...

000d5bc0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5bc0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5bc2:	4c0c      	ldr	r4, [pc, #48]	; (d5bf4 <_GLOBAL__sub_I_SPI+0x34>)
   d5bc4:	4e0c      	ldr	r6, [pc, #48]	; (d5bf8 <_GLOBAL__sub_I_SPI+0x38>)
   d5bc6:	4d0d      	ldr	r5, [pc, #52]	; (d5bfc <_GLOBAL__sub_I_SPI+0x3c>)
   d5bc8:	2100      	movs	r1, #0
   d5bca:	4620      	mov	r0, r4
   d5bcc:	f7fe fe5c 	bl	d4888 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5bd0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5bd2:	4c0b      	ldr	r4, [pc, #44]	; (d5c00 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5bd4:	4632      	mov	r2, r6
   d5bd6:	4629      	mov	r1, r5
   d5bd8:	f000 f834 	bl	d5c44 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5bdc:	2101      	movs	r1, #1
   d5bde:	4620      	mov	r0, r4
   d5be0:	f7fe fe52 	bl	d4888 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5be4:	4632      	mov	r2, r6
   d5be6:	4629      	mov	r1, r5
   d5be8:	4620      	mov	r0, r4
   d5bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5bee:	f000 b829 	b.w	d5c44 <__aeabi_atexit>
   d5bf2:	bf00      	nop
   d5bf4:	2003e6ec 	.word	0x2003e6ec
   d5bf8:	2003e39c 	.word	0x2003e39c
   d5bfc:	000d4879 	.word	0x000d4879
   d5c00:	2003e6fc 	.word	0x2003e6fc

000d5c04 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5c04:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5c06:	4d0b      	ldr	r5, [pc, #44]	; (d5c34 <_Z19__fetch_global_Wirev+0x30>)
   d5c08:	6829      	ldr	r1, [r5, #0]
   d5c0a:	f011 0401 	ands.w	r4, r1, #1
   d5c0e:	d10f      	bne.n	d5c30 <_Z19__fetch_global_Wirev+0x2c>
   d5c10:	4628      	mov	r0, r5
   d5c12:	f7fe fa46 	bl	d40a2 <__cxa_guard_acquire>
   d5c16:	b158      	cbz	r0, d5c30 <_Z19__fetch_global_Wirev+0x2c>
   d5c18:	4621      	mov	r1, r4
   d5c1a:	4807      	ldr	r0, [pc, #28]	; (d5c38 <_Z19__fetch_global_Wirev+0x34>)
   d5c1c:	f7ff fe02 	bl	d5824 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5c20:	4628      	mov	r0, r5
   d5c22:	f7fe fa43 	bl	d40ac <__cxa_guard_release>
   d5c26:	4a05      	ldr	r2, [pc, #20]	; (d5c3c <_Z19__fetch_global_Wirev+0x38>)
   d5c28:	4905      	ldr	r1, [pc, #20]	; (d5c40 <_Z19__fetch_global_Wirev+0x3c>)
   d5c2a:	4803      	ldr	r0, [pc, #12]	; (d5c38 <_Z19__fetch_global_Wirev+0x34>)
   d5c2c:	f000 f80a 	bl	d5c44 <__aeabi_atexit>
	return wire;
}
   d5c30:	4801      	ldr	r0, [pc, #4]	; (d5c38 <_Z19__fetch_global_Wirev+0x34>)
   d5c32:	bd38      	pop	{r3, r4, r5, pc}
   d5c34:	2003e710 	.word	0x2003e710
   d5c38:	2003e714 	.word	0x2003e714
   d5c3c:	2003e39c 	.word	0x2003e39c
   d5c40:	000d57cd 	.word	0x000d57cd

000d5c44 <__aeabi_atexit>:
   d5c44:	460b      	mov	r3, r1
   d5c46:	4601      	mov	r1, r0
   d5c48:	4618      	mov	r0, r3
   d5c4a:	f000 b94d 	b.w	d5ee8 <__cxa_atexit>

000d5c4e <_ZdlPvj>:
   d5c4e:	f7fe ba24 	b.w	d409a <_ZdlPv>

000d5c52 <_ZSt25__throw_bad_function_callv>:
   d5c52:	b508      	push	{r3, lr}
   d5c54:	f7fe fdc2 	bl	d47dc <abort>

000d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5c58:	4b18      	ldr	r3, [pc, #96]	; (d5cbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5c5a:	681a      	ldr	r2, [r3, #0]
   d5c5c:	07d1      	lsls	r1, r2, #31
   d5c5e:	bf5c      	itt	pl
   d5c60:	2201      	movpl	r2, #1
   d5c62:	601a      	strpl	r2, [r3, #0]
   d5c64:	4b16      	ldr	r3, [pc, #88]	; (d5cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5c66:	681a      	ldr	r2, [r3, #0]
   d5c68:	07d2      	lsls	r2, r2, #31
   d5c6a:	bf5c      	itt	pl
   d5c6c:	2201      	movpl	r2, #1
   d5c6e:	601a      	strpl	r2, [r3, #0]
   d5c70:	4b14      	ldr	r3, [pc, #80]	; (d5cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5c72:	681a      	ldr	r2, [r3, #0]
   d5c74:	07d0      	lsls	r0, r2, #31
   d5c76:	bf5c      	itt	pl
   d5c78:	2201      	movpl	r2, #1
   d5c7a:	601a      	strpl	r2, [r3, #0]
   d5c7c:	4b12      	ldr	r3, [pc, #72]	; (d5cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5c7e:	681a      	ldr	r2, [r3, #0]
   d5c80:	07d1      	lsls	r1, r2, #31
   d5c82:	bf5c      	itt	pl
   d5c84:	2201      	movpl	r2, #1
   d5c86:	601a      	strpl	r2, [r3, #0]
   d5c88:	4b10      	ldr	r3, [pc, #64]	; (d5ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5c8a:	681a      	ldr	r2, [r3, #0]
   d5c8c:	07d2      	lsls	r2, r2, #31
   d5c8e:	bf5c      	itt	pl
   d5c90:	2201      	movpl	r2, #1
   d5c92:	601a      	strpl	r2, [r3, #0]
   d5c94:	4b0e      	ldr	r3, [pc, #56]	; (d5cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5c96:	681a      	ldr	r2, [r3, #0]
   d5c98:	07d0      	lsls	r0, r2, #31
   d5c9a:	bf5c      	itt	pl
   d5c9c:	2201      	movpl	r2, #1
   d5c9e:	601a      	strpl	r2, [r3, #0]
   d5ca0:	4b0c      	ldr	r3, [pc, #48]	; (d5cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	07d1      	lsls	r1, r2, #31
   d5ca6:	bf5c      	itt	pl
   d5ca8:	2201      	movpl	r2, #1
   d5caa:	601a      	strpl	r2, [r3, #0]
   d5cac:	4b0a      	ldr	r3, [pc, #40]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	07d2      	lsls	r2, r2, #31
   d5cb2:	bf5c      	itt	pl
   d5cb4:	2201      	movpl	r2, #1
   d5cb6:	601a      	strpl	r2, [r3, #0]
   d5cb8:	4770      	bx	lr
   d5cba:	bf00      	nop
   d5cbc:	2003e744 	.word	0x2003e744
   d5cc0:	2003e740 	.word	0x2003e740
   d5cc4:	2003e73c 	.word	0x2003e73c
   d5cc8:	2003e738 	.word	0x2003e738
   d5ccc:	2003e734 	.word	0x2003e734
   d5cd0:	2003e730 	.word	0x2003e730
   d5cd4:	2003e72c 	.word	0x2003e72c
   d5cd8:	2003e728 	.word	0x2003e728

000d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5cdc:	4b24      	ldr	r3, [pc, #144]	; (d5d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5cde:	681a      	ldr	r2, [r3, #0]
   d5ce0:	07d0      	lsls	r0, r2, #31
   d5ce2:	bf5c      	itt	pl
   d5ce4:	2201      	movpl	r2, #1
   d5ce6:	601a      	strpl	r2, [r3, #0]
   d5ce8:	4b22      	ldr	r3, [pc, #136]	; (d5d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5cea:	681a      	ldr	r2, [r3, #0]
   d5cec:	07d1      	lsls	r1, r2, #31
   d5cee:	bf5c      	itt	pl
   d5cf0:	2201      	movpl	r2, #1
   d5cf2:	601a      	strpl	r2, [r3, #0]
   d5cf4:	4b20      	ldr	r3, [pc, #128]	; (d5d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5cf6:	681a      	ldr	r2, [r3, #0]
   d5cf8:	07d2      	lsls	r2, r2, #31
   d5cfa:	bf5c      	itt	pl
   d5cfc:	2201      	movpl	r2, #1
   d5cfe:	601a      	strpl	r2, [r3, #0]
   d5d00:	4b1e      	ldr	r3, [pc, #120]	; (d5d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5d02:	681a      	ldr	r2, [r3, #0]
   d5d04:	07d0      	lsls	r0, r2, #31
   d5d06:	bf5c      	itt	pl
   d5d08:	2201      	movpl	r2, #1
   d5d0a:	601a      	strpl	r2, [r3, #0]
   d5d0c:	4b1c      	ldr	r3, [pc, #112]	; (d5d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5d0e:	681a      	ldr	r2, [r3, #0]
   d5d10:	07d1      	lsls	r1, r2, #31
   d5d12:	bf5c      	itt	pl
   d5d14:	2201      	movpl	r2, #1
   d5d16:	601a      	strpl	r2, [r3, #0]
   d5d18:	4b1a      	ldr	r3, [pc, #104]	; (d5d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5d1a:	681a      	ldr	r2, [r3, #0]
   d5d1c:	07d2      	lsls	r2, r2, #31
   d5d1e:	bf5c      	itt	pl
   d5d20:	2201      	movpl	r2, #1
   d5d22:	601a      	strpl	r2, [r3, #0]
   d5d24:	4b18      	ldr	r3, [pc, #96]	; (d5d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5d26:	681a      	ldr	r2, [r3, #0]
   d5d28:	07d0      	lsls	r0, r2, #31
   d5d2a:	bf5c      	itt	pl
   d5d2c:	2201      	movpl	r2, #1
   d5d2e:	601a      	strpl	r2, [r3, #0]
   d5d30:	4b16      	ldr	r3, [pc, #88]	; (d5d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5d32:	681a      	ldr	r2, [r3, #0]
   d5d34:	07d1      	lsls	r1, r2, #31
   d5d36:	bf5c      	itt	pl
   d5d38:	2201      	movpl	r2, #1
   d5d3a:	601a      	strpl	r2, [r3, #0]
   d5d3c:	4b14      	ldr	r3, [pc, #80]	; (d5d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5d3e:	681a      	ldr	r2, [r3, #0]
   d5d40:	07d2      	lsls	r2, r2, #31
   d5d42:	bf5c      	itt	pl
   d5d44:	2201      	movpl	r2, #1
   d5d46:	601a      	strpl	r2, [r3, #0]
   d5d48:	4b12      	ldr	r3, [pc, #72]	; (d5d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5d4a:	681a      	ldr	r2, [r3, #0]
   d5d4c:	07d0      	lsls	r0, r2, #31
   d5d4e:	bf5c      	itt	pl
   d5d50:	2201      	movpl	r2, #1
   d5d52:	601a      	strpl	r2, [r3, #0]
   d5d54:	4b10      	ldr	r3, [pc, #64]	; (d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5d56:	681a      	ldr	r2, [r3, #0]
   d5d58:	07d1      	lsls	r1, r2, #31
   d5d5a:	bf5c      	itt	pl
   d5d5c:	2201      	movpl	r2, #1
   d5d5e:	601a      	strpl	r2, [r3, #0]
   d5d60:	4b0e      	ldr	r3, [pc, #56]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5d62:	681a      	ldr	r2, [r3, #0]
   d5d64:	07d2      	lsls	r2, r2, #31
   d5d66:	bf5c      	itt	pl
   d5d68:	2201      	movpl	r2, #1
   d5d6a:	601a      	strpl	r2, [r3, #0]
   d5d6c:	4770      	bx	lr
   d5d6e:	bf00      	nop
   d5d70:	2003e774 	.word	0x2003e774
   d5d74:	2003e770 	.word	0x2003e770
   d5d78:	2003e76c 	.word	0x2003e76c
   d5d7c:	2003e768 	.word	0x2003e768
   d5d80:	2003e764 	.word	0x2003e764
   d5d84:	2003e760 	.word	0x2003e760
   d5d88:	2003e75c 	.word	0x2003e75c
   d5d8c:	2003e758 	.word	0x2003e758
   d5d90:	2003e754 	.word	0x2003e754
   d5d94:	2003e750 	.word	0x2003e750
   d5d98:	2003e74c 	.word	0x2003e74c
   d5d9c:	2003e748 	.word	0x2003e748

000d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5da0:	4b24      	ldr	r3, [pc, #144]	; (d5e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5da2:	681a      	ldr	r2, [r3, #0]
   d5da4:	07d0      	lsls	r0, r2, #31
   d5da6:	bf5c      	itt	pl
   d5da8:	2201      	movpl	r2, #1
   d5daa:	601a      	strpl	r2, [r3, #0]
   d5dac:	4b22      	ldr	r3, [pc, #136]	; (d5e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5dae:	681a      	ldr	r2, [r3, #0]
   d5db0:	07d1      	lsls	r1, r2, #31
   d5db2:	bf5c      	itt	pl
   d5db4:	2201      	movpl	r2, #1
   d5db6:	601a      	strpl	r2, [r3, #0]
   d5db8:	4b20      	ldr	r3, [pc, #128]	; (d5e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5dba:	681a      	ldr	r2, [r3, #0]
   d5dbc:	07d2      	lsls	r2, r2, #31
   d5dbe:	bf5c      	itt	pl
   d5dc0:	2201      	movpl	r2, #1
   d5dc2:	601a      	strpl	r2, [r3, #0]
   d5dc4:	4b1e      	ldr	r3, [pc, #120]	; (d5e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5dc6:	681a      	ldr	r2, [r3, #0]
   d5dc8:	07d0      	lsls	r0, r2, #31
   d5dca:	bf5c      	itt	pl
   d5dcc:	2201      	movpl	r2, #1
   d5dce:	601a      	strpl	r2, [r3, #0]
   d5dd0:	4b1c      	ldr	r3, [pc, #112]	; (d5e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5dd2:	681a      	ldr	r2, [r3, #0]
   d5dd4:	07d1      	lsls	r1, r2, #31
   d5dd6:	bf5c      	itt	pl
   d5dd8:	2201      	movpl	r2, #1
   d5dda:	601a      	strpl	r2, [r3, #0]
   d5ddc:	4b1a      	ldr	r3, [pc, #104]	; (d5e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5dde:	681a      	ldr	r2, [r3, #0]
   d5de0:	07d2      	lsls	r2, r2, #31
   d5de2:	bf5c      	itt	pl
   d5de4:	2201      	movpl	r2, #1
   d5de6:	601a      	strpl	r2, [r3, #0]
   d5de8:	4b18      	ldr	r3, [pc, #96]	; (d5e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5dea:	681a      	ldr	r2, [r3, #0]
   d5dec:	07d0      	lsls	r0, r2, #31
   d5dee:	bf5c      	itt	pl
   d5df0:	2201      	movpl	r2, #1
   d5df2:	601a      	strpl	r2, [r3, #0]
   d5df4:	4b16      	ldr	r3, [pc, #88]	; (d5e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5df6:	681a      	ldr	r2, [r3, #0]
   d5df8:	07d1      	lsls	r1, r2, #31
   d5dfa:	bf5c      	itt	pl
   d5dfc:	2201      	movpl	r2, #1
   d5dfe:	601a      	strpl	r2, [r3, #0]
   d5e00:	4b14      	ldr	r3, [pc, #80]	; (d5e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5e02:	681a      	ldr	r2, [r3, #0]
   d5e04:	07d2      	lsls	r2, r2, #31
   d5e06:	bf5c      	itt	pl
   d5e08:	2201      	movpl	r2, #1
   d5e0a:	601a      	strpl	r2, [r3, #0]
   d5e0c:	4b12      	ldr	r3, [pc, #72]	; (d5e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5e0e:	681a      	ldr	r2, [r3, #0]
   d5e10:	07d0      	lsls	r0, r2, #31
   d5e12:	bf5c      	itt	pl
   d5e14:	2201      	movpl	r2, #1
   d5e16:	601a      	strpl	r2, [r3, #0]
   d5e18:	4b10      	ldr	r3, [pc, #64]	; (d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5e1a:	681a      	ldr	r2, [r3, #0]
   d5e1c:	07d1      	lsls	r1, r2, #31
   d5e1e:	bf5c      	itt	pl
   d5e20:	2201      	movpl	r2, #1
   d5e22:	601a      	strpl	r2, [r3, #0]
   d5e24:	4b0e      	ldr	r3, [pc, #56]	; (d5e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5e26:	681a      	ldr	r2, [r3, #0]
   d5e28:	07d2      	lsls	r2, r2, #31
   d5e2a:	bf5c      	itt	pl
   d5e2c:	2201      	movpl	r2, #1
   d5e2e:	601a      	strpl	r2, [r3, #0]
   d5e30:	4770      	bx	lr
   d5e32:	bf00      	nop
   d5e34:	2003e7a4 	.word	0x2003e7a4
   d5e38:	2003e7a0 	.word	0x2003e7a0
   d5e3c:	2003e79c 	.word	0x2003e79c
   d5e40:	2003e798 	.word	0x2003e798
   d5e44:	2003e794 	.word	0x2003e794
   d5e48:	2003e790 	.word	0x2003e790
   d5e4c:	2003e78c 	.word	0x2003e78c
   d5e50:	2003e788 	.word	0x2003e788
   d5e54:	2003e784 	.word	0x2003e784
   d5e58:	2003e780 	.word	0x2003e780
   d5e5c:	2003e77c 	.word	0x2003e77c
   d5e60:	2003e778 	.word	0x2003e778

000d5e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e64:	4b18      	ldr	r3, [pc, #96]	; (d5ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e66:	681a      	ldr	r2, [r3, #0]
   d5e68:	07d1      	lsls	r1, r2, #31
   d5e6a:	bf5c      	itt	pl
   d5e6c:	2201      	movpl	r2, #1
   d5e6e:	601a      	strpl	r2, [r3, #0]
   d5e70:	4b16      	ldr	r3, [pc, #88]	; (d5ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e72:	681a      	ldr	r2, [r3, #0]
   d5e74:	07d2      	lsls	r2, r2, #31
   d5e76:	bf5c      	itt	pl
   d5e78:	2201      	movpl	r2, #1
   d5e7a:	601a      	strpl	r2, [r3, #0]
   d5e7c:	4b14      	ldr	r3, [pc, #80]	; (d5ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e7e:	681a      	ldr	r2, [r3, #0]
   d5e80:	07d0      	lsls	r0, r2, #31
   d5e82:	bf5c      	itt	pl
   d5e84:	2201      	movpl	r2, #1
   d5e86:	601a      	strpl	r2, [r3, #0]
   d5e88:	4b12      	ldr	r3, [pc, #72]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e8a:	681a      	ldr	r2, [r3, #0]
   d5e8c:	07d1      	lsls	r1, r2, #31
   d5e8e:	bf5c      	itt	pl
   d5e90:	2201      	movpl	r2, #1
   d5e92:	601a      	strpl	r2, [r3, #0]
   d5e94:	4b10      	ldr	r3, [pc, #64]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e96:	681a      	ldr	r2, [r3, #0]
   d5e98:	07d2      	lsls	r2, r2, #31
   d5e9a:	bf5c      	itt	pl
   d5e9c:	2201      	movpl	r2, #1
   d5e9e:	601a      	strpl	r2, [r3, #0]
   d5ea0:	4b0e      	ldr	r3, [pc, #56]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5ea2:	681a      	ldr	r2, [r3, #0]
   d5ea4:	07d0      	lsls	r0, r2, #31
   d5ea6:	bf5c      	itt	pl
   d5ea8:	2201      	movpl	r2, #1
   d5eaa:	601a      	strpl	r2, [r3, #0]
   d5eac:	4b0c      	ldr	r3, [pc, #48]	; (d5ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5eae:	681a      	ldr	r2, [r3, #0]
   d5eb0:	07d1      	lsls	r1, r2, #31
   d5eb2:	bf5c      	itt	pl
   d5eb4:	2201      	movpl	r2, #1
   d5eb6:	601a      	strpl	r2, [r3, #0]
   d5eb8:	4b0a      	ldr	r3, [pc, #40]	; (d5ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5eba:	681a      	ldr	r2, [r3, #0]
   d5ebc:	07d2      	lsls	r2, r2, #31
   d5ebe:	bf5c      	itt	pl
   d5ec0:	2201      	movpl	r2, #1
   d5ec2:	601a      	strpl	r2, [r3, #0]
   d5ec4:	4770      	bx	lr
   d5ec6:	bf00      	nop
   d5ec8:	2003e7c4 	.word	0x2003e7c4
   d5ecc:	2003e7c0 	.word	0x2003e7c0
   d5ed0:	2003e7bc 	.word	0x2003e7bc
   d5ed4:	2003e7b8 	.word	0x2003e7b8
   d5ed8:	2003e7b4 	.word	0x2003e7b4
   d5edc:	2003e7b0 	.word	0x2003e7b0
   d5ee0:	2003e7ac 	.word	0x2003e7ac
   d5ee4:	2003e7a8 	.word	0x2003e7a8

000d5ee8 <__cxa_atexit>:
   d5ee8:	b510      	push	{r4, lr}
   d5eea:	4c05      	ldr	r4, [pc, #20]	; (d5f00 <__cxa_atexit+0x18>)
   d5eec:	4613      	mov	r3, r2
   d5eee:	b12c      	cbz	r4, d5efc <__cxa_atexit+0x14>
   d5ef0:	460a      	mov	r2, r1
   d5ef2:	4601      	mov	r1, r0
   d5ef4:	2002      	movs	r0, #2
   d5ef6:	f3af 8000 	nop.w
   d5efa:	bd10      	pop	{r4, pc}
   d5efc:	4620      	mov	r0, r4
   d5efe:	bd10      	pop	{r4, pc}
   d5f00:	00000000 	.word	0x00000000

000d5f04 <localtime>:
   d5f04:	b538      	push	{r3, r4, r5, lr}
   d5f06:	4b07      	ldr	r3, [pc, #28]	; (d5f24 <localtime+0x20>)
   d5f08:	681c      	ldr	r4, [r3, #0]
   d5f0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5f0c:	4605      	mov	r5, r0
   d5f0e:	b91b      	cbnz	r3, d5f18 <localtime+0x14>
   d5f10:	2024      	movs	r0, #36	; 0x24
   d5f12:	f7fe fc43 	bl	d479c <malloc>
   d5f16:	63e0      	str	r0, [r4, #60]	; 0x3c
   d5f18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5f1a:	4628      	mov	r0, r5
   d5f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5f20:	f000 b802 	b.w	d5f28 <localtime_r>
   d5f24:	2003e34c 	.word	0x2003e34c

000d5f28 <localtime_r>:
   d5f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f2c:	460c      	mov	r4, r1
   d5f2e:	4680      	mov	r8, r0
   d5f30:	f000 fc72 	bl	d6818 <__gettzinfo>
   d5f34:	4621      	mov	r1, r4
   d5f36:	4607      	mov	r7, r0
   d5f38:	4640      	mov	r0, r8
   d5f3a:	f000 fc71 	bl	d6820 <gmtime_r>
   d5f3e:	6946      	ldr	r6, [r0, #20]
   d5f40:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d5f44:	07b3      	lsls	r3, r6, #30
   d5f46:	4604      	mov	r4, r0
   d5f48:	d105      	bne.n	d5f56 <localtime_r+0x2e>
   d5f4a:	2264      	movs	r2, #100	; 0x64
   d5f4c:	fb96 f3f2 	sdiv	r3, r6, r2
   d5f50:	fb02 6313 	mls	r3, r2, r3, r6
   d5f54:	b94b      	cbnz	r3, d5f6a <localtime_r+0x42>
   d5f56:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d5f5a:	fb96 f3f5 	sdiv	r3, r6, r5
   d5f5e:	fb05 6513 	mls	r5, r5, r3, r6
   d5f62:	fab5 f385 	clz	r3, r5
   d5f66:	095b      	lsrs	r3, r3, #5
   d5f68:	e000      	b.n	d5f6c <localtime_r+0x44>
   d5f6a:	2301      	movs	r3, #1
   d5f6c:	4a5f      	ldr	r2, [pc, #380]	; (d60ec <localtime_r+0x1c4>)
   d5f6e:	2530      	movs	r5, #48	; 0x30
   d5f70:	fb05 2503 	mla	r5, r5, r3, r2
   d5f74:	f000 fa84 	bl	d6480 <__tz_lock>
   d5f78:	f000 fa84 	bl	d6484 <_tzset_unlocked>
   d5f7c:	4b5c      	ldr	r3, [pc, #368]	; (d60f0 <localtime_r+0x1c8>)
   d5f7e:	681b      	ldr	r3, [r3, #0]
   d5f80:	b1f3      	cbz	r3, d5fc0 <localtime_r+0x98>
   d5f82:	687b      	ldr	r3, [r7, #4]
   d5f84:	429e      	cmp	r6, r3
   d5f86:	d105      	bne.n	d5f94 <localtime_r+0x6c>
   d5f88:	6839      	ldr	r1, [r7, #0]
   d5f8a:	f8d8 3000 	ldr.w	r3, [r8]
   d5f8e:	69fa      	ldr	r2, [r7, #28]
   d5f90:	b941      	cbnz	r1, d5fa4 <localtime_r+0x7c>
   d5f92:	e00a      	b.n	d5faa <localtime_r+0x82>
   d5f94:	4630      	mov	r0, r6
   d5f96:	f000 f9cb 	bl	d6330 <__tzcalc_limits>
   d5f9a:	2800      	cmp	r0, #0
   d5f9c:	d1f4      	bne.n	d5f88 <localtime_r+0x60>
   d5f9e:	f04f 33ff 	mov.w	r3, #4294967295
   d5fa2:	e00d      	b.n	d5fc0 <localtime_r+0x98>
   d5fa4:	4293      	cmp	r3, r2
   d5fa6:	db08      	blt.n	d5fba <localtime_r+0x92>
   d5fa8:	e001      	b.n	d5fae <localtime_r+0x86>
   d5faa:	4293      	cmp	r3, r2
   d5fac:	da07      	bge.n	d5fbe <localtime_r+0x96>
   d5fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d5fb0:	4293      	cmp	r3, r2
   d5fb2:	bfac      	ite	ge
   d5fb4:	2300      	movge	r3, #0
   d5fb6:	2301      	movlt	r3, #1
   d5fb8:	e002      	b.n	d5fc0 <localtime_r+0x98>
   d5fba:	2300      	movs	r3, #0
   d5fbc:	e000      	b.n	d5fc0 <localtime_r+0x98>
   d5fbe:	2301      	movs	r3, #1
   d5fc0:	6223      	str	r3, [r4, #32]
   d5fc2:	6a23      	ldr	r3, [r4, #32]
   d5fc4:	2b01      	cmp	r3, #1
   d5fc6:	bf0c      	ite	eq
   d5fc8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d5fca:	6a39      	ldrne	r1, [r7, #32]
   d5fcc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d5fd0:	203c      	movs	r0, #60	; 0x3c
   d5fd2:	fb91 f6f3 	sdiv	r6, r1, r3
   d5fd6:	fb03 1316 	mls	r3, r3, r6, r1
   d5fda:	6861      	ldr	r1, [r4, #4]
   d5fdc:	fb93 f2f0 	sdiv	r2, r3, r0
   d5fe0:	fb00 3012 	mls	r0, r0, r2, r3
   d5fe4:	6823      	ldr	r3, [r4, #0]
   d5fe6:	1a89      	subs	r1, r1, r2
   d5fe8:	68a2      	ldr	r2, [r4, #8]
   d5fea:	6061      	str	r1, [r4, #4]
   d5fec:	1a1b      	subs	r3, r3, r0
   d5fee:	1b92      	subs	r2, r2, r6
   d5ff0:	2b3b      	cmp	r3, #59	; 0x3b
   d5ff2:	6023      	str	r3, [r4, #0]
   d5ff4:	60a2      	str	r2, [r4, #8]
   d5ff6:	dd03      	ble.n	d6000 <localtime_r+0xd8>
   d5ff8:	3101      	adds	r1, #1
   d5ffa:	6061      	str	r1, [r4, #4]
   d5ffc:	3b3c      	subs	r3, #60	; 0x3c
   d5ffe:	e004      	b.n	d600a <localtime_r+0xe2>
   d6000:	2b00      	cmp	r3, #0
   d6002:	da03      	bge.n	d600c <localtime_r+0xe4>
   d6004:	3901      	subs	r1, #1
   d6006:	6061      	str	r1, [r4, #4]
   d6008:	333c      	adds	r3, #60	; 0x3c
   d600a:	6023      	str	r3, [r4, #0]
   d600c:	6863      	ldr	r3, [r4, #4]
   d600e:	2b3b      	cmp	r3, #59	; 0x3b
   d6010:	dd03      	ble.n	d601a <localtime_r+0xf2>
   d6012:	3201      	adds	r2, #1
   d6014:	60a2      	str	r2, [r4, #8]
   d6016:	3b3c      	subs	r3, #60	; 0x3c
   d6018:	e004      	b.n	d6024 <localtime_r+0xfc>
   d601a:	2b00      	cmp	r3, #0
   d601c:	da03      	bge.n	d6026 <localtime_r+0xfe>
   d601e:	3a01      	subs	r2, #1
   d6020:	60a2      	str	r2, [r4, #8]
   d6022:	333c      	adds	r3, #60	; 0x3c
   d6024:	6063      	str	r3, [r4, #4]
   d6026:	68a3      	ldr	r3, [r4, #8]
   d6028:	2b17      	cmp	r3, #23
   d602a:	dd22      	ble.n	d6072 <localtime_r+0x14a>
   d602c:	69e2      	ldr	r2, [r4, #28]
   d602e:	3201      	adds	r2, #1
   d6030:	61e2      	str	r2, [r4, #28]
   d6032:	69a2      	ldr	r2, [r4, #24]
   d6034:	3201      	adds	r2, #1
   d6036:	2a06      	cmp	r2, #6
   d6038:	bfc8      	it	gt
   d603a:	2200      	movgt	r2, #0
   d603c:	61a2      	str	r2, [r4, #24]
   d603e:	68e2      	ldr	r2, [r4, #12]
   d6040:	3b18      	subs	r3, #24
   d6042:	3201      	adds	r2, #1
   d6044:	60a3      	str	r3, [r4, #8]
   d6046:	6923      	ldr	r3, [r4, #16]
   d6048:	60e2      	str	r2, [r4, #12]
   d604a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d604e:	428a      	cmp	r2, r1
   d6050:	dd46      	ble.n	d60e0 <localtime_r+0x1b8>
   d6052:	3301      	adds	r3, #1
   d6054:	2b0c      	cmp	r3, #12
   d6056:	bf0c      	ite	eq
   d6058:	6963      	ldreq	r3, [r4, #20]
   d605a:	6123      	strne	r3, [r4, #16]
   d605c:	eba2 0201 	sub.w	r2, r2, r1
   d6060:	60e2      	str	r2, [r4, #12]
   d6062:	bf01      	itttt	eq
   d6064:	3301      	addeq	r3, #1
   d6066:	2200      	moveq	r2, #0
   d6068:	6122      	streq	r2, [r4, #16]
   d606a:	6163      	streq	r3, [r4, #20]
   d606c:	bf08      	it	eq
   d606e:	61e2      	streq	r2, [r4, #28]
   d6070:	e036      	b.n	d60e0 <localtime_r+0x1b8>
   d6072:	2b00      	cmp	r3, #0
   d6074:	da34      	bge.n	d60e0 <localtime_r+0x1b8>
   d6076:	69e2      	ldr	r2, [r4, #28]
   d6078:	3a01      	subs	r2, #1
   d607a:	61e2      	str	r2, [r4, #28]
   d607c:	69a2      	ldr	r2, [r4, #24]
   d607e:	3a01      	subs	r2, #1
   d6080:	bf48      	it	mi
   d6082:	2206      	movmi	r2, #6
   d6084:	61a2      	str	r2, [r4, #24]
   d6086:	68e2      	ldr	r2, [r4, #12]
   d6088:	3318      	adds	r3, #24
   d608a:	3a01      	subs	r2, #1
   d608c:	60e2      	str	r2, [r4, #12]
   d608e:	60a3      	str	r3, [r4, #8]
   d6090:	bb32      	cbnz	r2, d60e0 <localtime_r+0x1b8>
   d6092:	6923      	ldr	r3, [r4, #16]
   d6094:	3b01      	subs	r3, #1
   d6096:	d401      	bmi.n	d609c <localtime_r+0x174>
   d6098:	6123      	str	r3, [r4, #16]
   d609a:	e01d      	b.n	d60d8 <localtime_r+0x1b0>
   d609c:	230b      	movs	r3, #11
   d609e:	6123      	str	r3, [r4, #16]
   d60a0:	6963      	ldr	r3, [r4, #20]
   d60a2:	1e5a      	subs	r2, r3, #1
   d60a4:	f012 0f03 	tst.w	r2, #3
   d60a8:	6162      	str	r2, [r4, #20]
   d60aa:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d60ae:	d105      	bne.n	d60bc <localtime_r+0x194>
   d60b0:	2164      	movs	r1, #100	; 0x64
   d60b2:	fb93 f2f1 	sdiv	r2, r3, r1
   d60b6:	fb01 3212 	mls	r2, r1, r2, r3
   d60ba:	b94a      	cbnz	r2, d60d0 <localtime_r+0x1a8>
   d60bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d60c0:	fb93 f2f1 	sdiv	r2, r3, r1
   d60c4:	fb01 3312 	mls	r3, r1, r2, r3
   d60c8:	fab3 f383 	clz	r3, r3
   d60cc:	095b      	lsrs	r3, r3, #5
   d60ce:	e000      	b.n	d60d2 <localtime_r+0x1aa>
   d60d0:	2301      	movs	r3, #1
   d60d2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d60d6:	61e3      	str	r3, [r4, #28]
   d60d8:	6923      	ldr	r3, [r4, #16]
   d60da:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d60de:	60e3      	str	r3, [r4, #12]
   d60e0:	f000 f9cf 	bl	d6482 <__tz_unlock>
   d60e4:	4620      	mov	r0, r4
   d60e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d60ea:	bf00      	nop
   d60ec:	000d6da0 	.word	0x000d6da0
   d60f0:	2003e7e4 	.word	0x2003e7e4

000d60f4 <memcpy>:
   d60f4:	b510      	push	{r4, lr}
   d60f6:	1e43      	subs	r3, r0, #1
   d60f8:	440a      	add	r2, r1
   d60fa:	4291      	cmp	r1, r2
   d60fc:	d004      	beq.n	d6108 <memcpy+0x14>
   d60fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6102:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6106:	e7f8      	b.n	d60fa <memcpy+0x6>
   d6108:	bd10      	pop	{r4, pc}

000d610a <memset>:
   d610a:	4402      	add	r2, r0
   d610c:	4603      	mov	r3, r0
   d610e:	4293      	cmp	r3, r2
   d6110:	d002      	beq.n	d6118 <memset+0xe>
   d6112:	f803 1b01 	strb.w	r1, [r3], #1
   d6116:	e7fa      	b.n	d610e <memset+0x4>
   d6118:	4770      	bx	lr
	...

000d611c <srand>:
   d611c:	b538      	push	{r3, r4, r5, lr}
   d611e:	4b12      	ldr	r3, [pc, #72]	; (d6168 <srand+0x4c>)
   d6120:	681c      	ldr	r4, [r3, #0]
   d6122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6124:	4605      	mov	r5, r0
   d6126:	b9d3      	cbnz	r3, d615e <srand+0x42>
   d6128:	2018      	movs	r0, #24
   d612a:	f7fe fb37 	bl	d479c <malloc>
   d612e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6132:	63a0      	str	r0, [r4, #56]	; 0x38
   d6134:	8003      	strh	r3, [r0, #0]
   d6136:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d613a:	8043      	strh	r3, [r0, #2]
   d613c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6140:	8083      	strh	r3, [r0, #4]
   d6142:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6146:	80c3      	strh	r3, [r0, #6]
   d6148:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d614c:	8103      	strh	r3, [r0, #8]
   d614e:	2305      	movs	r3, #5
   d6150:	8143      	strh	r3, [r0, #10]
   d6152:	230b      	movs	r3, #11
   d6154:	8183      	strh	r3, [r0, #12]
   d6156:	2201      	movs	r2, #1
   d6158:	2300      	movs	r3, #0
   d615a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d615e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6160:	2200      	movs	r2, #0
   d6162:	611d      	str	r5, [r3, #16]
   d6164:	615a      	str	r2, [r3, #20]
   d6166:	bd38      	pop	{r3, r4, r5, pc}
   d6168:	2003e34c 	.word	0x2003e34c

000d616c <strcat>:
   d616c:	b510      	push	{r4, lr}
   d616e:	4602      	mov	r2, r0
   d6170:	4613      	mov	r3, r2
   d6172:	3201      	adds	r2, #1
   d6174:	781c      	ldrb	r4, [r3, #0]
   d6176:	2c00      	cmp	r4, #0
   d6178:	d1fa      	bne.n	d6170 <strcat+0x4>
   d617a:	3b01      	subs	r3, #1
   d617c:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6180:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6184:	2a00      	cmp	r2, #0
   d6186:	d1f9      	bne.n	d617c <strcat+0x10>
   d6188:	bd10      	pop	{r4, pc}

000d618a <strcmp>:
   d618a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d618e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6192:	2a01      	cmp	r2, #1
   d6194:	bf28      	it	cs
   d6196:	429a      	cmpcs	r2, r3
   d6198:	d0f7      	beq.n	d618a <strcmp>
   d619a:	1ad0      	subs	r0, r2, r3
   d619c:	4770      	bx	lr

000d619e <strcpy>:
   d619e:	4603      	mov	r3, r0
   d61a0:	f811 2b01 	ldrb.w	r2, [r1], #1
   d61a4:	f803 2b01 	strb.w	r2, [r3], #1
   d61a8:	2a00      	cmp	r2, #0
   d61aa:	d1f9      	bne.n	d61a0 <strcpy+0x2>
   d61ac:	4770      	bx	lr
	...

000d61b0 <strdup>:
   d61b0:	4b02      	ldr	r3, [pc, #8]	; (d61bc <strdup+0xc>)
   d61b2:	4601      	mov	r1, r0
   d61b4:	6818      	ldr	r0, [r3, #0]
   d61b6:	f000 b803 	b.w	d61c0 <_strdup_r>
   d61ba:	bf00      	nop
   d61bc:	2003e34c 	.word	0x2003e34c

000d61c0 <_strdup_r>:
   d61c0:	b570      	push	{r4, r5, r6, lr}
   d61c2:	4606      	mov	r6, r0
   d61c4:	4608      	mov	r0, r1
   d61c6:	460c      	mov	r4, r1
   d61c8:	f000 f80d 	bl	d61e6 <strlen>
   d61cc:	1c45      	adds	r5, r0, #1
   d61ce:	4629      	mov	r1, r5
   d61d0:	4630      	mov	r0, r6
   d61d2:	f7fe fb0b 	bl	d47ec <_malloc_r>
   d61d6:	4606      	mov	r6, r0
   d61d8:	b118      	cbz	r0, d61e2 <_strdup_r+0x22>
   d61da:	462a      	mov	r2, r5
   d61dc:	4621      	mov	r1, r4
   d61de:	f7ff ff89 	bl	d60f4 <memcpy>
   d61e2:	4630      	mov	r0, r6
   d61e4:	bd70      	pop	{r4, r5, r6, pc}

000d61e6 <strlen>:
   d61e6:	4603      	mov	r3, r0
   d61e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d61ec:	2a00      	cmp	r2, #0
   d61ee:	d1fb      	bne.n	d61e8 <strlen+0x2>
   d61f0:	1a18      	subs	r0, r3, r0
   d61f2:	3801      	subs	r0, #1
   d61f4:	4770      	bx	lr

000d61f6 <strncmp>:
   d61f6:	b530      	push	{r4, r5, lr}
   d61f8:	b182      	cbz	r2, d621c <strncmp+0x26>
   d61fa:	1e45      	subs	r5, r0, #1
   d61fc:	3901      	subs	r1, #1
   d61fe:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d6202:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6206:	42a3      	cmp	r3, r4
   d6208:	d106      	bne.n	d6218 <strncmp+0x22>
   d620a:	43ec      	mvns	r4, r5
   d620c:	4414      	add	r4, r2
   d620e:	42e0      	cmn	r0, r4
   d6210:	d001      	beq.n	d6216 <strncmp+0x20>
   d6212:	2b00      	cmp	r3, #0
   d6214:	d1f3      	bne.n	d61fe <strncmp+0x8>
   d6216:	461c      	mov	r4, r3
   d6218:	1b18      	subs	r0, r3, r4
   d621a:	bd30      	pop	{r4, r5, pc}
   d621c:	4610      	mov	r0, r2
   d621e:	bd30      	pop	{r4, r5, pc}

000d6220 <_strtoul_r>:
   d6220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6224:	4680      	mov	r8, r0
   d6226:	483c      	ldr	r0, [pc, #240]	; (d6318 <_strtoul_r+0xf8>)
   d6228:	f8d0 9000 	ldr.w	r9, [r0]
   d622c:	460e      	mov	r6, r1
   d622e:	4635      	mov	r5, r6
   d6230:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6234:	eb09 0004 	add.w	r0, r9, r4
   d6238:	7840      	ldrb	r0, [r0, #1]
   d623a:	f000 0008 	and.w	r0, r0, #8
   d623e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d6242:	b108      	cbz	r0, d6248 <_strtoul_r+0x28>
   d6244:	462e      	mov	r6, r5
   d6246:	e7f2      	b.n	d622e <_strtoul_r+0xe>
   d6248:	2c2d      	cmp	r4, #45	; 0x2d
   d624a:	d103      	bne.n	d6254 <_strtoul_r+0x34>
   d624c:	1cb5      	adds	r5, r6, #2
   d624e:	7874      	ldrb	r4, [r6, #1]
   d6250:	2701      	movs	r7, #1
   d6252:	e003      	b.n	d625c <_strtoul_r+0x3c>
   d6254:	2c2b      	cmp	r4, #43	; 0x2b
   d6256:	bf04      	itt	eq
   d6258:	7874      	ldrbeq	r4, [r6, #1]
   d625a:	1cb5      	addeq	r5, r6, #2
   d625c:	b113      	cbz	r3, d6264 <_strtoul_r+0x44>
   d625e:	2b10      	cmp	r3, #16
   d6260:	d10a      	bne.n	d6278 <_strtoul_r+0x58>
   d6262:	e053      	b.n	d630c <_strtoul_r+0xec>
   d6264:	2c30      	cmp	r4, #48	; 0x30
   d6266:	d14f      	bne.n	d6308 <_strtoul_r+0xe8>
   d6268:	7828      	ldrb	r0, [r5, #0]
   d626a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d626e:	2858      	cmp	r0, #88	; 0x58
   d6270:	d145      	bne.n	d62fe <_strtoul_r+0xde>
   d6272:	786c      	ldrb	r4, [r5, #1]
   d6274:	2310      	movs	r3, #16
   d6276:	3502      	adds	r5, #2
   d6278:	f04f 3cff 	mov.w	ip, #4294967295
   d627c:	2600      	movs	r6, #0
   d627e:	fbbc fcf3 	udiv	ip, ip, r3
   d6282:	fb03 fa0c 	mul.w	sl, r3, ip
   d6286:	ea6f 0a0a 	mvn.w	sl, sl
   d628a:	4630      	mov	r0, r6
   d628c:	eb09 0e04 	add.w	lr, r9, r4
   d6290:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6294:	f01e 0f04 	tst.w	lr, #4
   d6298:	d001      	beq.n	d629e <_strtoul_r+0x7e>
   d629a:	3c30      	subs	r4, #48	; 0x30
   d629c:	e00b      	b.n	d62b6 <_strtoul_r+0x96>
   d629e:	f01e 0e03 	ands.w	lr, lr, #3
   d62a2:	d01a      	beq.n	d62da <_strtoul_r+0xba>
   d62a4:	f1be 0f01 	cmp.w	lr, #1
   d62a8:	bf0c      	ite	eq
   d62aa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d62ae:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d62b2:	ebce 0404 	rsb	r4, lr, r4
   d62b6:	42a3      	cmp	r3, r4
   d62b8:	dd0f      	ble.n	d62da <_strtoul_r+0xba>
   d62ba:	2e00      	cmp	r6, #0
   d62bc:	db08      	blt.n	d62d0 <_strtoul_r+0xb0>
   d62be:	4560      	cmp	r0, ip
   d62c0:	d806      	bhi.n	d62d0 <_strtoul_r+0xb0>
   d62c2:	d101      	bne.n	d62c8 <_strtoul_r+0xa8>
   d62c4:	4554      	cmp	r4, sl
   d62c6:	dc03      	bgt.n	d62d0 <_strtoul_r+0xb0>
   d62c8:	fb03 4000 	mla	r0, r3, r0, r4
   d62cc:	2601      	movs	r6, #1
   d62ce:	e001      	b.n	d62d4 <_strtoul_r+0xb4>
   d62d0:	f04f 36ff 	mov.w	r6, #4294967295
   d62d4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d62d8:	e7d8      	b.n	d628c <_strtoul_r+0x6c>
   d62da:	2e00      	cmp	r6, #0
   d62dc:	da07      	bge.n	d62ee <_strtoul_r+0xce>
   d62de:	2322      	movs	r3, #34	; 0x22
   d62e0:	f8c8 3000 	str.w	r3, [r8]
   d62e4:	f04f 30ff 	mov.w	r0, #4294967295
   d62e8:	b92a      	cbnz	r2, d62f6 <_strtoul_r+0xd6>
   d62ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d62ee:	b107      	cbz	r7, d62f2 <_strtoul_r+0xd2>
   d62f0:	4240      	negs	r0, r0
   d62f2:	b172      	cbz	r2, d6312 <_strtoul_r+0xf2>
   d62f4:	b106      	cbz	r6, d62f8 <_strtoul_r+0xd8>
   d62f6:	1e69      	subs	r1, r5, #1
   d62f8:	6011      	str	r1, [r2, #0]
   d62fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d62fe:	2430      	movs	r4, #48	; 0x30
   d6300:	2b00      	cmp	r3, #0
   d6302:	d1b9      	bne.n	d6278 <_strtoul_r+0x58>
   d6304:	2308      	movs	r3, #8
   d6306:	e7b7      	b.n	d6278 <_strtoul_r+0x58>
   d6308:	230a      	movs	r3, #10
   d630a:	e7b5      	b.n	d6278 <_strtoul_r+0x58>
   d630c:	2c30      	cmp	r4, #48	; 0x30
   d630e:	d0ab      	beq.n	d6268 <_strtoul_r+0x48>
   d6310:	e7b2      	b.n	d6278 <_strtoul_r+0x58>
   d6312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6316:	bf00      	nop
   d6318:	2003e2e8 	.word	0x2003e2e8

000d631c <strtoul>:
   d631c:	4613      	mov	r3, r2
   d631e:	460a      	mov	r2, r1
   d6320:	4601      	mov	r1, r0
   d6322:	4802      	ldr	r0, [pc, #8]	; (d632c <strtoul+0x10>)
   d6324:	6800      	ldr	r0, [r0, #0]
   d6326:	f7ff bf7b 	b.w	d6220 <_strtoul_r>
   d632a:	bf00      	nop
   d632c:	2003e34c 	.word	0x2003e34c

000d6330 <__tzcalc_limits>:
   d6330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6334:	4604      	mov	r4, r0
   d6336:	f000 fa6f 	bl	d6818 <__gettzinfo>
   d633a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d633e:	429c      	cmp	r4, r3
   d6340:	f340 8096 	ble.w	d6470 <__tzcalc_limits+0x140>
   d6344:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6348:	18e3      	adds	r3, r4, r3
   d634a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d634e:	109b      	asrs	r3, r3, #2
   d6350:	f240 156d 	movw	r5, #365	; 0x16d
   d6354:	fb05 3502 	mla	r5, r5, r2, r3
   d6358:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d635c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6360:	fb92 f3f3 	sdiv	r3, r2, r3
   d6364:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6368:	442b      	add	r3, r5
   d636a:	18a5      	adds	r5, r4, r2
   d636c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6370:	fb95 f5f2 	sdiv	r5, r5, r2
   d6374:	441d      	add	r5, r3
   d6376:	2364      	movs	r3, #100	; 0x64
   d6378:	fb94 f7f2 	sdiv	r7, r4, r2
   d637c:	fb94 f6f3 	sdiv	r6, r4, r3
   d6380:	fb02 4717 	mls	r7, r2, r7, r4
   d6384:	fb03 4616 	mls	r6, r3, r6, r4
   d6388:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d638c:	fab7 fe87 	clz	lr, r7
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	f004 0303 	and.w	r3, r4, #3
   d6396:	6044      	str	r4, [r0, #4]
   d6398:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d639c:	4601      	mov	r1, r0
   d639e:	9300      	str	r3, [sp, #0]
   d63a0:	f04f 0c07 	mov.w	ip, #7
   d63a4:	7a0b      	ldrb	r3, [r1, #8]
   d63a6:	2b4a      	cmp	r3, #74	; 0x4a
   d63a8:	d10e      	bne.n	d63c8 <__tzcalc_limits+0x98>
   d63aa:	694b      	ldr	r3, [r1, #20]
   d63ac:	9a00      	ldr	r2, [sp, #0]
   d63ae:	18ec      	adds	r4, r5, r3
   d63b0:	b902      	cbnz	r2, d63b4 <__tzcalc_limits+0x84>
   d63b2:	b906      	cbnz	r6, d63b6 <__tzcalc_limits+0x86>
   d63b4:	b927      	cbnz	r7, d63c0 <__tzcalc_limits+0x90>
   d63b6:	2b3b      	cmp	r3, #59	; 0x3b
   d63b8:	bfd4      	ite	le
   d63ba:	2300      	movle	r3, #0
   d63bc:	2301      	movgt	r3, #1
   d63be:	e000      	b.n	d63c2 <__tzcalc_limits+0x92>
   d63c0:	2300      	movs	r3, #0
   d63c2:	4423      	add	r3, r4
   d63c4:	3b01      	subs	r3, #1
   d63c6:	e03f      	b.n	d6448 <__tzcalc_limits+0x118>
   d63c8:	2b44      	cmp	r3, #68	; 0x44
   d63ca:	d102      	bne.n	d63d2 <__tzcalc_limits+0xa2>
   d63cc:	694b      	ldr	r3, [r1, #20]
   d63ce:	442b      	add	r3, r5
   d63d0:	e03a      	b.n	d6448 <__tzcalc_limits+0x118>
   d63d2:	9b00      	ldr	r3, [sp, #0]
   d63d4:	b92b      	cbnz	r3, d63e2 <__tzcalc_limits+0xb2>
   d63d6:	2e00      	cmp	r6, #0
   d63d8:	bf0c      	ite	eq
   d63da:	46f0      	moveq	r8, lr
   d63dc:	f04f 0801 	movne.w	r8, #1
   d63e0:	e000      	b.n	d63e4 <__tzcalc_limits+0xb4>
   d63e2:	46f0      	mov	r8, lr
   d63e4:	4b24      	ldr	r3, [pc, #144]	; (d6478 <__tzcalc_limits+0x148>)
   d63e6:	68cc      	ldr	r4, [r1, #12]
   d63e8:	2230      	movs	r2, #48	; 0x30
   d63ea:	fb02 3808 	mla	r8, r2, r8, r3
   d63ee:	f1a8 0a04 	sub.w	sl, r8, #4
   d63f2:	46a9      	mov	r9, r5
   d63f4:	2301      	movs	r3, #1
   d63f6:	42a3      	cmp	r3, r4
   d63f8:	da04      	bge.n	d6404 <__tzcalc_limits+0xd4>
   d63fa:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d63fe:	3301      	adds	r3, #1
   d6400:	44d9      	add	r9, fp
   d6402:	e7f8      	b.n	d63f6 <__tzcalc_limits+0xc6>
   d6404:	f109 0304 	add.w	r3, r9, #4
   d6408:	fb93 fbfc 	sdiv	fp, r3, ip
   d640c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6410:	2c01      	cmp	r4, #1
   d6412:	ebca 0a03 	rsb	sl, sl, r3
   d6416:	694b      	ldr	r3, [r1, #20]
   d6418:	bfb8      	it	lt
   d641a:	2401      	movlt	r4, #1
   d641c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6420:	ebb3 0a0a 	subs.w	sl, r3, sl
   d6424:	690b      	ldr	r3, [r1, #16]
   d6426:	f104 34ff 	add.w	r4, r4, #4294967295
   d642a:	f103 33ff 	add.w	r3, r3, #4294967295
   d642e:	bf48      	it	mi
   d6430:	f10a 0a07 	addmi.w	sl, sl, #7
   d6434:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6438:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d643c:	4453      	add	r3, sl
   d643e:	42a3      	cmp	r3, r4
   d6440:	db01      	blt.n	d6446 <__tzcalc_limits+0x116>
   d6442:	3b07      	subs	r3, #7
   d6444:	e7fb      	b.n	d643e <__tzcalc_limits+0x10e>
   d6446:	444b      	add	r3, r9
   d6448:	698c      	ldr	r4, [r1, #24]
   d644a:	4a0c      	ldr	r2, [pc, #48]	; (d647c <__tzcalc_limits+0x14c>)
   d644c:	fb02 4303 	mla	r3, r2, r3, r4
   d6450:	6a0c      	ldr	r4, [r1, #32]
   d6452:	4423      	add	r3, r4
   d6454:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6458:	9b01      	ldr	r3, [sp, #4]
   d645a:	4299      	cmp	r1, r3
   d645c:	d1a2      	bne.n	d63a4 <__tzcalc_limits+0x74>
   d645e:	69c3      	ldr	r3, [r0, #28]
   d6460:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d6462:	4293      	cmp	r3, r2
   d6464:	bfac      	ite	ge
   d6466:	2300      	movge	r3, #0
   d6468:	2301      	movlt	r3, #1
   d646a:	6003      	str	r3, [r0, #0]
   d646c:	2001      	movs	r0, #1
   d646e:	e000      	b.n	d6472 <__tzcalc_limits+0x142>
   d6470:	2000      	movs	r0, #0
   d6472:	b003      	add	sp, #12
   d6474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6478:	000d6da0 	.word	0x000d6da0
   d647c:	00015180 	.word	0x00015180

000d6480 <__tz_lock>:
   d6480:	4770      	bx	lr

000d6482 <__tz_unlock>:
   d6482:	4770      	bx	lr

000d6484 <_tzset_unlocked>:
   d6484:	4b01      	ldr	r3, [pc, #4]	; (d648c <_tzset_unlocked+0x8>)
   d6486:	6818      	ldr	r0, [r3, #0]
   d6488:	f000 b802 	b.w	d6490 <_tzset_unlocked_r>
   d648c:	2003e34c 	.word	0x2003e34c

000d6490 <_tzset_unlocked_r>:
   d6490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6494:	b08d      	sub	sp, #52	; 0x34
   d6496:	4607      	mov	r7, r0
   d6498:	f000 f9be 	bl	d6818 <__gettzinfo>
   d649c:	49b0      	ldr	r1, [pc, #704]	; (d6760 <_tzset_unlocked_r+0x2d0>)
   d649e:	4eb1      	ldr	r6, [pc, #708]	; (d6764 <_tzset_unlocked_r+0x2d4>)
   d64a0:	4604      	mov	r4, r0
   d64a2:	4638      	mov	r0, r7
   d64a4:	f000 f9b0 	bl	d6808 <_getenv_r>
   d64a8:	4605      	mov	r5, r0
   d64aa:	b960      	cbnz	r0, d64c6 <_tzset_unlocked_r+0x36>
   d64ac:	4bae      	ldr	r3, [pc, #696]	; (d6768 <_tzset_unlocked_r+0x2d8>)
   d64ae:	4aaf      	ldr	r2, [pc, #700]	; (d676c <_tzset_unlocked_r+0x2dc>)
   d64b0:	6018      	str	r0, [r3, #0]
   d64b2:	4baf      	ldr	r3, [pc, #700]	; (d6770 <_tzset_unlocked_r+0x2e0>)
   d64b4:	6018      	str	r0, [r3, #0]
   d64b6:	4baf      	ldr	r3, [pc, #700]	; (d6774 <_tzset_unlocked_r+0x2e4>)
   d64b8:	6830      	ldr	r0, [r6, #0]
   d64ba:	601a      	str	r2, [r3, #0]
   d64bc:	605a      	str	r2, [r3, #4]
   d64be:	f7fe f975 	bl	d47ac <free>
   d64c2:	6035      	str	r5, [r6, #0]
   d64c4:	e148      	b.n	d6758 <_tzset_unlocked_r+0x2c8>
   d64c6:	6831      	ldr	r1, [r6, #0]
   d64c8:	b979      	cbnz	r1, d64ea <_tzset_unlocked_r+0x5a>
   d64ca:	6830      	ldr	r0, [r6, #0]
   d64cc:	f7fe f96e 	bl	d47ac <free>
   d64d0:	4628      	mov	r0, r5
   d64d2:	f7ff fe88 	bl	d61e6 <strlen>
   d64d6:	1c41      	adds	r1, r0, #1
   d64d8:	4638      	mov	r0, r7
   d64da:	f7fe f987 	bl	d47ec <_malloc_r>
   d64de:	6030      	str	r0, [r6, #0]
   d64e0:	b148      	cbz	r0, d64f6 <_tzset_unlocked_r+0x66>
   d64e2:	4629      	mov	r1, r5
   d64e4:	f7ff fe5b 	bl	d619e <strcpy>
   d64e8:	e005      	b.n	d64f6 <_tzset_unlocked_r+0x66>
   d64ea:	f7ff fe4e 	bl	d618a <strcmp>
   d64ee:	2800      	cmp	r0, #0
   d64f0:	f000 8132 	beq.w	d6758 <_tzset_unlocked_r+0x2c8>
   d64f4:	e7e9      	b.n	d64ca <_tzset_unlocked_r+0x3a>
   d64f6:	782b      	ldrb	r3, [r5, #0]
   d64f8:	4a9f      	ldr	r2, [pc, #636]	; (d6778 <_tzset_unlocked_r+0x2e8>)
   d64fa:	49a0      	ldr	r1, [pc, #640]	; (d677c <_tzset_unlocked_r+0x2ec>)
   d64fc:	2b3a      	cmp	r3, #58	; 0x3a
   d64fe:	bf08      	it	eq
   d6500:	3501      	addeq	r5, #1
   d6502:	ae0a      	add	r6, sp, #40	; 0x28
   d6504:	4633      	mov	r3, r6
   d6506:	4628      	mov	r0, r5
   d6508:	f7fe f960 	bl	d47cc <siscanf>
   d650c:	2800      	cmp	r0, #0
   d650e:	f340 8123 	ble.w	d6758 <_tzset_unlocked_r+0x2c8>
   d6512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6514:	18ef      	adds	r7, r5, r3
   d6516:	5ceb      	ldrb	r3, [r5, r3]
   d6518:	2b2d      	cmp	r3, #45	; 0x2d
   d651a:	d103      	bne.n	d6524 <_tzset_unlocked_r+0x94>
   d651c:	3701      	adds	r7, #1
   d651e:	f04f 35ff 	mov.w	r5, #4294967295
   d6522:	e003      	b.n	d652c <_tzset_unlocked_r+0x9c>
   d6524:	2b2b      	cmp	r3, #43	; 0x2b
   d6526:	bf08      	it	eq
   d6528:	3701      	addeq	r7, #1
   d652a:	2501      	movs	r5, #1
   d652c:	f10d 0a20 	add.w	sl, sp, #32
   d6530:	f10d 0b1e 	add.w	fp, sp, #30
   d6534:	f04f 0800 	mov.w	r8, #0
   d6538:	9603      	str	r6, [sp, #12]
   d653a:	f8cd a008 	str.w	sl, [sp, #8]
   d653e:	9601      	str	r6, [sp, #4]
   d6540:	f8cd b000 	str.w	fp, [sp]
   d6544:	4633      	mov	r3, r6
   d6546:	aa07      	add	r2, sp, #28
   d6548:	498d      	ldr	r1, [pc, #564]	; (d6780 <_tzset_unlocked_r+0x2f0>)
   d654a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d654e:	4638      	mov	r0, r7
   d6550:	f8ad 8020 	strh.w	r8, [sp, #32]
   d6554:	f7fe f93a 	bl	d47cc <siscanf>
   d6558:	4540      	cmp	r0, r8
   d655a:	f340 80fd 	ble.w	d6758 <_tzset_unlocked_r+0x2c8>
   d655e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6562:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6566:	f8df 9224 	ldr.w	r9, [pc, #548]	; d678c <_tzset_unlocked_r+0x2fc>
   d656a:	213c      	movs	r1, #60	; 0x3c
   d656c:	fb01 3302 	mla	r3, r1, r2, r3
   d6570:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6574:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6578:	fb01 3302 	mla	r3, r1, r2, r3
   d657c:	435d      	muls	r5, r3
   d657e:	6225      	str	r5, [r4, #32]
   d6580:	4d7c      	ldr	r5, [pc, #496]	; (d6774 <_tzset_unlocked_r+0x2e4>)
   d6582:	4b7d      	ldr	r3, [pc, #500]	; (d6778 <_tzset_unlocked_r+0x2e8>)
   d6584:	602b      	str	r3, [r5, #0]
   d6586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6588:	497c      	ldr	r1, [pc, #496]	; (d677c <_tzset_unlocked_r+0x2ec>)
   d658a:	441f      	add	r7, r3
   d658c:	464a      	mov	r2, r9
   d658e:	4633      	mov	r3, r6
   d6590:	4638      	mov	r0, r7
   d6592:	f7fe f91b 	bl	d47cc <siscanf>
   d6596:	4540      	cmp	r0, r8
   d6598:	dc08      	bgt.n	d65ac <_tzset_unlocked_r+0x11c>
   d659a:	682b      	ldr	r3, [r5, #0]
   d659c:	606b      	str	r3, [r5, #4]
   d659e:	4b72      	ldr	r3, [pc, #456]	; (d6768 <_tzset_unlocked_r+0x2d8>)
   d65a0:	6a22      	ldr	r2, [r4, #32]
   d65a2:	601a      	str	r2, [r3, #0]
   d65a4:	4b72      	ldr	r3, [pc, #456]	; (d6770 <_tzset_unlocked_r+0x2e0>)
   d65a6:	f8c3 8000 	str.w	r8, [r3]
   d65aa:	e0d5      	b.n	d6758 <_tzset_unlocked_r+0x2c8>
   d65ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d65ae:	f8c5 9004 	str.w	r9, [r5, #4]
   d65b2:	18fd      	adds	r5, r7, r3
   d65b4:	5cfb      	ldrb	r3, [r7, r3]
   d65b6:	2b2d      	cmp	r3, #45	; 0x2d
   d65b8:	d103      	bne.n	d65c2 <_tzset_unlocked_r+0x132>
   d65ba:	3501      	adds	r5, #1
   d65bc:	f04f 37ff 	mov.w	r7, #4294967295
   d65c0:	e003      	b.n	d65ca <_tzset_unlocked_r+0x13a>
   d65c2:	2b2b      	cmp	r3, #43	; 0x2b
   d65c4:	bf08      	it	eq
   d65c6:	3501      	addeq	r5, #1
   d65c8:	2701      	movs	r7, #1
   d65ca:	2300      	movs	r3, #0
   d65cc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d65d0:	f8ad 301e 	strh.w	r3, [sp, #30]
   d65d4:	f8ad 3020 	strh.w	r3, [sp, #32]
   d65d8:	930a      	str	r3, [sp, #40]	; 0x28
   d65da:	9603      	str	r6, [sp, #12]
   d65dc:	f8cd a008 	str.w	sl, [sp, #8]
   d65e0:	9601      	str	r6, [sp, #4]
   d65e2:	f8cd b000 	str.w	fp, [sp]
   d65e6:	4633      	mov	r3, r6
   d65e8:	aa07      	add	r2, sp, #28
   d65ea:	4965      	ldr	r1, [pc, #404]	; (d6780 <_tzset_unlocked_r+0x2f0>)
   d65ec:	4628      	mov	r0, r5
   d65ee:	f7fe f8ed 	bl	d47cc <siscanf>
   d65f2:	2800      	cmp	r0, #0
   d65f4:	dc04      	bgt.n	d6600 <_tzset_unlocked_r+0x170>
   d65f6:	6a23      	ldr	r3, [r4, #32]
   d65f8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d65fc:	63e3      	str	r3, [r4, #60]	; 0x3c
   d65fe:	e00e      	b.n	d661e <_tzset_unlocked_r+0x18e>
   d6600:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6604:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6608:	213c      	movs	r1, #60	; 0x3c
   d660a:	fb01 3302 	mla	r3, r1, r2, r3
   d660e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6612:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6616:	fb01 3302 	mla	r3, r1, r2, r3
   d661a:	435f      	muls	r7, r3
   d661c:	63e7      	str	r7, [r4, #60]	; 0x3c
   d661e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6620:	4627      	mov	r7, r4
   d6622:	441d      	add	r5, r3
   d6624:	f04f 0900 	mov.w	r9, #0
   d6628:	782b      	ldrb	r3, [r5, #0]
   d662a:	2b2c      	cmp	r3, #44	; 0x2c
   d662c:	bf08      	it	eq
   d662e:	3501      	addeq	r5, #1
   d6630:	f895 8000 	ldrb.w	r8, [r5]
   d6634:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6638:	d126      	bne.n	d6688 <_tzset_unlocked_r+0x1f8>
   d663a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d663e:	9302      	str	r3, [sp, #8]
   d6640:	ab09      	add	r3, sp, #36	; 0x24
   d6642:	9300      	str	r3, [sp, #0]
   d6644:	9603      	str	r6, [sp, #12]
   d6646:	9601      	str	r6, [sp, #4]
   d6648:	4633      	mov	r3, r6
   d664a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d664e:	494d      	ldr	r1, [pc, #308]	; (d6784 <_tzset_unlocked_r+0x2f4>)
   d6650:	4628      	mov	r0, r5
   d6652:	f7fe f8bb 	bl	d47cc <siscanf>
   d6656:	2803      	cmp	r0, #3
   d6658:	d17e      	bne.n	d6758 <_tzset_unlocked_r+0x2c8>
   d665a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d665e:	1e4b      	subs	r3, r1, #1
   d6660:	2b0b      	cmp	r3, #11
   d6662:	d879      	bhi.n	d6758 <_tzset_unlocked_r+0x2c8>
   d6664:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6668:	1e53      	subs	r3, r2, #1
   d666a:	2b04      	cmp	r3, #4
   d666c:	d874      	bhi.n	d6758 <_tzset_unlocked_r+0x2c8>
   d666e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d6672:	2b06      	cmp	r3, #6
   d6674:	d870      	bhi.n	d6758 <_tzset_unlocked_r+0x2c8>
   d6676:	f887 8008 	strb.w	r8, [r7, #8]
   d667a:	60f9      	str	r1, [r7, #12]
   d667c:	613a      	str	r2, [r7, #16]
   d667e:	617b      	str	r3, [r7, #20]
   d6680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6682:	eb05 0803 	add.w	r8, r5, r3
   d6686:	e02a      	b.n	d66de <_tzset_unlocked_r+0x24e>
   d6688:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d668c:	bf06      	itte	eq
   d668e:	3501      	addeq	r5, #1
   d6690:	4643      	moveq	r3, r8
   d6692:	2344      	movne	r3, #68	; 0x44
   d6694:	220a      	movs	r2, #10
   d6696:	a90b      	add	r1, sp, #44	; 0x2c
   d6698:	4628      	mov	r0, r5
   d669a:	9305      	str	r3, [sp, #20]
   d669c:	f7ff fe3e 	bl	d631c <strtoul>
   d66a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d66a4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d66a8:	4545      	cmp	r5, r8
   d66aa:	9b05      	ldr	r3, [sp, #20]
   d66ac:	d114      	bne.n	d66d8 <_tzset_unlocked_r+0x248>
   d66ae:	234d      	movs	r3, #77	; 0x4d
   d66b0:	f1b9 0f00 	cmp.w	r9, #0
   d66b4:	d107      	bne.n	d66c6 <_tzset_unlocked_r+0x236>
   d66b6:	7223      	strb	r3, [r4, #8]
   d66b8:	2303      	movs	r3, #3
   d66ba:	60e3      	str	r3, [r4, #12]
   d66bc:	2302      	movs	r3, #2
   d66be:	6123      	str	r3, [r4, #16]
   d66c0:	f8c4 9014 	str.w	r9, [r4, #20]
   d66c4:	e00b      	b.n	d66de <_tzset_unlocked_r+0x24e>
   d66c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d66ca:	230b      	movs	r3, #11
   d66cc:	62a3      	str	r3, [r4, #40]	; 0x28
   d66ce:	2301      	movs	r3, #1
   d66d0:	62e3      	str	r3, [r4, #44]	; 0x2c
   d66d2:	2300      	movs	r3, #0
   d66d4:	6323      	str	r3, [r4, #48]	; 0x30
   d66d6:	e002      	b.n	d66de <_tzset_unlocked_r+0x24e>
   d66d8:	b280      	uxth	r0, r0
   d66da:	723b      	strb	r3, [r7, #8]
   d66dc:	6178      	str	r0, [r7, #20]
   d66de:	2302      	movs	r3, #2
   d66e0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d66e4:	2300      	movs	r3, #0
   d66e6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d66ea:	f8ad 3020 	strh.w	r3, [sp, #32]
   d66ee:	930a      	str	r3, [sp, #40]	; 0x28
   d66f0:	f898 3000 	ldrb.w	r3, [r8]
   d66f4:	2b2f      	cmp	r3, #47	; 0x2f
   d66f6:	d10b      	bne.n	d6710 <_tzset_unlocked_r+0x280>
   d66f8:	9603      	str	r6, [sp, #12]
   d66fa:	f8cd a008 	str.w	sl, [sp, #8]
   d66fe:	9601      	str	r6, [sp, #4]
   d6700:	f8cd b000 	str.w	fp, [sp]
   d6704:	4633      	mov	r3, r6
   d6706:	aa07      	add	r2, sp, #28
   d6708:	491f      	ldr	r1, [pc, #124]	; (d6788 <_tzset_unlocked_r+0x2f8>)
   d670a:	4640      	mov	r0, r8
   d670c:	f7fe f85e 	bl	d47cc <siscanf>
   d6710:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6714:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6718:	213c      	movs	r1, #60	; 0x3c
   d671a:	fb01 3302 	mla	r3, r1, r2, r3
   d671e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d6722:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6726:	fb01 3302 	mla	r3, r1, r2, r3
   d672a:	61bb      	str	r3, [r7, #24]
   d672c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d672e:	f109 0901 	add.w	r9, r9, #1
   d6732:	f1b9 0f02 	cmp.w	r9, #2
   d6736:	4445      	add	r5, r8
   d6738:	f107 071c 	add.w	r7, r7, #28
   d673c:	f47f af74 	bne.w	d6628 <_tzset_unlocked_r+0x198>
   d6740:	6860      	ldr	r0, [r4, #4]
   d6742:	f7ff fdf5 	bl	d6330 <__tzcalc_limits>
   d6746:	4b08      	ldr	r3, [pc, #32]	; (d6768 <_tzset_unlocked_r+0x2d8>)
   d6748:	6a22      	ldr	r2, [r4, #32]
   d674a:	601a      	str	r2, [r3, #0]
   d674c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d674e:	1a9b      	subs	r3, r3, r2
   d6750:	4a07      	ldr	r2, [pc, #28]	; (d6770 <_tzset_unlocked_r+0x2e0>)
   d6752:	bf18      	it	ne
   d6754:	2301      	movne	r3, #1
   d6756:	6013      	str	r3, [r2, #0]
   d6758:	b00d      	add	sp, #52	; 0x34
   d675a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d675e:	bf00      	nop
   d6760:	000d6e00 	.word	0x000d6e00
   d6764:	2003e7e0 	.word	0x2003e7e0
   d6768:	2003e7e8 	.word	0x2003e7e8
   d676c:	000d6e03 	.word	0x000d6e03
   d6770:	2003e7e4 	.word	0x2003e7e4
   d6774:	2003e350 	.word	0x2003e350
   d6778:	2003e7d3 	.word	0x2003e7d3
   d677c:	000d6e07 	.word	0x000d6e07
   d6780:	000d6e2a 	.word	0x000d6e2a
   d6784:	000d6e16 	.word	0x000d6e16
   d6788:	000d6e29 	.word	0x000d6e29
   d678c:	2003e7c8 	.word	0x2003e7c8

000d6790 <_findenv_r>:
   d6790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6794:	4607      	mov	r7, r0
   d6796:	468b      	mov	fp, r1
   d6798:	4690      	mov	r8, r2
   d679a:	f000 f8d9 	bl	d6950 <__env_lock>
   d679e:	4b19      	ldr	r3, [pc, #100]	; (d6804 <_findenv_r+0x74>)
   d67a0:	681d      	ldr	r5, [r3, #0]
   d67a2:	469a      	mov	sl, r3
   d67a4:	b13d      	cbz	r5, d67b6 <_findenv_r+0x26>
   d67a6:	465c      	mov	r4, fp
   d67a8:	4623      	mov	r3, r4
   d67aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d67ae:	b142      	cbz	r2, d67c2 <_findenv_r+0x32>
   d67b0:	2a3d      	cmp	r2, #61	; 0x3d
   d67b2:	461c      	mov	r4, r3
   d67b4:	d1f8      	bne.n	d67a8 <_findenv_r+0x18>
   d67b6:	4638      	mov	r0, r7
   d67b8:	f000 f8cb 	bl	d6952 <__env_unlock>
   d67bc:	2000      	movs	r0, #0
   d67be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67c2:	ebcb 0404 	rsb	r4, fp, r4
   d67c6:	46a9      	mov	r9, r5
   d67c8:	f859 0b04 	ldr.w	r0, [r9], #4
   d67cc:	2800      	cmp	r0, #0
   d67ce:	d0f2      	beq.n	d67b6 <_findenv_r+0x26>
   d67d0:	4622      	mov	r2, r4
   d67d2:	4659      	mov	r1, fp
   d67d4:	f7ff fd0f 	bl	d61f6 <strncmp>
   d67d8:	b988      	cbnz	r0, d67fe <_findenv_r+0x6e>
   d67da:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d67de:	191e      	adds	r6, r3, r4
   d67e0:	5d1b      	ldrb	r3, [r3, r4]
   d67e2:	2b3d      	cmp	r3, #61	; 0x3d
   d67e4:	d10b      	bne.n	d67fe <_findenv_r+0x6e>
   d67e6:	f8da 3000 	ldr.w	r3, [sl]
   d67ea:	1aed      	subs	r5, r5, r3
   d67ec:	10ad      	asrs	r5, r5, #2
   d67ee:	4638      	mov	r0, r7
   d67f0:	f8c8 5000 	str.w	r5, [r8]
   d67f4:	f000 f8ad 	bl	d6952 <__env_unlock>
   d67f8:	1c70      	adds	r0, r6, #1
   d67fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67fe:	464d      	mov	r5, r9
   d6800:	e7e1      	b.n	d67c6 <_findenv_r+0x36>
   d6802:	bf00      	nop
   d6804:	2003e398 	.word	0x2003e398

000d6808 <_getenv_r>:
   d6808:	b507      	push	{r0, r1, r2, lr}
   d680a:	aa01      	add	r2, sp, #4
   d680c:	f7ff ffc0 	bl	d6790 <_findenv_r>
   d6810:	b003      	add	sp, #12
   d6812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6818 <__gettzinfo>:
   d6818:	4800      	ldr	r0, [pc, #0]	; (d681c <__gettzinfo+0x4>)
   d681a:	4770      	bx	lr
   d681c:	2003e358 	.word	0x2003e358

000d6820 <gmtime_r>:
   d6820:	6802      	ldr	r2, [r0, #0]
   d6822:	4b47      	ldr	r3, [pc, #284]	; (d6940 <gmtime_r+0x120>)
   d6824:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6826:	fb92 f4f3 	sdiv	r4, r2, r3
   d682a:	fb03 2214 	mls	r2, r3, r4, r2
   d682e:	2a00      	cmp	r2, #0
   d6830:	bfbc      	itt	lt
   d6832:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d6836:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d683a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d683e:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d6842:	fb92 f3f0 	sdiv	r3, r2, r0
   d6846:	fb00 2213 	mls	r2, r0, r3, r2
   d684a:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d684e:	bfac      	ite	ge
   d6850:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d6854:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d6858:	608b      	str	r3, [r1, #8]
   d685a:	fb92 f3f0 	sdiv	r3, r2, r0
   d685e:	fb00 2213 	mls	r2, r0, r3, r2
   d6862:	604b      	str	r3, [r1, #4]
   d6864:	600a      	str	r2, [r1, #0]
   d6866:	2307      	movs	r3, #7
   d6868:	1ce2      	adds	r2, r4, #3
   d686a:	fb92 f3f3 	sdiv	r3, r2, r3
   d686e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6872:	1ad3      	subs	r3, r2, r3
   d6874:	618b      	str	r3, [r1, #24]
   d6876:	4b33      	ldr	r3, [pc, #204]	; (d6944 <gmtime_r+0x124>)
   d6878:	4d33      	ldr	r5, [pc, #204]	; (d6948 <gmtime_r+0x128>)
   d687a:	fb94 f5f5 	sdiv	r5, r4, r5
   d687e:	fb03 4405 	mla	r4, r3, r5, r4
   d6882:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d6886:	fbb4 f2f2 	udiv	r2, r4, r2
   d688a:	4422      	add	r2, r4
   d688c:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d6890:	fbb4 f3f7 	udiv	r3, r4, r7
   d6894:	1ad2      	subs	r2, r2, r3
   d6896:	482d      	ldr	r0, [pc, #180]	; (d694c <gmtime_r+0x12c>)
   d6898:	fbb4 f0f0 	udiv	r0, r4, r0
   d689c:	f648 6694 	movw	r6, #36500	; 0x8e94
   d68a0:	1a13      	subs	r3, r2, r0
   d68a2:	fbb3 f6f6 	udiv	r6, r3, r6
   d68a6:	4434      	add	r4, r6
   d68a8:	f240 126d 	movw	r2, #365	; 0x16d
   d68ac:	fbb3 f0f2 	udiv	r0, r3, r2
   d68b0:	fbb3 f3f7 	udiv	r3, r3, r7
   d68b4:	1ae3      	subs	r3, r4, r3
   d68b6:	fb02 3310 	mls	r3, r2, r0, r3
   d68ba:	2499      	movs	r4, #153	; 0x99
   d68bc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d68c0:	3202      	adds	r2, #2
   d68c2:	fbb2 f2f4 	udiv	r2, r2, r4
   d68c6:	2a0a      	cmp	r2, #10
   d68c8:	fb04 f402 	mul.w	r4, r4, r2
   d68cc:	f104 0602 	add.w	r6, r4, #2
   d68d0:	f04f 0405 	mov.w	r4, #5
   d68d4:	fbb6 f4f4 	udiv	r4, r6, r4
   d68d8:	bf34      	ite	cc
   d68da:	2602      	movcc	r6, #2
   d68dc:	f06f 0609 	mvncs.w	r6, #9
   d68e0:	4416      	add	r6, r2
   d68e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d68e6:	fb02 0505 	mla	r5, r2, r5, r0
   d68ea:	1c5f      	adds	r7, r3, #1
   d68ec:	2e01      	cmp	r6, #1
   d68ee:	bf98      	it	ls
   d68f0:	3501      	addls	r5, #1
   d68f2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d68f6:	eba7 0704 	sub.w	r7, r7, r4
   d68fa:	d302      	bcc.n	d6902 <gmtime_r+0xe2>
   d68fc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d6900:	e014      	b.n	d692c <gmtime_r+0x10c>
   d6902:	0782      	lsls	r2, r0, #30
   d6904:	d105      	bne.n	d6912 <gmtime_r+0xf2>
   d6906:	2464      	movs	r4, #100	; 0x64
   d6908:	fbb0 f2f4 	udiv	r2, r0, r4
   d690c:	fb04 0212 	mls	r2, r4, r2, r0
   d6910:	b94a      	cbnz	r2, d6926 <gmtime_r+0x106>
   d6912:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6916:	fbb0 f4f2 	udiv	r4, r0, r2
   d691a:	fb02 0014 	mls	r0, r2, r4, r0
   d691e:	fab0 f280 	clz	r2, r0
   d6922:	0952      	lsrs	r2, r2, #5
   d6924:	e000      	b.n	d6928 <gmtime_r+0x108>
   d6926:	2201      	movs	r2, #1
   d6928:	333b      	adds	r3, #59	; 0x3b
   d692a:	441a      	add	r2, r3
   d692c:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6930:	2300      	movs	r3, #0
   d6932:	61ca      	str	r2, [r1, #28]
   d6934:	614d      	str	r5, [r1, #20]
   d6936:	610e      	str	r6, [r1, #16]
   d6938:	60cf      	str	r7, [r1, #12]
   d693a:	620b      	str	r3, [r1, #32]
   d693c:	4608      	mov	r0, r1
   d693e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6940:	00015180 	.word	0x00015180
   d6944:	fffdc54f 	.word	0xfffdc54f
   d6948:	00023ab1 	.word	0x00023ab1
   d694c:	00023ab0 	.word	0x00023ab0

000d6950 <__env_lock>:
   d6950:	4770      	bx	lr

000d6952 <__env_unlock>:
   d6952:	4770      	bx	lr

000d6954 <dynalib_user>:
   d6954:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6964:	0000 0000 002c 6150 6c79 616f 3a64 5300     ....,.Payload:.S
   d6974:	6174 7574 5273 6961 476e 7561 6567 4d00     tatusRainGauge.M
   d6984:	7365 6173 6567 7320 6e65 0074 6c53 6565     essage sent.Slee
   d6994:	0070 0000                                   p...

000d6998 <_ZTVN5spark13EthernetClassE>:
	...
   d69a0:	485b 000d 4851 000d 4847 000d 483d 000d     [H..QH..GH..=H..
   d69b0:	4831 000d 4825 000d 4819 000d 4811 000d     1H..%H...H...H..
   d69c0:	4807 000d 47fd 000d 5a1d 000d               .H...G...Z..

000d69cc <_ZTV8SPIClass>:
	...
   d69d4:	4879 000d 487b 000d 6162 6475 5300 7265     yH..{H..baud.Ser
   d69e4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d69f4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6a04:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6a14:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6a24:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6a34:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6a44:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6a54:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6a64:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6a74:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6a84:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d6a94:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6aa4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6ab4:	6e61 6369 6100 6c6c 2500 302b 6433 253a     anic.all.%+03d:%
   d6ac4:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d6ad4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6ae4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6aec:	4e59 000d 4e5f 000d 4ea3 000d 4e6d 000d     YN.._N...N..mN..
   d6afc:	4e5b 000d                                   [N..

000d6b00 <_ZTV9IPAddress>:
	...
   d6b08:	53f1 000d 53e1 000d 53e3 000d               .S...S...S..

000d6b14 <_ZTV9USBSerial>:
	...
   d6b1c:	54c9 000d 5519 000d 5527 000d 4acd 000d     .T...U..'U...J..
   d6b2c:	5505 000d 54cb 000d 54e1 000d 5513 000d     .U...T...T...U..
   d6b3c:	54f7 000d 54c5 000d                         .T...T..

000d6b44 <_ZTVN5spark13CellularClassE>:
	...
   d6b4c:	5633 000d 5629 000d 561f 000d 55d5 000d     3V..)V...V...U..
   d6b5c:	5613 000d 5607 000d 55fb 000d 55f3 000d     .V...V...U...U..
   d6b6c:	55e9 000d 55df 000d 5a1d 000d               .U...U...Z..

000d6b78 <_ZTV11USARTSerial>:
	...
   d6b80:	566d 000d 56bd 000d 56cb 000d 4acd 000d     mV...V...V...J..
   d6b90:	5681 000d 56a3 000d 568f 000d 56b7 000d     .V...V...V...V..
   d6ba0:	566f 000d 5673 000d                         oV..sV..

000d6ba8 <_ZTV7TwoWire>:
	...
   d6bb0:	57cd 000d 5817 000d 57ef 000d 57cf 000d     .W...X...W...W..
   d6bc0:	57f7 000d 57ff 000d 5807 000d 580f 000d     .W...W...X...X..

000d6bd0 <_ZTVN5spark9MeshClassE>:
	...
   d6bd8:	58af 000d 58a5 000d 589b 000d 5891 000d     .X...X...X...X..
   d6be8:	5885 000d 5879 000d 586d 000d 5865 000d     .X..yX..mX..eX..
   d6bf8:	585b 000d 5851 000d 5a1d 000d               [X..QX...Z..

000d6c04 <_ZTVN5spark12NetworkClassE>:
	...
   d6c0c:	59b5 000d 59bf 000d 59c9 000d 59d3 000d     .Y...Y...Y...Y..
   d6c1c:	59dd 000d 59e9 000d 59f5 000d 5a01 000d     .Y...Y...Y...Z..
   d6c2c:	5a09 000d 5a13 000d 5a1d 000d               .Z...Z...Z..

000d6c38 <_ctype_>:
   d6c38:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d6c48:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6c58:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6c68:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d6c78:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d6c88:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d6c98:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d6ca8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6cb8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6d3c <__sf_fake_stdin>:
	...

000d6d5c <__sf_fake_stdout>:
	...

000d6d7c <__sf_fake_stderr>:
	...
   d6d9c:	0043 0000                                   C...

000d6da0 <__month_lengths>:
   d6da0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d6db0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6dc0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6dd0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d6de0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6df0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6e00:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d6e10:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d6e20:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d6e30:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d6e3c <link_const_variable_data_end>:
   d6e3c:	000d4331 	.word	0x000d4331
   d6e40:	000d4865 	.word	0x000d4865
   d6e44:	000d48e9 	.word	0x000d48e9
   d6e48:	000d4abd 	.word	0x000d4abd
   d6e4c:	000d4c1d 	.word	0x000d4c1d
   d6e50:	000d4d11 	.word	0x000d4d11
   d6e54:	000d4d69 	.word	0x000d4d69
   d6e58:	000d563d 	.word	0x000d563d
   d6e5c:	000d5965 	.word	0x000d5965
   d6e60:	000d5ae9 	.word	0x000d5ae9
   d6e64:	000d5bc1 	.word	0x000d5bc1
   d6e68:	000d5c59 	.word	0x000d5c59
   d6e6c:	000d5cdd 	.word	0x000d5cdd
   d6e70:	000d5da1 	.word	0x000d5da1
   d6e74:	000d5e65 	.word	0x000d5e65

000d6e78 <link_constructors_end>:
	...
