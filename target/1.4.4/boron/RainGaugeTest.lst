
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Rain_Gauge/src/RainGaugeTest/target/1.4.4/boron/RainGaugeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ed4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00016f9c  2**0
                  CONTENTS
  4 .data         0000007c  2003e1f0  000d6ef0  0000e1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000584  2003e26c  2003e26c  0001e26c  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d6f6c  000d6f6c  00016f6c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d6f98  000d6f98  00016f98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d9793  00000000  00000000  00016f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001115e  00000000  00000000  000f072f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001f50e  00000000  00000000  0010188d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002658  00000000  00000000  00120d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004898  00000000  00000000  001233f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035525  00000000  00000000  00127c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029aef  00000000  00000000  0015d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010200a  00000000  00000000  00186c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d2a8  00000000  00000000  00288cac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb73 	bl	d6718 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fb93 	bl	d6764 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e1f0 	.word	0x2003e1f0
   d4048:	000d6ef0 	.word	0x000d6ef0
   d404c:	2003e26c 	.word	0x2003e26c
   d4050:	2003e26c 	.word	0x2003e26c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fad7 	bl	d560c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6ee4 	.word	0x000d6ee4
   d4080:	000d6ea8 	.word	0x000d6ea8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b9a0 	b.w	d43c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fab9 	bl	d4600 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 ba89 	b.w	d55a8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be17 	b.w	d4cc8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 be1d 	b.w	d4cd8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 be1b 	b.w	d4cd8 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z12setParameter6StringS_>:
    }
  }
  setParameter(parameter,value.replace(".",""));
}
bool setParameter(String param, String value)
{
   d40b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40b6:	460c      	mov	r4, r1
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b8:	4937      	ldr	r1, [pc, #220]	; (d4198 <_Z12setParameter6StringS_+0xe4>)
   d40ba:	4605      	mov	r5, r0
   d40bc:	f001 f856 	bl	d516c <_ZNK6String6equalsEPKc>
if (param == "si")
   d40c0:	b1b0      	cbz	r0, d40f0 <_Z12setParameter6StringS_+0x3c>
  {
      Serial.println("Setting sendInterval to: " + value);
   d40c2:	f001 fe55 	bl	d5d70 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d40c6:	4935      	ldr	r1, [pc, #212]	; (d419c <_Z12setParameter6StringS_+0xe8>)
   d40c8:	4605      	mov	r5, r0
   d40ca:	4668      	mov	r0, sp
   d40cc:	f000 ff7b 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d40d0:	4621      	mov	r1, r4
   d40d2:	4668      	mov	r0, sp
   d40d4:	f001 f82c 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d40d8:	6801      	ldr	r1, [r0, #0]
   d40da:	4628      	mov	r0, r5
   d40dc:	f001 f95f 	bl	d539e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d40e0:	4668      	mov	r0, sp
   d40e2:	f000 ff29 	bl	d4f38 <_ZN6StringD1Ev>
      sendInterval = value.toInt();
   d40e6:	4620      	mov	r0, r4
   d40e8:	f001 f90b 	bl	d5302 <_ZNK6String5toIntEv>
   d40ec:	4b2c      	ldr	r3, [pc, #176]	; (d41a0 <_Z12setParameter6StringS_+0xec>)
   d40ee:	e036      	b.n	d415e <_Z12setParameter6StringS_+0xaa>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f0:	492c      	ldr	r1, [pc, #176]	; (d41a4 <_Z12setParameter6StringS_+0xf0>)
   d40f2:	4628      	mov	r0, r5
   d40f4:	f001 f83a 	bl	d516c <_ZNK6String6equalsEPKc>
  }
  else if (param == "li")
   d40f8:	b1b0      	cbz	r0, d4128 <_Z12setParameter6StringS_+0x74>
  {
      Serial.println("Setting logInterval to: " + value);
   d40fa:	f001 fe39 	bl	d5d70 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d40fe:	492a      	ldr	r1, [pc, #168]	; (d41a8 <_Z12setParameter6StringS_+0xf4>)
   d4100:	4605      	mov	r5, r0
   d4102:	4668      	mov	r0, sp
   d4104:	f000 ff5f 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4108:	4621      	mov	r1, r4
   d410a:	4668      	mov	r0, sp
   d410c:	f001 f810 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d4110:	6801      	ldr	r1, [r0, #0]
   d4112:	4628      	mov	r0, r5
   d4114:	f001 f943 	bl	d539e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4118:	4668      	mov	r0, sp
   d411a:	f000 ff0d 	bl	d4f38 <_ZN6StringD1Ev>
      logInterval = value.toInt();
   d411e:	4620      	mov	r0, r4
   d4120:	f001 f8ef 	bl	d5302 <_ZNK6String5toIntEv>
   d4124:	4b21      	ldr	r3, [pc, #132]	; (d41ac <_Z12setParameter6StringS_+0xf8>)
   d4126:	e01a      	b.n	d415e <_Z12setParameter6StringS_+0xaa>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4128:	4921      	ldr	r1, [pc, #132]	; (d41b0 <_Z12setParameter6StringS_+0xfc>)
   d412a:	4628      	mov	r0, r5
   d412c:	f001 f81e 	bl	d516c <_ZNK6String6equalsEPKc>
  }
  else if (param == "sm")
   d4130:	b1b8      	cbz	r0, d4162 <_Z12setParameter6StringS_+0xae>
  {
      Serial.println("Setting statusInterval to: " + value);
   d4132:	f001 fe1d 	bl	d5d70 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4136:	491f      	ldr	r1, [pc, #124]	; (d41b4 <_Z12setParameter6StringS_+0x100>)
   d4138:	4605      	mov	r5, r0
   d413a:	4668      	mov	r0, sp
   d413c:	f000 ff43 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4140:	4621      	mov	r1, r4
   d4142:	4668      	mov	r0, sp
   d4144:	f000 fff4 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d4148:	6801      	ldr	r1, [r0, #0]
   d414a:	4628      	mov	r0, r5
   d414c:	f001 f927 	bl	d539e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4150:	4668      	mov	r0, sp
   d4152:	f000 fef1 	bl	d4f38 <_ZN6StringD1Ev>
      statusInterval = value.toInt();
   d4156:	4620      	mov	r0, r4
   d4158:	f001 f8d3 	bl	d5302 <_ZNK6String5toIntEv>
   d415c:	4b16      	ldr	r3, [pc, #88]	; (d41b8 <_Z12setParameter6StringS_+0x104>)
   d415e:	6018      	str	r0, [r3, #0]
   d4160:	e017      	b.n	d4192 <_Z12setParameter6StringS_+0xde>
  }
  else
  {
      Serial.println("Unknown parameter- " + param + ":" + value);
   d4162:	f001 fe05 	bl	d5d70 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4166:	4915      	ldr	r1, [pc, #84]	; (d41bc <_Z12setParameter6StringS_+0x108>)
   d4168:	4606      	mov	r6, r0
   d416a:	4668      	mov	r0, sp
   d416c:	f000 ff2b 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4170:	4629      	mov	r1, r5
   d4172:	4668      	mov	r0, sp
   d4174:	f000 ffdc 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d4178:	4911      	ldr	r1, [pc, #68]	; (d41c0 <_Z12setParameter6StringS_+0x10c>)
   d417a:	f000 ffe5 	bl	d5148 <_ZplRK15StringSumHelperPKc>
   d417e:	4621      	mov	r1, r4
   d4180:	f000 ffd6 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d4184:	6801      	ldr	r1, [r0, #0]
   d4186:	4630      	mov	r0, r6
   d4188:	f001 f909 	bl	d539e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d418c:	4668      	mov	r0, sp
   d418e:	f000 fed3 	bl	d4f38 <_ZN6StringD1Ev>
  }
  
  return true;
}
   d4192:	2001      	movs	r0, #1
   d4194:	b004      	add	sp, #16
   d4196:	bd70      	pop	{r4, r5, r6, pc}
   d4198:	000d69b8 	.word	0x000d69b8
   d419c:	000d69bb 	.word	0x000d69bb
   d41a0:	2003e1f8 	.word	0x2003e1f8
   d41a4:	000d69d5 	.word	0x000d69d5
   d41a8:	000d69d8 	.word	0x000d69d8
   d41ac:	2003e1f4 	.word	0x2003e1f4
   d41b0:	000d69f1 	.word	0x000d69f1
   d41b4:	000d69f4 	.word	0x000d69f4
   d41b8:	2003e1fc 	.word	0x2003e1fc
   d41bc:	000d6a10 	.word	0x000d6a10
   d41c0:	000d6a75 	.word	0x000d6a75

000d41c4 <_Z11parseString6String>:
  Serial.println("response received");
  parseString(data);
}
       
void parseString(String strVars)
{
   d41c4:	b570      	push	{r4, r5, r6, lr}
   d41c6:	b09c      	sub	sp, #112	; 0x70
   d41c8:	4605      	mov	r5, r0

  strVars = strVars.replace("\"","");
   d41ca:	4953      	ldr	r1, [pc, #332]	; (d4318 <_Z11parseString6String+0x154>)
   d41cc:	a814      	add	r0, sp, #80	; 0x50
   d41ce:	f000 fefa 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d41d2:	4952      	ldr	r1, [pc, #328]	; (d431c <_Z11parseString6String+0x158>)
   d41d4:	a818      	add	r0, sp, #96	; 0x60
   d41d6:	f000 fef6 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d41da:	aa18      	add	r2, sp, #96	; 0x60
   d41dc:	a914      	add	r1, sp, #80	; 0x50
   d41de:	4628      	mov	r0, r5
   d41e0:	f001 f808 	bl	d51f4 <_ZN6String7replaceERKS_S1_>
   d41e4:	4601      	mov	r1, r0
   d41e6:	4628      	mov	r0, r5
   d41e8:	f000 ff1d 	bl	d5026 <_ZN6StringaSERKS_>
   d41ec:	a818      	add	r0, sp, #96	; 0x60
   d41ee:	f000 fea3 	bl	d4f38 <_ZN6StringD1Ev>
   d41f2:	a814      	add	r0, sp, #80	; 0x50
   d41f4:	f000 fea0 	bl	d4f38 <_ZN6StringD1Ev>
  String parameter = ""; 
   d41f8:	4948      	ldr	r1, [pc, #288]	; (d431c <_Z11parseString6String+0x158>)
   d41fa:	4668      	mov	r0, sp
   d41fc:	f000 fee3 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
  String value = "";
   d4200:	4946      	ldr	r1, [pc, #280]	; (d431c <_Z11parseString6String+0x158>)
   d4202:	a804      	add	r0, sp, #16
   d4204:	f000 fedf 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
  String inChar = "";
   d4208:	4944      	ldr	r1, [pc, #272]	; (d431c <_Z11parseString6String+0x158>)
   d420a:	a808      	add	r0, sp, #32
   d420c:	f000 fedb 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4210:	2400      	movs	r4, #0
  int i = 0;
  bool readingParam = true;
   d4212:	2601      	movs	r6, #1
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4214:	4942      	ldr	r1, [pc, #264]	; (d4320 <_Z11parseString6String+0x15c>)
   d4216:	a808      	add	r0, sp, #32
   d4218:	f000 ffa8 	bl	d516c <_ZNK6String6equalsEPKc>

  while (inChar != ".")
   d421c:	b9d8      	cbnz	r0, d4256 <_Z11parseString6String+0x92>
  {
  inChar = strVars.charAt(i++);
   d421e:	4621      	mov	r1, r4
   d4220:	4628      	mov	r0, r5
   d4222:	f000 ffbe 	bl	d51a2 <_ZNK6String6charAtEj>
class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
   d4226:	4601      	mov	r1, r0
   d4228:	a818      	add	r0, sp, #96	; 0x60
   d422a:	f000 ff2f 	bl	d508c <_ZN6StringC1Ec>
   d422e:	a918      	add	r1, sp, #96	; 0x60
   d4230:	a808      	add	r0, sp, #32
   d4232:	f000 ff12 	bl	d505a <_ZN6StringaSEO15StringSumHelper>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4236:	a818      	add	r0, sp, #96	; 0x60
   d4238:	f000 fe7e 	bl	d4f38 <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d423c:	4939      	ldr	r1, [pc, #228]	; (d4324 <_Z11parseString6String+0x160>)
   d423e:	a808      	add	r0, sp, #32
   d4240:	f000 ff94 	bl	d516c <_ZNK6String6equalsEPKc>
  if (inChar != ":" and inChar != ",")
   d4244:	2800      	cmp	r0, #0
   d4246:	d140      	bne.n	d42ca <_Z11parseString6String+0x106>
   d4248:	4937      	ldr	r1, [pc, #220]	; (d4328 <_Z11parseString6String+0x164>)
   d424a:	a808      	add	r0, sp, #32
   d424c:	f000 ff8e 	bl	d516c <_ZNK6String6equalsEPKc>
   d4250:	2800      	cmp	r0, #0
   d4252:	d030      	beq.n	d42b6 <_Z11parseString6String+0xf2>
   d4254:	e039      	b.n	d42ca <_Z11parseString6String+0x106>
        value = ""; 
        readingParam = true;
      }
    }
  }
  setParameter(parameter,value.replace(".",""));
   d4256:	4669      	mov	r1, sp
   d4258:	a814      	add	r0, sp, #80	; 0x50
   d425a:	f000 fef3 	bl	d5044 <_ZN6StringC1ERKS_>
   d425e:	4930      	ldr	r1, [pc, #192]	; (d4320 <_Z11parseString6String+0x15c>)
   d4260:	a80c      	add	r0, sp, #48	; 0x30
   d4262:	f000 feb0 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4266:	492d      	ldr	r1, [pc, #180]	; (d431c <_Z11parseString6String+0x158>)
   d4268:	a810      	add	r0, sp, #64	; 0x40
   d426a:	f000 feac 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d426e:	aa10      	add	r2, sp, #64	; 0x40
   d4270:	a90c      	add	r1, sp, #48	; 0x30
   d4272:	a804      	add	r0, sp, #16
   d4274:	f000 ffbe 	bl	d51f4 <_ZN6String7replaceERKS_S1_>
   d4278:	4601      	mov	r1, r0
   d427a:	a818      	add	r0, sp, #96	; 0x60
   d427c:	f000 fee2 	bl	d5044 <_ZN6StringC1ERKS_>
   d4280:	a918      	add	r1, sp, #96	; 0x60
   d4282:	a814      	add	r0, sp, #80	; 0x50
   d4284:	f7ff ff16 	bl	d40b4 <_Z12setParameter6StringS_>
   d4288:	a818      	add	r0, sp, #96	; 0x60
   d428a:	f000 fe55 	bl	d4f38 <_ZN6StringD1Ev>
   d428e:	a810      	add	r0, sp, #64	; 0x40
   d4290:	f000 fe52 	bl	d4f38 <_ZN6StringD1Ev>
   d4294:	a80c      	add	r0, sp, #48	; 0x30
   d4296:	f000 fe4f 	bl	d4f38 <_ZN6StringD1Ev>
   d429a:	a814      	add	r0, sp, #80	; 0x50
   d429c:	f000 fe4c 	bl	d4f38 <_ZN6StringD1Ev>
        readingParam = false;
      }
      else
      {
        if (setParameter(parameter, value) == false)
          return;
   d42a0:	a808      	add	r0, sp, #32
   d42a2:	f000 fe49 	bl	d4f38 <_ZN6StringD1Ev>
   d42a6:	a804      	add	r0, sp, #16
   d42a8:	f000 fe46 	bl	d4f38 <_ZN6StringD1Ev>
   d42ac:	4668      	mov	r0, sp
   d42ae:	f000 fe43 	bl	d4f38 <_ZN6StringD1Ev>
        readingParam = true;
      }
    }
  }
  setParameter(parameter,value.replace(".",""));
}
   d42b2:	b01c      	add	sp, #112	; 0x70
   d42b4:	bd70      	pop	{r4, r5, r6, pc}
  while (inChar != ".")
  {
  inChar = strVars.charAt(i++);
  if (inChar != ":" and inChar != ",")
    {
    if (readingParam)
   d42b6:	b116      	cbz	r6, d42be <_Z11parseString6String+0xfa>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d42b8:	a908      	add	r1, sp, #32
   d42ba:	4668      	mov	r0, sp
   d42bc:	e001      	b.n	d42c2 <_Z11parseString6String+0xfe>
   d42be:	a908      	add	r1, sp, #32
   d42c0:	a804      	add	r0, sp, #16
   d42c2:	f000 ff31 	bl	d5128 <_ZN6String6concatERKS_>
   d42c6:	3401      	adds	r4, #1
   d42c8:	e7a4      	b.n	d4214 <_Z11parseString6String+0x50>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d42ca:	4916      	ldr	r1, [pc, #88]	; (d4324 <_Z11parseString6String+0x160>)
   d42cc:	a808      	add	r0, sp, #32
   d42ce:	f000 ff4d 	bl	d516c <_ZNK6String6equalsEPKc>
    else
      value += inChar;    
    }
  else
    {
      if (inChar == ":")
   d42d2:	b108      	cbz	r0, d42d8 <_Z11parseString6String+0x114>
      {
        readingParam = false;
   d42d4:	2600      	movs	r6, #0
   d42d6:	e7f6      	b.n	d42c6 <_Z11parseString6String+0x102>
      }
      else
      {
        if (setParameter(parameter, value) == false)
   d42d8:	4669      	mov	r1, sp
   d42da:	a814      	add	r0, sp, #80	; 0x50
   d42dc:	f000 feb2 	bl	d5044 <_ZN6StringC1ERKS_>
   d42e0:	a904      	add	r1, sp, #16
   d42e2:	a818      	add	r0, sp, #96	; 0x60
   d42e4:	f000 feae 	bl	d5044 <_ZN6StringC1ERKS_>
   d42e8:	a918      	add	r1, sp, #96	; 0x60
   d42ea:	a814      	add	r0, sp, #80	; 0x50
   d42ec:	f7ff fee2 	bl	d40b4 <_Z12setParameter6StringS_>
   d42f0:	4606      	mov	r6, r0
   d42f2:	a818      	add	r0, sp, #96	; 0x60
   d42f4:	f000 fe20 	bl	d4f38 <_ZN6StringD1Ev>
   d42f8:	a814      	add	r0, sp, #80	; 0x50
   d42fa:	f000 fe1d 	bl	d4f38 <_ZN6StringD1Ev>
   d42fe:	2e00      	cmp	r6, #0
   d4300:	d0ce      	beq.n	d42a0 <_Z11parseString6String+0xdc>
          return;
        parameter = "";
   d4302:	4906      	ldr	r1, [pc, #24]	; (d431c <_Z11parseString6String+0x158>)
   d4304:	4668      	mov	r0, sp
   d4306:	f000 feb0 	bl	d506a <_ZN6StringaSEPKc>
        value = ""; 
   d430a:	4904      	ldr	r1, [pc, #16]	; (d431c <_Z11parseString6String+0x158>)
   d430c:	a804      	add	r0, sp, #16
   d430e:	f000 feac 	bl	d506a <_ZN6StringaSEPKc>
        readingParam = true;
   d4312:	2601      	movs	r6, #1
   d4314:	e7d7      	b.n	d42c6 <_Z11parseString6String+0x102>
   d4316:	bf00      	nop
   d4318:	000d6a24 	.word	0x000d6a24
   d431c:	000d6b87 	.word	0x000d6b87
   d4320:	000d6a26 	.word	0x000d6a26
   d4324:	000d6a75 	.word	0x000d6a75
   d4328:	000d6a7c 	.word	0x000d6a7c

000d432c <_Z9myHandlerPKcS0_>:

  Particle.subscribe(System.deviceID() + "/hook-response/Status", myHandler, MY_DEVICES);

  Serial.println("Starting");
}
void myHandler(const char *event, const char *data) {
   d432c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d432e:	460c      	mov	r4, r1
  Serial.println("response received");
   d4330:	f001 fd1e 	bl	d5d70 <_Z16_fetch_usbserialv>
   d4334:	4907      	ldr	r1, [pc, #28]	; (d4354 <_Z9myHandlerPKcS0_+0x28>)
   d4336:	f001 f832 	bl	d539e <_ZN5Print7printlnEPKc>
  parseString(data);
   d433a:	4621      	mov	r1, r4
   d433c:	4668      	mov	r0, sp
   d433e:	f000 fe42 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4342:	4668      	mov	r0, sp
   d4344:	f7ff ff3e 	bl	d41c4 <_Z11parseString6String>
   d4348:	4668      	mov	r0, sp
   d434a:	f000 fdf5 	bl	d4f38 <_ZN6StringD1Ev>
}
   d434e:	b004      	add	sp, #16
   d4350:	bd10      	pop	{r4, pc}
   d4352:	bf00      	nop
   d4354:	000d6a28 	.word	0x000d6a28

000d4358 <_Z14initConnectionv>:
{
  initConnection();
  Particle.syncTime();
}
void initConnection()
{
   d4358:	b510      	push	{r4, lr}
   d435a:	4c14      	ldr	r4, [pc, #80]	; (d43ac <_Z14initConnectionv+0x54>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d435c:	2300      	movs	r3, #0
   d435e:	461a      	mov	r2, r3
   d4360:	4619      	mov	r1, r3
   d4362:	6860      	ldr	r0, [r4, #4]
   d4364:	f000 fc30 	bl	d4bc8 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4368:	2300      	movs	r3, #0
   d436a:	461a      	mov	r2, r3
   d436c:	4619      	mov	r1, r3
   d436e:	6860      	ldr	r0, [r4, #4]
   d4370:	f000 fc0a 	bl	d4b88 <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4374:	2200      	movs	r2, #0
   d4376:	4611      	mov	r1, r2
   d4378:	6860      	ldr	r0, [r4, #4]
   d437a:	f000 fc1d 	bl	d4bb8 <network_ready>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d437e:	b168      	cbz	r0, d439c <_Z14initConnectionv+0x44>
   d4380:	4b0a      	ldr	r3, [pc, #40]	; (d43ac <_Z14initConnectionv+0x54>)
   d4382:	2200      	movs	r2, #0
   d4384:	4611      	mov	r1, r2
   d4386:	6858      	ldr	r0, [r3, #4]
   d4388:	f000 fc16 	bl	d4bb8 <network_ready>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d438c:	f000 fc54 	bl	d4c38 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4390:	f000 fc62 	bl	d4c58 <spark_cloud_flag_connected>
   d4394:	b928      	cbnz	r0, d43a2 <_Z14initConnectionv+0x4a>
            spark_process();
   d4396:	f000 fc47 	bl	d4c28 <spark_process>
   d439a:	e7f9      	b.n	d4390 <_Z14initConnectionv+0x38>
   d439c:	f000 fc44 	bl	d4c28 <spark_process>
   d43a0:	e7e8      	b.n	d4374 <_Z14initConnectionv+0x1c>
  Cellular.on();
  Cellular.connect();
  waitUntil(Cellular.ready);
  Particle.connect();
  waitUntil(Particle.connected);
}
   d43a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d43a6:	f000 bc57 	b.w	d4c58 <spark_cloud_flag_connected>
   d43aa:	bf00      	nop
   d43ac:	2003e3e8 	.word	0x2003e3e8

000d43b0 <_Z12initSyncTimev>:
    calculateRainGaugeData();
  }

}
void initSyncTime()
{
   d43b0:	b508      	push	{r3, lr}
  initConnection();
   d43b2:	f7ff ffd1 	bl	d4358 <_Z14initConnectionv>
   d43b6:	f000 fc4f 	bl	d4c58 <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d43ba:	b120      	cbz	r0, d43c6 <_Z12initSyncTimev+0x16>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d43bc:	2000      	movs	r0, #0
  Particle.syncTime();
}
   d43be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d43c2:	f000 bc69 	b.w	d4c98 <spark_sync_time>
   d43c6:	bd08      	pop	{r3, pc}

000d43c8 <setup>:
PRODUCT_VERSION(1.0);

SYSTEM_MODE (MANUAL);

void setup()
{ 
   d43c8:	b530      	push	{r4, r5, lr}
  delay(3000);
   d43ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
PRODUCT_VERSION(1.0);

SYSTEM_MODE (MANUAL);

void setup()
{ 
   d43ce:	b08b      	sub	sp, #44	; 0x2c
  delay(3000);
   d43d0:	f001 f89c 	bl	d550c <delay>
  Serial.begin(9600);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
   d43d4:	4d20      	ldr	r5, [pc, #128]	; (d4458 <setup+0x90>)
  pinMode(led2, OUTPUT);
   d43d6:	4c21      	ldr	r4, [pc, #132]	; (d445c <setup+0x94>)
SYSTEM_MODE (MANUAL);

void setup()
{ 
  delay(3000);
  Serial.begin(9600);
   d43d8:	f001 fcca 	bl	d5d70 <_Z16_fetch_usbserialv>
   d43dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43e0:	f001 fcba 	bl	d5d58 <_ZN9USBSerial5beginEl>
  pinMode(buttonPin, INPUT_PULLUP);
   d43e4:	2102      	movs	r1, #2
   d43e6:	2004      	movs	r0, #4
   d43e8:	f001 ff9e 	bl	d6328 <pinMode>
  pinMode(led1, OUTPUT);
   d43ec:	8828      	ldrh	r0, [r5, #0]
   d43ee:	2101      	movs	r1, #1
   d43f0:	f001 ff9a 	bl	d6328 <pinMode>
  pinMode(led2, OUTPUT);
   d43f4:	8820      	ldrh	r0, [r4, #0]
   d43f6:	2101      	movs	r1, #1
   d43f8:	f001 ff96 	bl	d6328 <pinMode>
  digitalWrite(led1, LOW);
   d43fc:	8828      	ldrh	r0, [r5, #0]
   d43fe:	2100      	movs	r1, #0
   d4400:	f001 ffa3 	bl	d634a <digitalWrite>
  digitalWrite(led2, LOW);
   d4404:	2100      	movs	r1, #0
   d4406:	8820      	ldrh	r0, [r4, #0]
   d4408:	f001 ff9f 	bl	d634a <digitalWrite>
  initSyncTime();
   d440c:	f7ff ffd0 	bl	d43b0 <_Z12initSyncTimev>
  prevTime = Time.now();          /***** Use full Epoch time, not minutes  ******/
   d4410:	f001 f86a 	bl	d54e8 <_ZN9TimeClass3nowEv>
   d4414:	4b12      	ldr	r3, [pc, #72]	; (d4460 <setup+0x98>)
   d4416:	6018      	str	r0, [r3, #0]
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4418:	a802      	add	r0, sp, #8
   d441a:	f000 fc25 	bl	d4c68 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d441e:	a902      	add	r1, sp, #8
   d4420:	a806      	add	r0, sp, #24
   d4422:	f000 fe0f 	bl	d5044 <_ZN6StringC1ERKS_>

  Particle.subscribe(System.deviceID() + "/hook-response/Status", myHandler, MY_DEVICES);
   d4426:	490f      	ldr	r1, [pc, #60]	; (d4464 <setup+0x9c>)
   d4428:	a806      	add	r0, sp, #24
   d442a:	f000 fe8d 	bl	d5148 <_ZplRK15StringSumHelperPKc>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d442e:	2300      	movs	r3, #0
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	9300      	str	r3, [sp, #0]
   d4434:	461a      	mov	r2, r3
   d4436:	490c      	ldr	r1, [pc, #48]	; (d4468 <setup+0xa0>)
   d4438:	6800      	ldr	r0, [r0, #0]
   d443a:	f000 fc25 	bl	d4c88 <spark_subscribe>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d443e:	a806      	add	r0, sp, #24
   d4440:	f000 fd7a 	bl	d4f38 <_ZN6StringD1Ev>
   d4444:	a802      	add	r0, sp, #8
   d4446:	f000 fd77 	bl	d4f38 <_ZN6StringD1Ev>

  Serial.println("Starting");
   d444a:	f001 fc91 	bl	d5d70 <_Z16_fetch_usbserialv>
   d444e:	4907      	ldr	r1, [pc, #28]	; (d446c <setup+0xa4>)
   d4450:	f000 ffa5 	bl	d539e <_ZN5Print7printlnEPKc>
}
   d4454:	b00b      	add	sp, #44	; 0x2c
   d4456:	bd30      	pop	{r4, r5, pc}
   d4458:	2003e398 	.word	0x2003e398
   d445c:	2003e1f0 	.word	0x2003e1f0
   d4460:	2003e38c 	.word	0x2003e38c
   d4464:	000d6a3a 	.word	0x000d6a3a
   d4468:	000d432d 	.word	0x000d432d
   d446c:	000d6a50 	.word	0x000d6a50

000d4470 <_Z20disconnectConnectionv>:
  waitUntil(Cellular.ready);
  Particle.connect();
  waitUntil(Particle.connected);
}
void disconnectConnection()
{
   d4470:	b510      	push	{r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d4472:	f000 fbe9 	bl	d4c48 <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4476:	f000 fbef 	bl	d4c58 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d447a:	4604      	mov	r4, r0
   d447c:	b950      	cbnz	r0, d4494 <_Z20disconnectConnectionv+0x24>
   d447e:	f000 fbeb 	bl	d4c58 <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4482:	4806      	ldr	r0, [pc, #24]	; (d449c <_Z20disconnectConnectionv+0x2c>)
   d4484:	4623      	mov	r3, r4
   d4486:	4622      	mov	r2, r4
   d4488:	4621      	mov	r1, r4
   d448a:	6840      	ldr	r0, [r0, #4]
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4490:	f000 bba2 	b.w	d4bd8 <network_off>
            spark_process();
   d4494:	f000 fbc8 	bl	d4c28 <spark_process>
   d4498:	e7ed      	b.n	d4476 <_Z20disconnectConnectionv+0x6>
   d449a:	bf00      	nop
   d449c:	2003e3e8 	.word	0x2003e3e8

000d44a0 <_Z22calculateRainGaugeDatav>:
void calculateRainGaugeData()
{
   d44a0:	b510      	push	{r4, lr}
  if (buttonState == HIGH)
   d44a2:	4b0a      	ldr	r3, [pc, #40]	; (d44cc <_Z22calculateRainGaugeDatav+0x2c>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	2b01      	cmp	r3, #1
   d44a8:	d00f      	beq.n	d44ca <_Z22calculateRainGaugeDatav+0x2a>
  // turn LED on:
  //Serial.println("HIGH");
  }
  else
  {
    tripCount++;
   d44aa:	4c09      	ldr	r4, [pc, #36]	; (d44d0 <_Z22calculateRainGaugeDatav+0x30>)
   d44ac:	6823      	ldr	r3, [r4, #0]
    delay(400);
   d44ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
  // turn LED on:
  //Serial.println("HIGH");
  }
  else
  {
    tripCount++;
   d44b2:	3301      	adds	r3, #1
   d44b4:	6023      	str	r3, [r4, #0]
    delay(400);
   d44b6:	f001 f829 	bl	d550c <delay>
    Serial.println(tripCount);
   d44ba:	f001 fc59 	bl	d5d70 <_Z16_fetch_usbserialv>
   d44be:	6821      	ldr	r1, [r4, #0]
   d44c0:	220a      	movs	r2, #10
  }
   d44c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else
  {
    tripCount++;
    delay(400);
    Serial.println(tripCount);
   d44c6:	f000 bfc5 	b.w	d5454 <_ZN5Print7printlnEii>
   d44ca:	bd10      	pop	{r4, pc}
   d44cc:	2003e394 	.word	0x2003e394
   d44d0:	2003e384 	.word	0x2003e384

000d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d44d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d44d6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d44d8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d44da:	b17c      	cbz	r4, d44fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d44dc:	6863      	ldr	r3, [r4, #4]
   d44de:	3b01      	subs	r3, #1
   d44e0:	6063      	str	r3, [r4, #4]
   d44e2:	b95b      	cbnz	r3, d44fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d44e4:	6823      	ldr	r3, [r4, #0]
   d44e6:	4620      	mov	r0, r4
   d44e8:	689b      	ldr	r3, [r3, #8]
   d44ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d44ec:	68a3      	ldr	r3, [r4, #8]
   d44ee:	3b01      	subs	r3, #1
   d44f0:	60a3      	str	r3, [r4, #8]
   d44f2:	b91b      	cbnz	r3, d44fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d44f4:	6823      	ldr	r3, [r4, #0]
   d44f6:	4620      	mov	r0, r4
   d44f8:	68db      	ldr	r3, [r3, #12]
   d44fa:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d44fc:	4628      	mov	r0, r5
   d44fe:	bd38      	pop	{r3, r4, r5, pc}

000d4500 <_Z13statusMessagev>:
  return true;
}

/****  Every version of code should contain a daily status message and wait for response  ****/
void statusMessage()
{
   d4500:	b510      	push	{r4, lr}
   d4502:	b09a      	sub	sp, #104	; 0x68
  initConnection();
   d4504:	f7ff ff28 	bl	d4358 <_Z14initConnectionv>
  String message =  String(Time.now()) + "," + "Status,li:" + (String)logInterval + ",si:" + (String)sendInterval + ",sm:" + (String)statusInterval;
   d4508:	f000 ffee 	bl	d54e8 <_ZN9TimeClass3nowEv>
   d450c:	220a      	movs	r2, #10
   d450e:	4601      	mov	r1, r0
   d4510:	a806      	add	r0, sp, #24
   d4512:	f000 fddf 	bl	d50d4 <_ZN6StringC1Elh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4516:	a906      	add	r1, sp, #24
   d4518:	a80a      	add	r0, sp, #40	; 0x28
   d451a:	f000 fd93 	bl	d5044 <_ZN6StringC1ERKS_>
   d451e:	492e      	ldr	r1, [pc, #184]	; (d45d8 <_Z13statusMessagev+0xd8>)
   d4520:	a80a      	add	r0, sp, #40	; 0x28
   d4522:	f000 fe11 	bl	d5148 <_ZplRK15StringSumHelperPKc>
   d4526:	492d      	ldr	r1, [pc, #180]	; (d45dc <_Z13statusMessagev+0xdc>)
   d4528:	f000 fe0e 	bl	d5148 <_ZplRK15StringSumHelperPKc>
   d452c:	4b2c      	ldr	r3, [pc, #176]	; (d45e0 <_Z13statusMessagev+0xe0>)
   d452e:	220a      	movs	r2, #10
   d4530:	6819      	ldr	r1, [r3, #0]
   d4532:	4604      	mov	r4, r0
   d4534:	a80e      	add	r0, sp, #56	; 0x38
   d4536:	f000 fdba 	bl	d50ae <_ZN6StringC1Eih>
   d453a:	a90e      	add	r1, sp, #56	; 0x38
   d453c:	4620      	mov	r0, r4
   d453e:	f000 fdf7 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d4542:	4928      	ldr	r1, [pc, #160]	; (d45e4 <_Z13statusMessagev+0xe4>)
   d4544:	f000 fe00 	bl	d5148 <_ZplRK15StringSumHelperPKc>
   d4548:	4b27      	ldr	r3, [pc, #156]	; (d45e8 <_Z13statusMessagev+0xe8>)
   d454a:	220a      	movs	r2, #10
   d454c:	6819      	ldr	r1, [r3, #0]
   d454e:	4604      	mov	r4, r0
   d4550:	a812      	add	r0, sp, #72	; 0x48
   d4552:	f000 fdac 	bl	d50ae <_ZN6StringC1Eih>
   d4556:	a912      	add	r1, sp, #72	; 0x48
   d4558:	4620      	mov	r0, r4
   d455a:	f000 fde9 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d455e:	4923      	ldr	r1, [pc, #140]	; (d45ec <_Z13statusMessagev+0xec>)
   d4560:	f000 fdf2 	bl	d5148 <_ZplRK15StringSumHelperPKc>
   d4564:	4b22      	ldr	r3, [pc, #136]	; (d45f0 <_Z13statusMessagev+0xf0>)
   d4566:	220a      	movs	r2, #10
   d4568:	6819      	ldr	r1, [r3, #0]
   d456a:	4604      	mov	r4, r0
   d456c:	a816      	add	r0, sp, #88	; 0x58
   d456e:	f000 fd9e 	bl	d50ae <_ZN6StringC1Eih>
   d4572:	a916      	add	r1, sp, #88	; 0x58
   d4574:	4620      	mov	r0, r4
   d4576:	f000 fddb 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d457a:	4601      	mov	r1, r0
   d457c:	a802      	add	r0, sp, #8
   d457e:	f000 fd61 	bl	d5044 <_ZN6StringC1ERKS_>
   d4582:	a816      	add	r0, sp, #88	; 0x58
   d4584:	f000 fcd8 	bl	d4f38 <_ZN6StringD1Ev>
   d4588:	a812      	add	r0, sp, #72	; 0x48
   d458a:	f000 fcd5 	bl	d4f38 <_ZN6StringD1Ev>
   d458e:	a80e      	add	r0, sp, #56	; 0x38
   d4590:	f000 fcd2 	bl	d4f38 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4594:	a80a      	add	r0, sp, #40	; 0x28
   d4596:	f000 fccf 	bl	d4f38 <_ZN6StringD1Ev>
   d459a:	a806      	add	r0, sp, #24
   d459c:	f000 fccc 	bl	d4f38 <_ZN6StringD1Ev>
   d45a0:	4b14      	ldr	r3, [pc, #80]	; (d45f4 <_Z13statusMessagev+0xf4>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d45a2:	9a02      	ldr	r2, [sp, #8]
   d45a4:	781b      	ldrb	r3, [r3, #0]
   d45a6:	4914      	ldr	r1, [pc, #80]	; (d45f8 <_Z13statusMessagev+0xf8>)
   d45a8:	f88d 3000 	strb.w	r3, [sp]
   d45ac:	a816      	add	r0, sp, #88	; 0x58
   d45ae:	233c      	movs	r3, #60	; 0x3c
   d45b0:	f001 f988 	bl	d58c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d45b4:	a817      	add	r0, sp, #92	; 0x5c
   d45b6:	f7ff ff8d 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("Status", message, PRIVATE);
  lastStatusMessage = Time.now();
   d45ba:	f000 ff95 	bl	d54e8 <_ZN9TimeClass3nowEv>
   d45be:	4b0f      	ldr	r3, [pc, #60]	; (d45fc <_Z13statusMessagev+0xfc>)
   d45c0:	6018      	str	r0, [r3, #0]
  delay(10000);
   d45c2:	f242 7010 	movw	r0, #10000	; 0x2710
   d45c6:	f000 ffa1 	bl	d550c <delay>
  disconnectConnection();
   d45ca:	f7ff ff51 	bl	d4470 <_Z20disconnectConnectionv>

/****  Every version of code should contain a daily status message and wait for response  ****/
void statusMessage()
{
  initConnection();
  String message =  String(Time.now()) + "," + "Status,li:" + (String)logInterval + ",si:" + (String)sendInterval + ",sm:" + (String)statusInterval;
   d45ce:	a802      	add	r0, sp, #8
   d45d0:	f000 fcb2 	bl	d4f38 <_ZN6StringD1Ev>
  Particle.publish("Status", message, PRIVATE);
  lastStatusMessage = Time.now();
  delay(10000);
  disconnectConnection();

}
   d45d4:	b01a      	add	sp, #104	; 0x68
   d45d6:	bd10      	pop	{r4, pc}
   d45d8:	000d6a7c 	.word	0x000d6a7c
   d45dc:	000d6a59 	.word	0x000d6a59
   d45e0:	2003e1f4 	.word	0x2003e1f4
   d45e4:	000d6a64 	.word	0x000d6a64
   d45e8:	2003e1f8 	.word	0x2003e1f8
   d45ec:	000d6a69 	.word	0x000d6a69
   d45f0:	2003e1fc 	.word	0x2003e1fc
   d45f4:	2003e388 	.word	0x2003e388
   d45f8:	000d6a49 	.word	0x000d6a49
   d45fc:	2003e2f0 	.word	0x2003e2f0

000d4600 <loop>:

void loop()
{
   d4600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4604:	b08a      	sub	sp, #40	; 0x28
  currentTime = Time.now();
   d4606:	f000 ff6f 	bl	d54e8 <_ZN9TimeClass3nowEv>
   d460a:	4c6b      	ldr	r4, [pc, #428]	; (d47b8 <loop+0x1b8>)
   d460c:	6020      	str	r0, [r4, #0]
  buttonState = digitalRead(buttonPin);
   d460e:	2004      	movs	r0, #4
   d4610:	f001 feb4 	bl	d637c <digitalRead>
   d4614:	4b69      	ldr	r3, [pc, #420]	; (d47bc <loop+0x1bc>)

  /******* Check if status message is due  *****/
  if (lastStatusMessage + (60 * statusInterval) < Time.now() )
   d4616:	4a6a      	ldr	r2, [pc, #424]	; (d47c0 <loop+0x1c0>)
}

void loop()
{
  currentTime = Time.now();
  buttonState = digitalRead(buttonPin);
   d4618:	6018      	str	r0, [r3, #0]

  /******* Check if status message is due  *****/
  if (lastStatusMessage + (60 * statusInterval) < Time.now() )
   d461a:	4b6a      	ldr	r3, [pc, #424]	; (d47c4 <loop+0x1c4>)
   d461c:	6812      	ldr	r2, [r2, #0]
   d461e:	681b      	ldr	r3, [r3, #0]
   d4620:	253c      	movs	r5, #60	; 0x3c
   d4622:	fb05 2503 	mla	r5, r5, r3, r2
   d4626:	f000 ff5f 	bl	d54e8 <_ZN9TimeClass3nowEv>
   d462a:	4285      	cmp	r5, r0
   d462c:	da01      	bge.n	d4632 <loop+0x32>
  {
    statusMessage();
   d462e:	f7ff ff67 	bl	d4500 <_Z13statusMessagev>
  }

  if ((currentTime - prevTime >= (logInterval * 60)) && scheduledWakeup)
   d4632:	f8df 91c8 	ldr.w	r9, [pc, #456]	; d47fc <loop+0x1fc>
   d4636:	6823      	ldr	r3, [r4, #0]
   d4638:	f8df 81c4 	ldr.w	r8, [pc, #452]	; d4800 <loop+0x200>
   d463c:	f8d9 2000 	ldr.w	r2, [r9]
   d4640:	4d61      	ldr	r5, [pc, #388]	; (d47c8 <loop+0x1c8>)
   d4642:	1a9a      	subs	r2, r3, r2
   d4644:	f8d8 3000 	ldr.w	r3, [r8]
   d4648:	273c      	movs	r7, #60	; 0x3c
   d464a:	437b      	muls	r3, r7
   d464c:	429a      	cmp	r2, r3
   d464e:	4646      	mov	r6, r8
   d4650:	f2c0 8092 	blt.w	d4778 <loop+0x178>
   d4654:	682b      	ldr	r3, [r5, #0]
   d4656:	2b00      	cmp	r3, #0
   d4658:	f000 808e 	beq.w	d4778 <loop+0x178>
  {

    strcat(payload,",");
    strcat(payload,String(tripCount));
   d465c:	f8df a1a4 	ldr.w	sl, [pc, #420]	; d4804 <loop+0x204>
  }

  if ((currentTime - prevTime >= (logInterval * 60)) && scheduledWakeup)
  {

    strcat(payload,",");
   d4660:	495a      	ldr	r1, [pc, #360]	; (d47cc <loop+0x1cc>)
   d4662:	485b      	ldr	r0, [pc, #364]	; (d47d0 <loop+0x1d0>)

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevTime);
     
    samplesLogged++;
   d4664:	4c5b      	ldr	r4, [pc, #364]	; (d47d4 <loop+0x1d4>)
  }

  if ((currentTime - prevTime >= (logInterval * 60)) && scheduledWakeup)
  {

    strcat(payload,",");
   d4666:	f002 f8ad 	bl	d67c4 <strcat>
    strcat(payload,String(tripCount));
   d466a:	220a      	movs	r2, #10
   d466c:	f8da 1000 	ldr.w	r1, [sl]
   d4670:	a806      	add	r0, sp, #24
   d4672:	f000 fd1c 	bl	d50ae <_ZN6StringC1Eih>
   d4676:	9906      	ldr	r1, [sp, #24]
   d4678:	4855      	ldr	r0, [pc, #340]	; (d47d0 <loop+0x1d0>)
   d467a:	f002 f8a3 	bl	d67c4 <strcat>
   d467e:	a806      	add	r0, sp, #24
   d4680:	f000 fc5a 	bl	d4f38 <_ZN6StringD1Ev>

    Serial.print("Payload:");
   d4684:	f001 fb74 	bl	d5d70 <_Z16_fetch_usbserialv>
   d4688:	4953      	ldr	r1, [pc, #332]	; (d47d8 <loop+0x1d8>)
   d468a:	f000 fe75 	bl	d5378 <_ZN5Print5printEPKc>
    Serial.println(payload);
   d468e:	f001 fb6f 	bl	d5d70 <_Z16_fetch_usbserialv>
   d4692:	494f      	ldr	r1, [pc, #316]	; (d47d0 <loop+0x1d0>)
   d4694:	f000 fe83 	bl	d539e <_ZN5Print7printlnEPKc>
    Serial.println(prevTime);
   d4698:	f001 fb6a 	bl	d5d70 <_Z16_fetch_usbserialv>
   d469c:	220a      	movs	r2, #10
   d469e:	f8d9 1000 	ldr.w	r1, [r9]
   d46a2:	f000 fee1 	bl	d5468 <_ZN5Print7printlnEli>
     
    samplesLogged++;
    tripCount = 0;
    prevTime = currentTime;
   d46a6:	4a44      	ldr	r2, [pc, #272]	; (d47b8 <loop+0x1b8>)

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevTime);
     
    samplesLogged++;
   d46a8:	6823      	ldr	r3, [r4, #0]
    tripCount = 0;
    prevTime = currentTime;
   d46aa:	6812      	ldr	r2, [r2, #0]
   d46ac:	f8c9 2000 	str.w	r2, [r9]

    if (samplesLogged >= sendInterval)
   d46b0:	f8df 9154 	ldr.w	r9, [pc, #340]	; d4808 <loop+0x208>
   d46b4:	f8d9 2000 	ldr.w	r2, [r9]

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevTime);
     
    samplesLogged++;
   d46b8:	3301      	adds	r3, #1
    tripCount = 0;
   d46ba:	2600      	movs	r6, #0
    prevTime = currentTime;

    if (samplesLogged >= sendInterval)
   d46bc:	4293      	cmp	r3, r2

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevTime);
     
    samplesLogged++;
   d46be:	6023      	str	r3, [r4, #0]
    tripCount = 0;
   d46c0:	f8ca 6000 	str.w	r6, [sl]
    prevTime = currentTime;

    if (samplesLogged >= sendInterval)
   d46c4:	db74      	blt.n	d47b0 <loop+0x1b0>
    {
      strcpy(totalPayload,String(Time.now()-(60*sendInterval*samplesLogged)));
   d46c6:	f000 ff0f 	bl	d54e8 <_ZN9TimeClass3nowEv>
   d46ca:	f8d9 1000 	ldr.w	r1, [r9]
   d46ce:	6823      	ldr	r3, [r4, #0]
   d46d0:	4379      	muls	r1, r7
   d46d2:	fb03 0111 	mls	r1, r3, r1, r0
   d46d6:	220a      	movs	r2, #10
   d46d8:	a806      	add	r0, sp, #24
   d46da:	f000 fcfb 	bl	d50d4 <_ZN6StringC1Elh>
   d46de:	9906      	ldr	r1, [sp, #24]
   d46e0:	483e      	ldr	r0, [pc, #248]	; (d47dc <loop+0x1dc>)
   d46e2:	f002 f888 	bl	d67f6 <strcpy>
   d46e6:	a806      	add	r0, sp, #24
   d46e8:	f000 fc26 	bl	d4f38 <_ZN6StringD1Ev>
      strcat(totalPayload,",1043,");
   d46ec:	493c      	ldr	r1, [pc, #240]	; (d47e0 <loop+0x1e0>)
   d46ee:	483b      	ldr	r0, [pc, #236]	; (d47dc <loop+0x1dc>)
   d46f0:	f002 f868 	bl	d67c4 <strcat>
      strcat(totalPayload,String(logInterval));
   d46f4:	220a      	movs	r2, #10
   d46f6:	f8d8 1000 	ldr.w	r1, [r8]
   d46fa:	a806      	add	r0, sp, #24
   d46fc:	f000 fcd7 	bl	d50ae <_ZN6StringC1Eih>
   d4700:	9906      	ldr	r1, [sp, #24]
   d4702:	4836      	ldr	r0, [pc, #216]	; (d47dc <loop+0x1dc>)
   d4704:	f002 f85e 	bl	d67c4 <strcat>
   d4708:	a806      	add	r0, sp, #24
   d470a:	f000 fc15 	bl	d4f38 <_ZN6StringD1Ev>
      strcat(totalPayload,payload);
   d470e:	4930      	ldr	r1, [pc, #192]	; (d47d0 <loop+0x1d0>)
   d4710:	4832      	ldr	r0, [pc, #200]	; (d47dc <loop+0x1dc>)
   d4712:	f002 f857 	bl	d67c4 <strcat>
      initConnection();
   d4716:	f7ff fe1f 	bl	d4358 <_Z14initConnectionv>
   d471a:	4b32      	ldr	r3, [pc, #200]	; (d47e4 <loop+0x1e4>)
   d471c:	4a2f      	ldr	r2, [pc, #188]	; (d47dc <loop+0x1dc>)
   d471e:	781b      	ldrb	r3, [r3, #0]
   d4720:	4931      	ldr	r1, [pc, #196]	; (d47e8 <loop+0x1e8>)
   d4722:	f88d 3000 	strb.w	r3, [sp]
   d4726:	a806      	add	r0, sp, #24
   d4728:	463b      	mov	r3, r7
   d472a:	f001 f8cb 	bl	d58c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d472e:	a807      	add	r0, sp, #28
   d4730:	f7ff fed0 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("Counter", totalPayload, PRIVATE);
      Serial.println("totalPayload: " + (String)totalPayload);
   d4734:	f001 fb1c 	bl	d5d70 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4738:	492c      	ldr	r1, [pc, #176]	; (d47ec <loop+0x1ec>)
   d473a:	4607      	mov	r7, r0
   d473c:	a806      	add	r0, sp, #24
   d473e:	f000 fc42 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4742:	4926      	ldr	r1, [pc, #152]	; (d47dc <loop+0x1dc>)
   d4744:	a802      	add	r0, sp, #8
   d4746:	f000 fc3e 	bl	d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>
   d474a:	a902      	add	r1, sp, #8
   d474c:	a806      	add	r0, sp, #24
   d474e:	f000 fcef 	bl	d5130 <_ZplRK15StringSumHelperRK6String>
   d4752:	6801      	ldr	r1, [r0, #0]
   d4754:	4638      	mov	r0, r7
   d4756:	f000 fe22 	bl	d539e <_ZN5Print7printlnEPKc>
   d475a:	a802      	add	r0, sp, #8
   d475c:	f000 fbec 	bl	d4f38 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4760:	a806      	add	r0, sp, #24
   d4762:	f000 fbe9 	bl	d4f38 <_ZN6StringD1Ev>
      disconnectConnection();
   d4766:	f7ff fe83 	bl	d4470 <_Z20disconnectConnectionv>
      strcpy(payload,"");
   d476a:	4921      	ldr	r1, [pc, #132]	; (d47f0 <loop+0x1f0>)
   d476c:	4818      	ldr	r0, [pc, #96]	; (d47d0 <loop+0x1d0>)
   d476e:	f002 f842 	bl	d67f6 <strcpy>
      samplesLogged = 0;
   d4772:	6026      	str	r6, [r4, #0]
      scheduledWakeup = 0;
   d4774:	602e      	str	r6, [r5, #0]
   d4776:	e01b      	b.n	d47b0 <loop+0x1b0>
    }    
  }
  else
  {
    if (!scheduledWakeup)
   d4778:	682c      	ldr	r4, [r5, #0]
   d477a:	b9bc      	cbnz	r4, d47ac <loop+0x1ac>
    {
      disconnectConnection();
   d477c:	f7ff fe78 	bl	d4470 <_Z20disconnectConnectionv>
      Serial.println("Sleep");
   d4780:	f001 faf6 	bl	d5d70 <_Z16_fetch_usbserialv>
   d4784:	491b      	ldr	r1, [pc, #108]	; (d47f4 <loop+0x1f4>)
   d4786:	f000 fe0a 	bl	d539e <_ZN5Print7printlnEPKc>
      Serial.println("");
   d478a:	f001 faf1 	bl	d5d70 <_Z16_fetch_usbserialv>
   d478e:	4918      	ldr	r1, [pc, #96]	; (d47f0 <loop+0x1f0>)
   d4790:	f000 fe05 	bl	d539e <_ZN5Print7printlnEPKc>
      System.sleep(logInterval * 60);
   d4794:	6832      	ldr	r2, [r6, #0]
    static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF);
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, long seconds=0) {
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
   d4796:	4b18      	ldr	r3, [pc, #96]	; (d47f8 <loop+0x1f8>)
   d4798:	213c      	movs	r1, #60	; 0x3c
   d479a:	434a      	muls	r2, r1
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	4621      	mov	r1, r4
   d47a0:	a806      	add	r0, sp, #24
   d47a2:	f000 fb17 	bl	d4dd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
      scheduledWakeup = 1;
   d47a6:	4b08      	ldr	r3, [pc, #32]	; (d47c8 <loop+0x1c8>)
   d47a8:	2201      	movs	r2, #1
   d47aa:	601a      	str	r2, [r3, #0]
    }
    calculateRainGaugeData();
   d47ac:	f7ff fe78 	bl	d44a0 <_Z22calculateRainGaugeDatav>
  }

}
   d47b0:	b00a      	add	sp, #40	; 0x28
   d47b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d47b6:	bf00      	nop
   d47b8:	2003e39c 	.word	0x2003e39c
   d47bc:	2003e394 	.word	0x2003e394
   d47c0:	2003e2f0 	.word	0x2003e2f0
   d47c4:	2003e1fc 	.word	0x2003e1fc
   d47c8:	2003e2fc 	.word	0x2003e2fc
   d47cc:	000d6a7c 	.word	0x000d6a7c
   d47d0:	2003e270 	.word	0x2003e270
   d47d4:	2003e380 	.word	0x2003e380
   d47d8:	000d6a6e 	.word	0x000d6a6e
   d47dc:	2003e300 	.word	0x2003e300
   d47e0:	000d6a77 	.word	0x000d6a77
   d47e4:	2003e388 	.word	0x2003e388
   d47e8:	000d6a7e 	.word	0x000d6a7e
   d47ec:	000d6a86 	.word	0x000d6a86
   d47f0:	000d6b87 	.word	0x000d6b87
   d47f4:	000d6a95 	.word	0x000d6a95
   d47f8:	2003e390 	.word	0x2003e390
   d47fc:	2003e38c 	.word	0x2003e38c
   d4800:	2003e1f4 	.word	0x2003e1f4
   d4804:	2003e384 	.word	0x2003e384
   d4808:	2003e1f8 	.word	0x2003e1f8

000d480c <_GLOBAL__sub_I_led1>:
  {
    tripCount++;
    delay(400);
    Serial.println(tripCount);
  }
   d480c:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d480e:	4b11      	ldr	r3, [pc, #68]	; (d4854 <_GLOBAL__sub_I_led1+0x48>)
   d4810:	2400      	movs	r4, #0
   d4812:	601c      	str	r4, [r3, #0]
   d4814:	4b10      	ldr	r3, [pc, #64]	; (d4858 <_GLOBAL__sub_I_led1+0x4c>)
   d4816:	2501      	movs	r5, #1
   d4818:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d481a:	f000 f831 	bl	d4880 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d481e:	f001 fd47 	bl	d62b0 <spark_protocol_instance>
   d4822:	4623      	mov	r3, r4
   d4824:	4622      	mov	r2, r4
   d4826:	f642 117a 	movw	r1, #10618	; 0x297a
   d482a:	f001 fd49 	bl	d62c0 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d482e:	f001 fd3f 	bl	d62b0 <spark_protocol_instance>
   d4832:	4623      	mov	r3, r4
   d4834:	4622      	mov	r2, r4
   d4836:	4629      	mov	r1, r5
   d4838:	f001 fd4a 	bl	d62d0 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d483c:	4b07      	ldr	r3, [pc, #28]	; (d485c <_GLOBAL__sub_I_led1+0x50>)
   d483e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4842:	701c      	strb	r4, [r3, #0]
   d4844:	805c      	strh	r4, [r3, #2]
   d4846:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4848:	2003      	movs	r0, #3
   d484a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d484e:	f000 b957 	b.w	d4b00 <set_system_mode>
   d4852:	bf00      	nop
   d4854:	2003e390 	.word	0x2003e390
   d4858:	2003e388 	.word	0x2003e388
   d485c:	2003e2f4 	.word	0x2003e2f4

000d4860 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <netdb_freeaddrinfo+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	689b      	ldr	r3, [r3, #8]
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030268 	.word	0x00030268

000d4870 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <netdb_getaddrinfo+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	68db      	ldr	r3, [r3, #12]
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030268 	.word	0x00030268

000d4880 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <HAL_Pin_Map+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	681b      	ldr	r3, [r3, #0]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	0003022c 	.word	0x0003022c

000d4890 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <HAL_Pin_Mode+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	689b      	ldr	r3, [r3, #8]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	0003022c 	.word	0x0003022c

000d48a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <HAL_Get_Pin_Mode+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	68db      	ldr	r3, [r3, #12]
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	0003022c 	.word	0x0003022c

000d48b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <HAL_GPIO_Write+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	691b      	ldr	r3, [r3, #16]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003022c 	.word	0x0003022c

000d48c0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <HAL_GPIO_Read+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	695b      	ldr	r3, [r3, #20]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003022c 	.word	0x0003022c

000d48d0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <HAL_SPI_Init+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	69db      	ldr	r3, [r3, #28]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030230 	.word	0x00030230

000d48e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <HAL_SPI_Is_Enabled+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6a1b      	ldr	r3, [r3, #32]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030230 	.word	0x00030230

000d48f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_RNG_GetRandomNumber+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	685b      	ldr	r3, [r3, #4]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030218 	.word	0x00030218

000d4900 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	695b      	ldr	r3, [r3, #20]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_RTC_Get_UnixTime+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	69db      	ldr	r3, [r3, #28]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_RTC_Time_Is_Valid+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030218 	.word	0x00030218

000d4930 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <os_thread_is_current+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	689b      	ldr	r3, [r3, #8]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030248 	.word	0x00030248

000d4940 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <os_thread_join+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	691b      	ldr	r3, [r3, #16]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030248 	.word	0x00030248

000d4950 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <os_thread_cleanup+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030248 	.word	0x00030248

000d4960 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <os_mutex_create+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	00030248 	.word	0x00030248

000d4970 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <os_mutex_recursive_create+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	00030248 	.word	0x00030248

000d4980 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <inet_inet_ntop+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	695b      	ldr	r3, [r3, #20]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	00030264 	.word	0x00030264

000d4990 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_USART_Init+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	681b      	ldr	r3, [r3, #0]
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	0003023c 	.word	0x0003023c

000d49a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_USART_Write_Data+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	68db      	ldr	r3, [r3, #12]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	0003023c 	.word	0x0003023c

000d49b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_USART_Available_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	691b      	ldr	r3, [r3, #16]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	0003023c 	.word	0x0003023c

000d49c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_USART_Read_Data+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	695b      	ldr	r3, [r3, #20]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	0003023c 	.word	0x0003023c

000d49d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_USART_Peek_Data+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	699b      	ldr	r3, [r3, #24]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	0003023c 	.word	0x0003023c

000d49e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <HAL_USART_Flush_Data+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	69db      	ldr	r3, [r3, #28]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	0003023c 	.word	0x0003023c

000d49f0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <HAL_USART_Is_Enabled+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	6a1b      	ldr	r3, [r3, #32]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	0003023c 	.word	0x0003023c

000d4a00 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <HAL_USART_Available_Data_For_Write+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	0003023c 	.word	0x0003023c

000d4a10 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <HAL_I2C_Write_Data+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	6a1b      	ldr	r3, [r3, #32]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030228 	.word	0x00030228

000d4a20 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <HAL_I2C_Available_Data+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030228 	.word	0x00030228

000d4a30 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <HAL_I2C_Read_Data+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030228 	.word	0x00030228

000d4a40 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_I2C_Peek_Data+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030228 	.word	0x00030228

000d4a50 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_I2C_Flush_Data+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030228 	.word	0x00030228

000d4a60 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_I2C_Is_Enabled+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030228 	.word	0x00030228

000d4a70 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_I2C_Init+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030228 	.word	0x00030228

000d4a80 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USB_USART_Init+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	681b      	ldr	r3, [r3, #0]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003024c 	.word	0x0003024c

000d4a90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USB_USART_Begin+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	685b      	ldr	r3, [r3, #4]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003024c 	.word	0x0003024c

000d4aa0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USB_USART_Available_Data+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	691b      	ldr	r3, [r3, #16]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003024c 	.word	0x0003024c

000d4ab0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	695b      	ldr	r3, [r3, #20]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003024c 	.word	0x0003024c

000d4ac0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USB_USART_Receive_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	699b      	ldr	r3, [r3, #24]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003024c 	.word	0x0003024c

000d4ad0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USB_USART_Send_Data+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	69db      	ldr	r3, [r3, #28]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003024c 	.word	0x0003024c

000d4ae0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Flush_Data+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6a1b      	ldr	r3, [r3, #32]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <system_mode+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	681b      	ldr	r3, [r3, #0]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030220 	.word	0x00030220

000d4b00 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <set_system_mode+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	685b      	ldr	r3, [r3, #4]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030220 	.word	0x00030220

000d4b10 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <system_delay_ms+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030220 	.word	0x00030220

000d4b20 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <system_sleep+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	699b      	ldr	r3, [r3, #24]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030220 	.word	0x00030220

000d4b30 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <application_thread_current+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030220 	.word	0x00030220

000d4b40 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <application_thread_invoke+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	00030220 	.word	0x00030220

000d4b50 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <system_thread_get_state+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030220 	.word	0x00030220

000d4b60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b03      	ldr	r3, [pc, #12]	; (d4b70 <system_ctrl_set_app_request_handler+0x10>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4b6a:	9301      	str	r3, [sp, #4]
   d4b6c:	bd08      	pop	{r3, pc}
   d4b6e:	0000      	.short	0x0000
   d4b70:	00030220 	.word	0x00030220

000d4b74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b03      	ldr	r3, [pc, #12]	; (d4b84 <system_ctrl_set_result+0x10>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4b7e:	9301      	str	r3, [sp, #4]
   d4b80:	bd08      	pop	{r3, pc}
   d4b82:	0000      	.short	0x0000
   d4b84:	00030220 	.word	0x00030220

000d4b88 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4b88:	b508      	push	{r3, lr}
   d4b8a:	4b02      	ldr	r3, [pc, #8]	; (d4b94 <network_connect+0xc>)
   d4b8c:	681b      	ldr	r3, [r3, #0]
   d4b8e:	685b      	ldr	r3, [r3, #4]
   d4b90:	9301      	str	r3, [sp, #4]
   d4b92:	bd08      	pop	{r3, pc}
   d4b94:	00030240 	.word	0x00030240

000d4b98 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4b98:	b508      	push	{r3, lr}
   d4b9a:	4b02      	ldr	r3, [pc, #8]	; (d4ba4 <network_connecting+0xc>)
   d4b9c:	681b      	ldr	r3, [r3, #0]
   d4b9e:	689b      	ldr	r3, [r3, #8]
   d4ba0:	9301      	str	r3, [sp, #4]
   d4ba2:	bd08      	pop	{r3, pc}
   d4ba4:	00030240 	.word	0x00030240

000d4ba8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ba8:	b508      	push	{r3, lr}
   d4baa:	4b02      	ldr	r3, [pc, #8]	; (d4bb4 <network_disconnect+0xc>)
   d4bac:	681b      	ldr	r3, [r3, #0]
   d4bae:	68db      	ldr	r3, [r3, #12]
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	bd08      	pop	{r3, pc}
   d4bb4:	00030240 	.word	0x00030240

000d4bb8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4bb8:	b508      	push	{r3, lr}
   d4bba:	4b02      	ldr	r3, [pc, #8]	; (d4bc4 <network_ready+0xc>)
   d4bbc:	681b      	ldr	r3, [r3, #0]
   d4bbe:	691b      	ldr	r3, [r3, #16]
   d4bc0:	9301      	str	r3, [sp, #4]
   d4bc2:	bd08      	pop	{r3, pc}
   d4bc4:	00030240 	.word	0x00030240

000d4bc8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <network_on+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	695b      	ldr	r3, [r3, #20]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030240 	.word	0x00030240

000d4bd8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <network_off+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	699b      	ldr	r3, [r3, #24]
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030240 	.word	0x00030240

000d4be8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_listen+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	69db      	ldr	r3, [r3, #28]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_listening+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	6a1b      	ldr	r3, [r3, #32]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_set_listen_timeout+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_get_listen_timeout+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <spark_process+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	689b      	ldr	r3, [r3, #8]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030244 	.word	0x00030244

000d4c38 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <spark_cloud_flag_connect+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	68db      	ldr	r3, [r3, #12]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030244 	.word	0x00030244

000d4c48 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <spark_cloud_flag_disconnect+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	691b      	ldr	r3, [r3, #16]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030244 	.word	0x00030244

000d4c58 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <spark_cloud_flag_connected+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	695b      	ldr	r3, [r3, #20]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030244 	.word	0x00030244

000d4c68 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <spark_deviceID+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	69db      	ldr	r3, [r3, #28]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030244 	.word	0x00030244

000d4c78 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <spark_send_event+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6a1b      	ldr	r3, [r3, #32]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030244 	.word	0x00030244

000d4c88 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <spark_subscribe+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030244 	.word	0x00030244

000d4c98 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <spark_sync_time+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030244 	.word	0x00030244

000d4ca8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <spark_sync_time_pending+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030244 	.word	0x00030244

000d4cb8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	00030244 	.word	0x00030244

000d4cc8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <malloc+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	681b      	ldr	r3, [r3, #0]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003021c 	.word	0x0003021c

000d4cd8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <free+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	685b      	ldr	r3, [r3, #4]
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003021c 	.word	0x0003021c

000d4ce8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <realloc+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	689b      	ldr	r3, [r3, #8]
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003021c 	.word	0x0003021c

000d4cf8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4cf8:	b508      	push	{r3, lr}
   d4cfa:	4b02      	ldr	r3, [pc, #8]	; (d4d04 <abort+0xc>)
   d4cfc:	681b      	ldr	r3, [r3, #0]
   d4cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d00:	9301      	str	r3, [sp, #4]
   d4d02:	bd08      	pop	{r3, pc}
   d4d04:	0003021c 	.word	0x0003021c

000d4d08 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <_malloc_r+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	0003021c 	.word	0x0003021c

000d4d18 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d18:	2200      	movs	r2, #0
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	f7ff bf6b 	b.w	d4bf8 <network_listening>

000d4d22 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d22:	2200      	movs	r2, #0
   d4d24:	4611      	mov	r1, r2
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	f7ff bf76 	b.w	d4c18 <network_get_listen_timeout>

000d4d2c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	6840      	ldr	r0, [r0, #4]
   d4d30:	f7ff bf6a 	b.w	d4c08 <network_set_listen_timeout>

000d4d34 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d34:	2200      	movs	r2, #0
   d4d36:	f081 0101 	eor.w	r1, r1, #1
   d4d3a:	6840      	ldr	r0, [r0, #4]
   d4d3c:	f7ff bf54 	b.w	d4be8 <network_listen>

000d4d40 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d40:	2300      	movs	r3, #0
   d4d42:	461a      	mov	r2, r3
   d4d44:	4619      	mov	r1, r3
   d4d46:	6840      	ldr	r0, [r0, #4]
   d4d48:	f7ff bf46 	b.w	d4bd8 <network_off>

000d4d4c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d4c:	2300      	movs	r3, #0
   d4d4e:	461a      	mov	r2, r3
   d4d50:	4619      	mov	r1, r3
   d4d52:	6840      	ldr	r0, [r0, #4]
   d4d54:	f7ff bf38 	b.w	d4bc8 <network_on>

000d4d58 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d58:	2200      	movs	r2, #0
   d4d5a:	4611      	mov	r1, r2
   d4d5c:	6840      	ldr	r0, [r0, #4]
   d4d5e:	f7ff bf2b 	b.w	d4bb8 <network_ready>

000d4d62 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d62:	2200      	movs	r2, #0
   d4d64:	4611      	mov	r1, r2
   d4d66:	6840      	ldr	r0, [r0, #4]
   d4d68:	f7ff bf16 	b.w	d4b98 <network_connecting>

000d4d6c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d6c:	2200      	movs	r2, #0
   d4d6e:	2102      	movs	r1, #2
   d4d70:	6840      	ldr	r0, [r0, #4]
   d4d72:	f7ff bf19 	b.w	d4ba8 <network_disconnect>

000d4d76 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d76:	2300      	movs	r3, #0
   d4d78:	461a      	mov	r2, r3
   d4d7a:	6840      	ldr	r0, [r0, #4]
   d4d7c:	f7ff bf04 	b.w	d4b88 <network_connect>

000d4d80 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d80:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d82:	2203      	movs	r2, #3
   d4d84:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d86:	4a02      	ldr	r2, [pc, #8]	; (d4d90 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d88:	601a      	str	r2, [r3, #0]
   d4d8a:	4770      	bx	lr
   d4d8c:	2003e3a0 	.word	0x2003e3a0
   d4d90:	000d6aa4 	.word	0x000d6aa4

000d4d94 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4d94:	4770      	bx	lr

000d4d96 <_ZN8SPIClassD0Ev>:
   d4d96:	b510      	push	{r4, lr}
   d4d98:	2110      	movs	r1, #16
   d4d9a:	4604      	mov	r4, r0
   d4d9c:	f001 fb49 	bl	d6432 <_ZdlPvj>
   d4da0:	4620      	mov	r0, r4
   d4da2:	bd10      	pop	{r4, pc}

000d4da4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4da4:	b570      	push	{r4, r5, r6, lr}
   d4da6:	4b08      	ldr	r3, [pc, #32]	; (d4dc8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d4da8:	6003      	str	r3, [r0, #0]
   d4daa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4dac:	2500      	movs	r5, #0
   d4dae:	460e      	mov	r6, r1
   d4db0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4db4:	f7ff fdd4 	bl	d4960 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d4db8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d4dba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4dbc:	f7ff fd88 	bl	d48d0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4dc0:	60a5      	str	r5, [r4, #8]
}
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	bd70      	pop	{r4, r5, r6, pc}
   d4dc6:	bf00      	nop
   d4dc8:	000d6ad8 	.word	0x000d6ad8

000d4dcc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4dcc:	7900      	ldrb	r0, [r0, #4]
   d4dce:	f7ff bd87 	b.w	d48e0 <HAL_SPI_Is_Enabled>
	...

000d4dd4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d4dd4:	b510      	push	{r4, lr}
   d4dd6:	4604      	mov	r4, r0
   d4dd8:	4608      	mov	r0, r1
   d4dda:	4611      	mov	r1, r2
   d4ddc:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d4dde:	2300      	movs	r3, #0
   d4de0:	f7ff fe9e 	bl	d4b20 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d4de4:	4b06      	ldr	r3, [pc, #24]	; (d4e00 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d4de6:	2200      	movs	r2, #0
   d4de8:	701a      	strb	r2, [r3, #0]
   d4dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4dee:	8058      	strh	r0, [r3, #2]
   d4df0:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d4df2:	681a      	ldr	r2, [r3, #0]
   d4df4:	889b      	ldrh	r3, [r3, #4]
   d4df6:	6022      	str	r2, [r4, #0]
   d4df8:	80a3      	strh	r3, [r4, #4]
}
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	bd10      	pop	{r4, pc}
   d4dfe:	bf00      	nop
   d4e00:	2003e3a8 	.word	0x2003e3a8

000d4e04 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4e04:	4b04      	ldr	r3, [pc, #16]	; (d4e18 <_GLOBAL__sub_I_System+0x14>)
   d4e06:	2000      	movs	r0, #0
   d4e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4e0c:	7018      	strb	r0, [r3, #0]
   d4e0e:	8058      	strh	r0, [r3, #2]
   d4e10:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e12:	f7ff be75 	b.w	d4b00 <set_system_mode>
   d4e16:	bf00      	nop
   d4e18:	2003e3a8 	.word	0x2003e3a8

000d4e1c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4e1c:	b510      	push	{r4, lr}
   d4e1e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4e20:	f001 fd0d 	bl	d683e <strlen>
   d4e24:	3801      	subs	r0, #1
   d4e26:	1823      	adds	r3, r4, r0
   d4e28:	4620      	mov	r0, r4
	while(i<j){
   d4e2a:	4298      	cmp	r0, r3
   d4e2c:	d206      	bcs.n	d4e3c <_Z11str_reversePc+0x20>
		c = *i;
   d4e2e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4e30:	7819      	ldrb	r1, [r3, #0]
   d4e32:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4e36:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4e3a:	e7f6      	b.n	d4e2a <_Z11str_reversePc+0xe>
   d4e3c:	bd10      	pop	{r4, pc}

000d4e3e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d4e42:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d4e44:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4e46:	4615      	mov	r5, r2
   d4e48:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d4e4a:	bf34      	ite	cc
   d4e4c:	4615      	movcc	r5, r2
   d4e4e:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4e50:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d4e52:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4e54:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4e56:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d4e5a:	d107      	bne.n	d4e6c <ltoa+0x2e>
   d4e5c:	4298      	cmp	r0, r3
   d4e5e:	da05      	bge.n	d4e6c <ltoa+0x2e>
      {
            *head++ = '-';
   d4e60:	232d      	movs	r3, #45	; 0x2d
   d4e62:	f101 0801 	add.w	r8, r1, #1
   d4e66:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d4e68:	4240      	negs	r0, r0
   d4e6a:	e001      	b.n	d4e70 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d4e6c:	b1b0      	cbz	r0, d4e9c <ltoa+0x5e>
   d4e6e:	46a0      	mov	r8, r4
   d4e70:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d4e74:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d4e76:	462a      	mov	r2, r5
   d4e78:	4601      	mov	r1, r0
   d4e7a:	a801      	add	r0, sp, #4
   d4e7c:	f001 fc38 	bl	d66f0 <ldiv>
   d4e80:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d4e82:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d4e84:	2b09      	cmp	r3, #9
   d4e86:	bfcc      	ite	gt
   d4e88:	2237      	movgt	r2, #55	; 0x37
   d4e8a:	2230      	movle	r2, #48	; 0x30
   d4e8c:	fa52 f383 	uxtab	r3, r2, r3
   d4e90:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d4e94:	3701      	adds	r7, #1
   d4e96:	2800      	cmp	r0, #0
   d4e98:	d1ed      	bne.n	d4e76 <ltoa+0x38>
   d4e9a:	e006      	b.n	d4eaa <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d4e9c:	2330      	movs	r3, #48	; 0x30
   d4e9e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d4ea2:	46a0      	mov	r8, r4
   d4ea4:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d4ea8:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d4eaa:	463a      	mov	r2, r7
   d4eac:	1c71      	adds	r1, r6, #1
   d4eae:	4640      	mov	r0, r8
   d4eb0:	f001 fc32 	bl	d6718 <memcpy>
      return str;
}
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	b00c      	add	sp, #48	; 0x30
   d4eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ebc <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4ebc:	b570      	push	{r4, r5, r6, lr}
   d4ebe:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4ec0:	1e91      	subs	r1, r2, #2
   d4ec2:	2922      	cmp	r1, #34	; 0x22
   d4ec4:	d820      	bhi.n	d4f08 <ultoa+0x4c>
   d4ec6:	4625      	mov	r5, r4
   d4ec8:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4eca:	b910      	cbnz	r0, d4ed2 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ecc:	4423      	add	r3, r4
            *ptr++ = '0';
   d4ece:	2230      	movs	r2, #48	; 0x30
   d4ed0:	e00e      	b.n	d4ef0 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4ed2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4ed6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4eda:	b2c1      	uxtb	r1, r0
   d4edc:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4ee0:	2809      	cmp	r0, #9
                *ptr += '0';
   d4ee2:	bf94      	ite	ls
   d4ee4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4ee6:	3157      	addhi	r1, #87	; 0x57
   d4ee8:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4eec:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4eee:	e7eb      	b.n	d4ec8 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ef0:	4299      	cmp	r1, r3
   d4ef2:	d202      	bcs.n	d4efa <ultoa+0x3e>
            *ptr++ = '0';
   d4ef4:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4ef8:	e7fa      	b.n	d4ef0 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4efa:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4efc:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4efe:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4f00:	f7ff ff8c 	bl	d4e1c <_Z11str_reversePc>
	return buffer;
   d4f04:	4620      	mov	r0, r4
   d4f06:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4f08:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4f0a:	bd70      	pop	{r4, r5, r6, pc}

000d4f0c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f0c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4f0e:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4f10:	460c      	mov	r4, r1
   d4f12:	4615      	mov	r5, r2
	if(a<0){
   d4f14:	da0b      	bge.n	d4f2e <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f1a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4f1e:	bf14      	ite	ne
   d4f20:	4258      	negne	r0, r3
   d4f22:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4f24:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4f26:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4f28:	462a      	mov	r2, r5
   d4f2a:	4419      	add	r1, r3
   d4f2c:	e000      	b.n	d4f30 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4f2e:	2301      	movs	r3, #1
   d4f30:	f7ff ffc4 	bl	d4ebc <ultoa>
	}
	return buffer;
}
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd38      	pop	{r3, r4, r5, pc}

000d4f38 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f38:	b510      	push	{r4, lr}
   d4f3a:	4604      	mov	r4, r0
{
	free(buffer);
   d4f3c:	6800      	ldr	r0, [r0, #0]
   d4f3e:	f7ff fecb 	bl	d4cd8 <free>
}
   d4f42:	4620      	mov	r0, r4
   d4f44:	bd10      	pop	{r4, pc}

000d4f46 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f46:	b510      	push	{r4, lr}
   d4f48:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f4a:	6800      	ldr	r0, [r0, #0]
   d4f4c:	b108      	cbz	r0, d4f52 <_ZN6String10invalidateEv+0xc>
   d4f4e:	f7ff fec3 	bl	d4cd8 <free>
	buffer = NULL;
   d4f52:	2300      	movs	r3, #0
   d4f54:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4f56:	60a3      	str	r3, [r4, #8]
   d4f58:	6063      	str	r3, [r4, #4]
   d4f5a:	bd10      	pop	{r4, pc}

000d4f5c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f5c:	b538      	push	{r3, r4, r5, lr}
   d4f5e:	4604      	mov	r4, r0
   d4f60:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f62:	6800      	ldr	r0, [r0, #0]
   d4f64:	3101      	adds	r1, #1
   d4f66:	f7ff febf 	bl	d4ce8 <realloc>
	if (newbuffer) {
   d4f6a:	b110      	cbz	r0, d4f72 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f6c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4f70:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f72:	bd38      	pop	{r3, r4, r5, pc}

000d4f74 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f74:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f76:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f78:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f7a:	b113      	cbz	r3, d4f82 <_ZN6String7reserveEj+0xe>
   d4f7c:	6843      	ldr	r3, [r0, #4]
   d4f7e:	428b      	cmp	r3, r1
   d4f80:	d207      	bcs.n	d4f92 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4f82:	4620      	mov	r0, r4
   d4f84:	f7ff ffea 	bl	d4f5c <_ZN6String12changeBufferEj>
   d4f88:	b120      	cbz	r0, d4f94 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4f8a:	68a3      	ldr	r3, [r4, #8]
   d4f8c:	b90b      	cbnz	r3, d4f92 <_ZN6String7reserveEj+0x1e>
   d4f8e:	6822      	ldr	r2, [r4, #0]
   d4f90:	7013      	strb	r3, [r2, #0]
   d4f92:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4f94:	bd10      	pop	{r4, pc}

000d4f96 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f96:	b570      	push	{r4, r5, r6, lr}
   d4f98:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4f9a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4f9c:	4604      	mov	r4, r0
   d4f9e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4fa0:	f7ff ffe8 	bl	d4f74 <_ZN6String7reserveEj>
   d4fa4:	b918      	cbnz	r0, d4fae <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	f7ff ffcd 	bl	d4f46 <_ZN6String10invalidateEv>
		return *this;
   d4fac:	e009      	b.n	d4fc2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4fae:	462a      	mov	r2, r5
   d4fb0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4fb2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4fb4:	6820      	ldr	r0, [r4, #0]
   d4fb6:	f001 fbaf 	bl	d6718 <memcpy>
	buffer[len] = 0;
   d4fba:	6822      	ldr	r2, [r4, #0]
   d4fbc:	68a3      	ldr	r3, [r4, #8]
   d4fbe:	2100      	movs	r1, #0
   d4fc0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4fc2:	4620      	mov	r0, r4
   d4fc4:	bd70      	pop	{r4, r5, r6, pc}

000d4fc6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fc6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fc8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fcc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4fce:	6043      	str	r3, [r0, #4]
	len = 0;
   d4fd0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4fd2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4fd4:	460d      	mov	r5, r1
   d4fd6:	b139      	cbz	r1, d4fe8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4fd8:	4608      	mov	r0, r1
   d4fda:	f001 fc30 	bl	d683e <strlen>
   d4fde:	4629      	mov	r1, r5
   d4fe0:	4602      	mov	r2, r0
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff ffd7 	bl	d4f96 <_ZN6String4copyEPKcj>
}
   d4fe8:	4620      	mov	r0, r4
   d4fea:	bd38      	pop	{r3, r4, r5, pc}

000d4fec <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4fec:	b538      	push	{r3, r4, r5, lr}
   d4fee:	4605      	mov	r5, r0
	if (buffer) {
   d4ff0:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d4ff2:	460c      	mov	r4, r1
	if (buffer) {
   d4ff4:	b160      	cbz	r0, d5010 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d4ff6:	686a      	ldr	r2, [r5, #4]
   d4ff8:	688b      	ldr	r3, [r1, #8]
   d4ffa:	429a      	cmp	r2, r3
   d4ffc:	d306      	bcc.n	d500c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d4ffe:	6809      	ldr	r1, [r1, #0]
   d5000:	f001 fbf9 	bl	d67f6 <strcpy>
			len = rhs.len;
   d5004:	68a3      	ldr	r3, [r4, #8]
   d5006:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5008:	2300      	movs	r3, #0
   d500a:	e00a      	b.n	d5022 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d500c:	f7ff fe64 	bl	d4cd8 <free>
		}
	}
	buffer = rhs.buffer;
   d5010:	6823      	ldr	r3, [r4, #0]
   d5012:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d5014:	6863      	ldr	r3, [r4, #4]
   d5016:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5018:	68a3      	ldr	r3, [r4, #8]
   d501a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d501c:	2300      	movs	r3, #0
   d501e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d5020:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d5022:	60a3      	str	r3, [r4, #8]
   d5024:	bd38      	pop	{r3, r4, r5, pc}

000d5026 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5026:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5028:	b510      	push	{r4, lr}
   d502a:	460b      	mov	r3, r1
   d502c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d502e:	d007      	beq.n	d5040 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5030:	6809      	ldr	r1, [r1, #0]
   d5032:	b119      	cbz	r1, d503c <_ZN6StringaSERKS_+0x16>
   d5034:	689a      	ldr	r2, [r3, #8]
   d5036:	f7ff ffae 	bl	d4f96 <_ZN6String4copyEPKcj>
   d503a:	e001      	b.n	d5040 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d503c:	f7ff ff83 	bl	d4f46 <_ZN6String10invalidateEv>

	return *this;
}
   d5040:	4620      	mov	r0, r4
   d5042:	bd10      	pop	{r4, pc}

000d5044 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5044:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5046:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5048:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d504a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d504c:	6043      	str	r3, [r0, #4]
	len = 0;
   d504e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5050:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5052:	f7ff ffe8 	bl	d5026 <_ZN6StringaSERKS_>
}
   d5056:	4620      	mov	r0, r4
   d5058:	bd10      	pop	{r4, pc}

000d505a <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d505a:	4288      	cmp	r0, r1
	if (this != &rval) move(rval);
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
   d505c:	b510      	push	{r4, lr}
   d505e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d5060:	d001      	beq.n	d5066 <_ZN6StringaSEO15StringSumHelper+0xc>
   d5062:	f7ff ffc3 	bl	d4fec <_ZN6String4moveERS_>
	return *this;
}
   d5066:	4620      	mov	r0, r4
   d5068:	bd10      	pop	{r4, pc}

000d506a <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d506a:	b538      	push	{r3, r4, r5, lr}
   d506c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d506e:	460c      	mov	r4, r1
   d5070:	b141      	cbz	r1, d5084 <_ZN6StringaSEPKc+0x1a>
   d5072:	4608      	mov	r0, r1
   d5074:	f001 fbe3 	bl	d683e <strlen>
   d5078:	4621      	mov	r1, r4
   d507a:	4602      	mov	r2, r0
   d507c:	4628      	mov	r0, r5
   d507e:	f7ff ff8a 	bl	d4f96 <_ZN6String4copyEPKcj>
   d5082:	e001      	b.n	d5088 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5084:	f7ff ff5f 	bl	d4f46 <_ZN6String10invalidateEv>

	return *this;
}
   d5088:	4628      	mov	r0, r5
   d508a:	bd38      	pop	{r3, r4, r5, pc}

000d508c <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d508c:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d508e:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d5090:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5094:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5096:	6043      	str	r3, [r0, #4]
	len = 0;
   d5098:	6083      	str	r3, [r0, #8]
	flags = 0;
   d509a:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d509c:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d509e:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d50a0:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d50a4:	f7ff ffe1 	bl	d506a <_ZN6StringaSEPKc>
}
   d50a8:	4620      	mov	r0, r4
   d50aa:	b002      	add	sp, #8
   d50ac:	bd10      	pop	{r4, pc}

000d50ae <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d50ae:	b510      	push	{r4, lr}
   d50b0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50b2:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d50b4:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50b6:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d50b8:	6063      	str	r3, [r4, #4]
	len = 0;
   d50ba:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d50bc:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d50be:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d50c0:	a901      	add	r1, sp, #4
   d50c2:	f7ff ff23 	bl	d4f0c <itoa>
	*this = buf;
   d50c6:	a901      	add	r1, sp, #4
   d50c8:	4620      	mov	r0, r4
   d50ca:	f7ff ffce 	bl	d506a <_ZN6StringaSEPKc>
}
   d50ce:	4620      	mov	r0, r4
   d50d0:	b00a      	add	sp, #40	; 0x28
   d50d2:	bd10      	pop	{r4, pc}

000d50d4 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d50d4:	b510      	push	{r4, lr}
   d50d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50d8:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d50da:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d50dc:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d50de:	6063      	str	r3, [r4, #4]
	len = 0;
   d50e0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d50e2:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d50e4:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d50e6:	a901      	add	r1, sp, #4
   d50e8:	f7ff fea9 	bl	d4e3e <ltoa>
	*this = buf;
   d50ec:	a901      	add	r1, sp, #4
   d50ee:	4620      	mov	r0, r4
   d50f0:	f7ff ffbb 	bl	d506a <_ZN6StringaSEPKc>
}
   d50f4:	4620      	mov	r0, r4
   d50f6:	b00a      	add	sp, #40	; 0x28
   d50f8:	bd10      	pop	{r4, pc}

000d50fa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d50fa:	b570      	push	{r4, r5, r6, lr}
   d50fc:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d50fe:	460e      	mov	r6, r1
   d5100:	b909      	cbnz	r1, d5106 <_ZN6String6concatEPKcj+0xc>
   d5102:	2000      	movs	r0, #0
   d5104:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5106:	b16a      	cbz	r2, d5124 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5108:	6883      	ldr	r3, [r0, #8]
   d510a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d510c:	4629      	mov	r1, r5
   d510e:	f7ff ff31 	bl	d4f74 <_ZN6String7reserveEj>
   d5112:	2800      	cmp	r0, #0
   d5114:	d0f5      	beq.n	d5102 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5116:	6820      	ldr	r0, [r4, #0]
   d5118:	68a3      	ldr	r3, [r4, #8]
   d511a:	4631      	mov	r1, r6
   d511c:	4418      	add	r0, r3
   d511e:	f001 fb6a 	bl	d67f6 <strcpy>
	len = newlen;
   d5122:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5124:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5126:	bd70      	pop	{r4, r5, r6, pc}

000d5128 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d5128:	688a      	ldr	r2, [r1, #8]
   d512a:	6809      	ldr	r1, [r1, #0]
   d512c:	f7ff bfe5 	b.w	d50fa <_ZN6String6concatEPKcj>

000d5130 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5130:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5132:	688a      	ldr	r2, [r1, #8]
   d5134:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5136:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5138:	f7ff ffdf 	bl	d50fa <_ZN6String6concatEPKcj>
   d513c:	b910      	cbnz	r0, d5144 <_ZplRK15StringSumHelperRK6String+0x14>
   d513e:	4620      	mov	r0, r4
   d5140:	f7ff ff01 	bl	d4f46 <_ZN6String10invalidateEv>
	return a;
}
   d5144:	4620      	mov	r0, r4
   d5146:	bd10      	pop	{r4, pc}

000d5148 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5148:	b538      	push	{r3, r4, r5, lr}
   d514a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d514c:	460d      	mov	r5, r1
   d514e:	b141      	cbz	r1, d5162 <_ZplRK15StringSumHelperPKc+0x1a>
   d5150:	4608      	mov	r0, r1
   d5152:	f001 fb74 	bl	d683e <strlen>
   d5156:	4629      	mov	r1, r5
   d5158:	4602      	mov	r2, r0
   d515a:	4620      	mov	r0, r4
   d515c:	f7ff ffcd 	bl	d50fa <_ZN6String6concatEPKcj>
   d5160:	b910      	cbnz	r0, d5168 <_ZplRK15StringSumHelperPKc+0x20>
   d5162:	4620      	mov	r0, r4
   d5164:	f7ff feef 	bl	d4f46 <_ZN6String10invalidateEv>
	return a;
}
   d5168:	4620      	mov	r0, r4
   d516a:	bd38      	pop	{r3, r4, r5, pc}

000d516c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d516c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d516e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5170:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5172:	b912      	cbnz	r2, d517a <_ZNK6String6equalsEPKc+0xe>
   d5174:	b919      	cbnz	r1, d517e <_ZNK6String6equalsEPKc+0x12>
   d5176:	2001      	movs	r0, #1
   d5178:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d517a:	b911      	cbnz	r1, d5182 <_ZNK6String6equalsEPKc+0x16>
   d517c:	6803      	ldr	r3, [r0, #0]
   d517e:	7818      	ldrb	r0, [r3, #0]
   d5180:	e002      	b.n	d5188 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d5182:	6800      	ldr	r0, [r0, #0]
   d5184:	f001 fb2d 	bl	d67e2 <strcmp>
   d5188:	fab0 f080 	clz	r0, r0
   d518c:	0940      	lsrs	r0, r0, #5
}
   d518e:	bd08      	pop	{r3, pc}

000d5190 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d5190:	6883      	ldr	r3, [r0, #8]
   d5192:	428b      	cmp	r3, r1
   d5194:	d903      	bls.n	d519e <_ZNK6StringixEj+0xe>
   d5196:	6800      	ldr	r0, [r0, #0]
   d5198:	b110      	cbz	r0, d51a0 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d519a:	5c40      	ldrb	r0, [r0, r1]
   d519c:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d519e:	2000      	movs	r0, #0
	return buffer[index];
}
   d51a0:	4770      	bx	lr

000d51a2 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d51a2:	f7ff bff5 	b.w	d5190 <_ZNK6StringixEj>

000d51a6 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d51a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51aa:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d51ac:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d51ae:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d51b0:	b1ca      	cbz	r2, d51e6 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d51b2:	6883      	ldr	r3, [r0, #8]
   d51b4:	b1bb      	cbz	r3, d51e6 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d51b6:	429a      	cmp	r2, r3
   d51b8:	d815      	bhi.n	d51e6 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d51ba:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
   d51bc:	42ab      	cmp	r3, r5
   d51be:	bf98      	it	ls
   d51c0:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d51c4:	4630      	mov	r0, r6

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
   d51c6:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d51ca:	eb06 0805 	add.w	r8, r6, r5
   d51ce:	4540      	cmp	r0, r8
   d51d0:	d80d      	bhi.n	d51ee <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
   d51d2:	6839      	ldr	r1, [r7, #0]
   d51d4:	f001 fb3b 	bl	d684e <strstr>
		if (!p) break;
   d51d8:	b148      	cbz	r0, d51ee <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d51da:	1b83      	subs	r3, r0, r6
   d51dc:	429d      	cmp	r5, r3
   d51de:	bf28      	it	cs
   d51e0:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d51e2:	3001      	adds	r0, #1
   d51e4:	e7f3      	b.n	d51ce <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d51e6:	f04f 30ff 	mov.w	r0, #4294967295
   d51ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51ee:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
   d51f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d51f4 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
   d51f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
   d51f8:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
   d51fc:	4605      	mov	r5, r0
   d51fe:	4688      	mov	r8, r1
   d5200:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
   d5202:	f1ba 0f00 	cmp.w	sl, #0
   d5206:	d078      	beq.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
   d5208:	f8d1 b008 	ldr.w	fp, [r1, #8]
   d520c:	f1bb 0f00 	cmp.w	fp, #0
   d5210:	d073      	beq.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
   d5212:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
   d5214:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
   d5216:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
   d521a:	2f00      	cmp	r7, #0
   d521c:	d10e      	bne.n	d523c <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d521e:	4620      	mov	r0, r4
   d5220:	f8d8 1000 	ldr.w	r1, [r8]
   d5224:	f001 fb13 	bl	d684e <strstr>
   d5228:	4604      	mov	r4, r0
   d522a:	2800      	cmp	r0, #0
   d522c:	d065      	beq.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
   d522e:	68b2      	ldr	r2, [r6, #8]
   d5230:	6831      	ldr	r1, [r6, #0]
   d5232:	f001 fa71 	bl	d6718 <memcpy>
			readFrom = foundAt + replace.len;
   d5236:	68b0      	ldr	r0, [r6, #8]
   d5238:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d523a:	e7f0      	b.n	d521e <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
   d523c:	da22      	bge.n	d5284 <_ZN6String7replaceERKS_S1_+0x90>
   d523e:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d5240:	f8d8 1000 	ldr.w	r1, [r8]
   d5244:	4620      	mov	r0, r4
   d5246:	f001 fb02 	bl	d684e <strstr>
   d524a:	4683      	mov	fp, r0
   d524c:	b1a8      	cbz	r0, d527a <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
   d524e:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
   d5252:	4621      	mov	r1, r4
   d5254:	4652      	mov	r2, sl
   d5256:	4648      	mov	r0, r9
			writeTo += n;
   d5258:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
   d525a:	f001 fa5d 	bl	d6718 <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
   d525e:	4648      	mov	r0, r9
   d5260:	68b2      	ldr	r2, [r6, #8]
   d5262:	6831      	ldr	r1, [r6, #0]
   d5264:	f001 fa58 	bl	d6718 <memcpy>
			writeTo += replace.len;
   d5268:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
   d526a:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
   d526e:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
   d5270:	68ab      	ldr	r3, [r5, #8]
   d5272:	443b      	add	r3, r7
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
   d5274:	445c      	add	r4, fp
			len += diff;
   d5276:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d5278:	e7e2      	b.n	d5240 <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
   d527a:	4621      	mov	r1, r4
   d527c:	4648      	mov	r0, r9
   d527e:	f001 faba 	bl	d67f6 <strcpy>
   d5282:	e03a      	b.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d5284:	680b      	ldr	r3, [r1, #0]
   d5286:	46d1      	mov	r9, sl
   d5288:	4619      	mov	r1, r3
   d528a:	4620      	mov	r0, r4
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	f001 fade 	bl	d684e <strstr>
   d5292:	b120      	cbz	r0, d529e <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
   d5294:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
   d5298:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d529a:	9b01      	ldr	r3, [sp, #4]
   d529c:	e7f4      	b.n	d5288 <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
   d529e:	45d1      	cmp	r9, sl
   d52a0:	d02b      	beq.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
   d52a2:	686b      	ldr	r3, [r5, #4]
   d52a4:	4599      	cmp	r9, r3
   d52a6:	d904      	bls.n	d52b2 <_ZN6String7replaceERKS_S1_+0xbe>
   d52a8:	4649      	mov	r1, r9
   d52aa:	4628      	mov	r0, r5
   d52ac:	f7ff fe56 	bl	d4f5c <_ZN6String12changeBufferEj>
   d52b0:	b318      	cbz	r0, d52fa <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
   d52b2:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
   d52b4:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
   d52b8:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
   d52ba:	2a00      	cmp	r2, #0
   d52bc:	db1d      	blt.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
   d52be:	4641      	mov	r1, r8
   d52c0:	4628      	mov	r0, r5
   d52c2:	f7ff ff70 	bl	d51a6 <_ZNK6String11lastIndexOfERKS_j>
   d52c6:	1e04      	subs	r4, r0, #0
   d52c8:	db17      	blt.n	d52fa <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
   d52ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d52ce:	6829      	ldr	r1, [r5, #0]
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   d52d0:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
   d52d2:	4423      	add	r3, r4
   d52d4:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   d52d6:	1ad2      	subs	r2, r2, r3
   d52d8:	19c8      	adds	r0, r1, r7
   d52da:	f001 fa28 	bl	d672e <memmove>
			len += diff;
   d52de:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
   d52e0:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
   d52e2:	443b      	add	r3, r7
   d52e4:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
   d52e6:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
   d52ea:	6828      	ldr	r0, [r5, #0]
   d52ec:	68b2      	ldr	r2, [r6, #8]
   d52ee:	6831      	ldr	r1, [r6, #0]
   d52f0:	4420      	add	r0, r4
   d52f2:	f001 fa11 	bl	d6718 <memcpy>
			index--;
   d52f6:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
   d52f8:	e7df      	b.n	d52ba <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
   d52fa:	4628      	mov	r0, r5
   d52fc:	b003      	add	sp, #12
   d52fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5302 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5302:	6800      	ldr	r0, [r0, #0]
   d5304:	b108      	cbz	r0, d530a <_ZNK6String5toIntEv+0x8>
   d5306:	f001 b9e1 	b.w	d66cc <atol>
	return 0;
}
   d530a:	4770      	bx	lr

000d530c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d530c:	680b      	ldr	r3, [r1, #0]
   d530e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5310:	b113      	cbz	r3, d5318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5312:	685a      	ldr	r2, [r3, #4]
   d5314:	3201      	adds	r2, #1
   d5316:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5318:	4770      	bx	lr
	...

000d531c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d531c:	4802      	ldr	r0, [pc, #8]	; (d5328 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d531e:	2300      	movs	r3, #0
   d5320:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5322:	f7ff bb25 	b.w	d4970 <os_mutex_recursive_create>
   d5326:	bf00      	nop
   d5328:	2003e3b0 	.word	0x2003e3b0

000d532c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d532e:	4606      	mov	r6, r0
   d5330:	460d      	mov	r5, r1
   d5332:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5334:	2400      	movs	r4, #0
  while (size--) {
   d5336:	42bd      	cmp	r5, r7
   d5338:	d00c      	beq.n	d5354 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d533a:	6833      	ldr	r3, [r6, #0]
   d533c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5340:	689b      	ldr	r3, [r3, #8]
   d5342:	4630      	mov	r0, r6
   d5344:	4798      	blx	r3
     if (chunk>=0)
   d5346:	2800      	cmp	r0, #0
   d5348:	db01      	blt.n	d534e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d534a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d534c:	e7f3      	b.n	d5336 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d534e:	2c00      	cmp	r4, #0
   d5350:	bf08      	it	eq
   d5352:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5354:	4620      	mov	r0, r4
   d5356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5358 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5358:	b570      	push	{r4, r5, r6, lr}
   d535a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d535c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d535e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5360:	b149      	cbz	r1, d5376 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5362:	f001 fa6c 	bl	d683e <strlen>
   d5366:	682b      	ldr	r3, [r5, #0]
   d5368:	4602      	mov	r2, r0
   d536a:	4621      	mov	r1, r4
   d536c:	4628      	mov	r0, r5
   d536e:	68db      	ldr	r3, [r3, #12]
    }
   d5370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5374:	4718      	bx	r3
    }
   d5376:	bd70      	pop	{r4, r5, r6, pc}

000d5378 <_ZN5Print5printEPKc>:
   d5378:	b508      	push	{r3, lr}
   d537a:	f7ff ffed 	bl	d5358 <_ZN5Print5writeEPKc>
   d537e:	bd08      	pop	{r3, pc}

000d5380 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5380:	6803      	ldr	r3, [r0, #0]
   d5382:	689b      	ldr	r3, [r3, #8]
   d5384:	4718      	bx	r3

000d5386 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5386:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5388:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d538a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d538c:	f7ff fff8 	bl	d5380 <_ZN5Print5printEc>
  n += print('\n');
   d5390:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5392:	4604      	mov	r4, r0
  n += print('\n');
   d5394:	4628      	mov	r0, r5
   d5396:	f7ff fff3 	bl	d5380 <_ZN5Print5printEc>
  return n;
}
   d539a:	4420      	add	r0, r4
   d539c:	bd38      	pop	{r3, r4, r5, pc}

000d539e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d539e:	b538      	push	{r3, r4, r5, lr}
   d53a0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53a2:	f7ff ffd9 	bl	d5358 <_ZN5Print5writeEPKc>
   d53a6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d53a8:	4628      	mov	r0, r5
   d53aa:	f7ff ffec 	bl	d5386 <_ZN5Print7printlnEv>
  return n;
}
   d53ae:	4420      	add	r0, r4
   d53b0:	bd38      	pop	{r3, r4, r5, pc}

000d53b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d53b2:	b530      	push	{r4, r5, lr}
   d53b4:	b08b      	sub	sp, #44	; 0x2c
   d53b6:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d53b8:	2100      	movs	r1, #0
   d53ba:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d53be:	2a01      	cmp	r2, #1
   d53c0:	bf98      	it	ls
   d53c2:	220a      	movls	r2, #10
   d53c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d53c8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d53cc:	fb05 3312 	mls	r3, r5, r2, r3
   d53d0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d53d4:	2b09      	cmp	r3, #9
   d53d6:	bf94      	ite	ls
   d53d8:	3330      	addls	r3, #48	; 0x30
   d53da:	3337      	addhi	r3, #55	; 0x37
   d53dc:	b2db      	uxtb	r3, r3
   d53de:	4621      	mov	r1, r4
   d53e0:	f804 3901 	strb.w	r3, [r4], #-1
   d53e4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d53e6:	2d00      	cmp	r5, #0
   d53e8:	d1ee      	bne.n	d53c8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d53ea:	f7ff ffb5 	bl	d5358 <_ZN5Print5writeEPKc>
}
   d53ee:	b00b      	add	sp, #44	; 0x2c
   d53f0:	bd30      	pop	{r4, r5, pc}

000d53f2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d53f2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d53f4:	b92a      	cbnz	r2, d5402 <_ZN5Print5printEmi+0x10>
   d53f6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d53f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d53fc:	689b      	ldr	r3, [r3, #8]
   d53fe:	b2c9      	uxtb	r1, r1
   d5400:	4718      	bx	r3
  else return printNumber(n, base);
   d5402:	b2d2      	uxtb	r2, r2
}
   d5404:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5408:	f7ff bfd3 	b.w	d53b2 <_ZN5Print11printNumberEmh>

000d540c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d540c:	f7ff bff1 	b.w	d53f2 <_ZN5Print5printEmi>

000d5410 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5414:	4607      	mov	r7, r0
   d5416:	460e      	mov	r6, r1
  if (base == 0) {
   d5418:	4615      	mov	r5, r2
   d541a:	b92a      	cbnz	r2, d5428 <_ZN5Print5printEli+0x18>
    return write(n);
   d541c:	6803      	ldr	r3, [r0, #0]
   d541e:	b2c9      	uxtb	r1, r1
   d5420:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d5426:	4718      	bx	r3
  } else if (base == 10) {
   d5428:	2a0a      	cmp	r2, #10
   d542a:	d102      	bne.n	d5432 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d542c:	2900      	cmp	r1, #0
   d542e:	da01      	bge.n	d5434 <_ZN5Print5printEli+0x24>
   d5430:	e004      	b.n	d543c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5432:	b2d2      	uxtb	r2, r2
  }
}
   d5434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5438:	f7ff bfbb 	b.w	d53b2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d543c:	212d      	movs	r1, #45	; 0x2d
   d543e:	f7ff ff9f 	bl	d5380 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5442:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5444:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d5446:	4271      	negs	r1, r6
   d5448:	4638      	mov	r0, r7
   d544a:	f7ff ffb2 	bl	d53b2 <_ZN5Print11printNumberEmh>
   d544e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5454 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d5454:	b538      	push	{r3, r4, r5, lr}
   d5456:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5458:	f7ff ffda 	bl	d5410 <_ZN5Print5printEli>
   d545c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d545e:	4628      	mov	r0, r5
   d5460:	f7ff ff91 	bl	d5386 <_ZN5Print7printlnEv>
  return n;
}
   d5464:	4420      	add	r0, r4
   d5466:	bd38      	pop	{r3, r4, r5, pc}

000d5468 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
   d5468:	b538      	push	{r3, r4, r5, lr}
   d546a:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d546c:	f7ff ffd0 	bl	d5410 <_ZN5Print5printEli>
   d5470:	4604      	mov	r4, r0
  n += println();
   d5472:	4628      	mov	r0, r5
   d5474:	f7ff ff87 	bl	d5386 <_ZN5Print7printlnEv>
  return n;
}
   d5478:	4420      	add	r0, r4
   d547a:	bd38      	pop	{r3, r4, r5, pc}

000d547c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d547c:	4b01      	ldr	r3, [pc, #4]	; (d5484 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d547e:	4a02      	ldr	r2, [pc, #8]	; (d5488 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5480:	601a      	str	r2, [r3, #0]
   d5482:	4770      	bx	lr
   d5484:	2003e3b4 	.word	0x2003e3b4
   d5488:	000d6b53 	.word	0x000d6b53

000d548c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d548c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d548e:	2000      	movs	r0, #0
   d5490:	f7ff fc0a 	bl	d4ca8 <spark_sync_time_pending>
   d5494:	b128      	cbz	r0, d54a2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5496:	f7ff fbdf 	bl	d4c58 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d549a:	f080 0001 	eor.w	r0, r0, #1
   d549e:	b2c0      	uxtb	r0, r0
   d54a0:	bd08      	pop	{r3, pc}
   d54a2:	2001      	movs	r0, #1
    }
   d54a4:	bd08      	pop	{r3, pc}

000d54a6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d54a6:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d54a8:	2000      	movs	r0, #0
   d54aa:	f7ff fa39 	bl	d4920 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d54ae:	4604      	mov	r4, r0
   d54b0:	b968      	cbnz	r0, d54ce <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d54b2:	f7ff fb1d 	bl	d4af0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d54b6:	2801      	cmp	r0, #1
   d54b8:	d10b      	bne.n	d54d2 <_ZN9TimeClass7isValidEv+0x2c>
   d54ba:	4620      	mov	r0, r4
   d54bc:	f7ff fb48 	bl	d4b50 <system_thread_get_state>
   d54c0:	b938      	cbnz	r0, d54d2 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d54c2:	f7ff ffe3 	bl	d548c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d54c6:	b930      	cbnz	r0, d54d6 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d54c8:	f7ff fbae 	bl	d4c28 <spark_process>
   d54cc:	e7f9      	b.n	d54c2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d54ce:	2001      	movs	r0, #1
   d54d0:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d54d2:	2000      	movs	r0, #0
   d54d4:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d54d6:	f7ff ffd9 	bl	d548c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d54da:	2000      	movs	r0, #0
   d54dc:	f7ff fa20 	bl	d4920 <HAL_RTC_Time_Is_Valid>
   d54e0:	3000      	adds	r0, #0
   d54e2:	bf18      	it	ne
   d54e4:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d54e8:	b508      	push	{r3, lr}
    (void)isValid();
   d54ea:	f7ff ffdc 	bl	d54a6 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d54ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d54f2:	f7ff ba0d 	b.w	d4910 <HAL_RTC_Get_UnixTime>
	...

000d54f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d54f8:	4b02      	ldr	r3, [pc, #8]	; (d5504 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d54fa:	681a      	ldr	r2, [r3, #0]
   d54fc:	4b02      	ldr	r3, [pc, #8]	; (d5508 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d54fe:	601a      	str	r2, [r3, #0]
   d5500:	4770      	bx	lr
   d5502:	bf00      	nop
   d5504:	2003e200 	.word	0x2003e200
   d5508:	2003e3b8 	.word	0x2003e3b8

000d550c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d550c:	2100      	movs	r1, #0
   d550e:	f7ff baff 	b.w	d4b10 <system_delay_ms>

000d5512 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5512:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5514:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5516:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5518:	b113      	cbz	r3, d5520 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d551a:	2203      	movs	r2, #3
   d551c:	4601      	mov	r1, r0
   d551e:	4798      	blx	r3
    }
   d5520:	4620      	mov	r0, r4
   d5522:	bd10      	pop	{r4, pc}

000d5524 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5524:	b510      	push	{r4, lr}
   d5526:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5528:	f7ff fff3 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
   d552c:	4620      	mov	r0, r4
   d552e:	bd10      	pop	{r4, pc}

000d5530 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5530:	b513      	push	{r0, r1, r4, lr}
   d5532:	460b      	mov	r3, r1
   d5534:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5536:	c803      	ldmia	r0, {r0, r1}
   d5538:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d553c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5540:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5544:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5548:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d554c:	b002      	add	sp, #8
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5550:	4803      	ldr	r0, [pc, #12]	; (d5560 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5552:	4a04      	ldr	r2, [pc, #16]	; (d5564 <_GLOBAL__sub_I_RGB+0x14>)
   d5554:	4904      	ldr	r1, [pc, #16]	; (d5568 <_GLOBAL__sub_I_RGB+0x18>)
   d5556:	2300      	movs	r3, #0
   d5558:	6083      	str	r3, [r0, #8]
   d555a:	f000 bf65 	b.w	d6428 <__aeabi_atexit>
   d555e:	bf00      	nop
   d5560:	2003e3bc 	.word	0x2003e3bc
   d5564:	2003e26c 	.word	0x2003e26c
   d5568:	000d5525 	.word	0x000d5525

000d556c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d556c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d556e:	4b0c      	ldr	r3, [pc, #48]	; (d55a0 <serialEventRun+0x34>)
   d5570:	b133      	cbz	r3, d5580 <serialEventRun+0x14>
   d5572:	f000 fbfd 	bl	d5d70 <_Z16_fetch_usbserialv>
   d5576:	6803      	ldr	r3, [r0, #0]
   d5578:	691b      	ldr	r3, [r3, #16]
   d557a:	4798      	blx	r3
   d557c:	2800      	cmp	r0, #0
   d557e:	dc09      	bgt.n	d5594 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5580:	4b08      	ldr	r3, [pc, #32]	; (d55a4 <serialEventRun+0x38>)
   d5582:	b163      	cbz	r3, d559e <serialEventRun+0x32>
   d5584:	f000 fcc2 	bl	d5f0c <_Z22__fetch_global_Serial1v>
   d5588:	6803      	ldr	r3, [r0, #0]
   d558a:	691b      	ldr	r3, [r3, #16]
   d558c:	4798      	blx	r3
   d558e:	2800      	cmp	r0, #0
   d5590:	dc03      	bgt.n	d559a <serialEventRun+0x2e>
   d5592:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5594:	f3af 8000 	nop.w
   d5598:	e7f2      	b.n	d5580 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d559a:	f3af 8000 	nop.w
   d559e:	bd08      	pop	{r3, pc}
	...

000d55a8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d55a8:	b508      	push	{r3, lr}
	serialEventRun();
   d55aa:	f7ff ffdf 	bl	d556c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55ae:	f7ff f9a7 	bl	d4900 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55b2:	4b01      	ldr	r3, [pc, #4]	; (d55b8 <_post_loop+0x10>)
   d55b4:	6018      	str	r0, [r3, #0]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	2003e734 	.word	0x2003e734

000d55bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d55bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55be:	2300      	movs	r3, #0
   d55c0:	9300      	str	r3, [sp, #0]
   d55c2:	461a      	mov	r2, r3
   d55c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55c8:	f7ff fad4 	bl	d4b74 <system_ctrl_set_result>
}
   d55cc:	b003      	add	sp, #12
   d55ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55d6:	8843      	ldrh	r3, [r0, #2]
   d55d8:	2b0a      	cmp	r3, #10
   d55da:	d008      	beq.n	d55ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d55dc:	2b50      	cmp	r3, #80	; 0x50
   d55de:	d109      	bne.n	d55f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d55e0:	4b09      	ldr	r3, [pc, #36]	; (d5608 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d55e2:	681b      	ldr	r3, [r3, #0]
   d55e4:	b13b      	cbz	r3, d55f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d55e6:	b003      	add	sp, #12
   d55e8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d55ec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d55ee:	f7ff ffe5 	bl	d55bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d55f2:	e006      	b.n	d5602 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55f4:	2300      	movs	r3, #0
   d55f6:	9300      	str	r3, [sp, #0]
   d55f8:	461a      	mov	r2, r3
   d55fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55fe:	f7ff fab9 	bl	d4b74 <system_ctrl_set_result>
        break;
    }
}
   d5602:	b003      	add	sp, #12
   d5604:	f85d fb04 	ldr.w	pc, [sp], #4
   d5608:	2003e3cc 	.word	0x2003e3cc

000d560c <module_user_init_hook>:

void module_user_init_hook()
{
   d560c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d560e:	f7ff f96f 	bl	d48f0 <HAL_RNG_GetRandomNumber>
   d5612:	4604      	mov	r4, r0
    srand(seed);
   d5614:	f001 f8ae 	bl	d6774 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5618:	4b07      	ldr	r3, [pc, #28]	; (d5638 <module_user_init_hook+0x2c>)
   d561a:	b113      	cbz	r3, d5622 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d561c:	4620      	mov	r0, r4
   d561e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5622:	2100      	movs	r1, #0
   d5624:	4804      	ldr	r0, [pc, #16]	; (d5638 <module_user_init_hook+0x2c>)
   d5626:	f7ff fb47 	bl	d4cb8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d562a:	2100      	movs	r1, #0
   d562c:	4803      	ldr	r0, [pc, #12]	; (d563c <module_user_init_hook+0x30>)
}
   d562e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5632:	f7ff ba95 	b.w	d4b60 <system_ctrl_set_app_request_handler>
   d5636:	bf00      	nop
   d5638:	00000000 	.word	0x00000000
   d563c:	000d55d5 	.word	0x000d55d5

000d5640 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5640:	4770      	bx	lr

000d5642 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5642:	2000      	movs	r0, #0
   d5644:	4770      	bx	lr

000d5646 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5646:	b510      	push	{r4, lr}
   d5648:	2110      	movs	r1, #16
   d564a:	4604      	mov	r4, r0
   d564c:	f000 fef1 	bl	d6432 <_ZdlPvj>
   d5650:	4620      	mov	r0, r4
   d5652:	bd10      	pop	{r4, pc}

000d5654 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5654:	b508      	push	{r3, lr}
      { delete this; }
   d5656:	b108      	cbz	r0, d565c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5658:	f7ff fff5 	bl	d5646 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d565c:	bd08      	pop	{r3, pc}

000d565e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d565e:	2200      	movs	r2, #0
   d5660:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5662:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5664:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5668:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d566a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d566e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5670:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5672:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5674:	680c      	ldr	r4, [r1, #0]
   d5676:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5678:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d567a:	bd10      	pop	{r4, pc}

000d567c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d567c:	b510      	push	{r4, lr}
   d567e:	4604      	mov	r4, r0
    free((void*)msg_);
   d5680:	6800      	ldr	r0, [r0, #0]
   d5682:	f7ff fb29 	bl	d4cd8 <free>
}
   d5686:	4620      	mov	r0, r4
   d5688:	bd10      	pop	{r4, pc}

000d568a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d568a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d568c:	68c4      	ldr	r4, [r0, #12]
   d568e:	b1f4      	cbz	r4, d56ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5690:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5692:	2b02      	cmp	r3, #2
   d5694:	d103      	bne.n	d569e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5696:	f104 000c 	add.w	r0, r4, #12
   d569a:	f7ff ffef 	bl	d567c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d569e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d56a0:	b135      	cbz	r5, d56b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d56a2:	4628      	mov	r0, r5
   d56a4:	f7ff ff35 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
   d56a8:	2110      	movs	r1, #16
   d56aa:	4628      	mov	r0, r5
   d56ac:	f000 fec1 	bl	d6432 <_ZdlPvj>
   d56b0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d56b2:	b135      	cbz	r5, d56c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d56b4:	4628      	mov	r0, r5
   d56b6:	f7ff ff2c 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
   d56ba:	2110      	movs	r1, #16
   d56bc:	4628      	mov	r0, r5
   d56be:	f000 feb8 	bl	d6432 <_ZdlPvj>
   d56c2:	4620      	mov	r0, r4
   d56c4:	2114      	movs	r1, #20
   d56c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d56ca:	f000 beb2 	b.w	d6432 <_ZdlPvj>
   d56ce:	bd38      	pop	{r3, r4, r5, pc}

000d56d0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d56d0:	b513      	push	{r0, r1, r4, lr}
   d56d2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d56d4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d56d8:	2300      	movs	r3, #0
   d56da:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d56dc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d56de:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d56e0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56e2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d56e4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d56e6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56e8:	f7fe fef4 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56ec:	4620      	mov	r0, r4
   d56ee:	b002      	add	sp, #8
   d56f0:	bd10      	pop	{r4, pc}

000d56f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d56f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56f4:	460c      	mov	r4, r1
   d56f6:	ad02      	add	r5, sp, #8
   d56f8:	f854 3b04 	ldr.w	r3, [r4], #4
   d56fc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5700:	4606      	mov	r6, r0
   d5702:	460f      	mov	r7, r1
   d5704:	a801      	add	r0, sp, #4
   d5706:	4621      	mov	r1, r4
   d5708:	f7ff fe00 	bl	d530c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d570c:	4629      	mov	r1, r5
   d570e:	4630      	mov	r0, r6
   d5710:	f7ff ffde 	bl	d56d0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5714:	a801      	add	r0, sp, #4
   d5716:	f7fe fedd 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d571a:	4620      	mov	r0, r4
   d571c:	f7fe feda 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5720:	4638      	mov	r0, r7
   d5722:	2108      	movs	r1, #8
   d5724:	f000 fe85 	bl	d6432 <_ZdlPvj>
        return p;
    }
   d5728:	4630      	mov	r0, r6
   d572a:	b003      	add	sp, #12
   d572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5730 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5730:	b538      	push	{r3, r4, r5, lr}
   d5732:	2300      	movs	r3, #0
   d5734:	4604      	mov	r4, r0
   d5736:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5738:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d573a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d573c:	f7fe fcab 	bl	d4096 <_Znwj>
   d5740:	b128      	cbz	r0, d574e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5742:	2301      	movs	r3, #1
   d5744:	6043      	str	r3, [r0, #4]
   d5746:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5748:	4b02      	ldr	r3, [pc, #8]	; (d5754 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d574a:	6003      	str	r3, [r0, #0]
   d574c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d574e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5750:	4620      	mov	r0, r4
   d5752:	bd38      	pop	{r3, r4, r5, pc}
   d5754:	000d6bf4 	.word	0x000d6bf4

000d5758 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5758:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d575a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d575c:	b90a      	cbnz	r2, d5762 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d575e:	f000 fe6a 	bl	d6436 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5762:	68c3      	ldr	r3, [r0, #12]
    }
   d5764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5768:	4718      	bx	r3

000d576a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d576a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d576c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d576e:	f100 0110 	add.w	r1, r0, #16
   d5772:	f7ff fff1 	bl	d5758 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5776:	bd08      	pop	{r3, pc}

000d5778 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5778:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d577a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d577c:	b90a      	cbnz	r2, d5782 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d577e:	f000 fe5a 	bl	d6436 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5782:	68c3      	ldr	r3, [r0, #12]
    }
   d5784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5788:	4718      	bx	r3

000d578a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d578a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d578c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d578e:	f100 0110 	add.w	r1, r0, #16
   d5792:	f7ff fff1 	bl	d5778 <_ZNKSt8functionIFvRKbEEclES1_>
   d5796:	bd08      	pop	{r3, pc}

000d5798 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5798:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d579a:	2300      	movs	r3, #0
   d579c:	6083      	str	r3, [r0, #8]
   d579e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d57a0:	4604      	mov	r4, r0
   d57a2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d57a4:	b12b      	cbz	r3, d57b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d57a6:	2202      	movs	r2, #2
   d57a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d57aa:	68eb      	ldr	r3, [r5, #12]
   d57ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d57ae:	68ab      	ldr	r3, [r5, #8]
   d57b0:	60a3      	str	r3, [r4, #8]
	}
    }
   d57b2:	4620      	mov	r0, r4
   d57b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d57b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d57b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57ba:	b089      	sub	sp, #36	; 0x24
   d57bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d57be:	4668      	mov	r0, sp
   d57c0:	f7ff ff4d 	bl	d565e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d57c4:	2300      	movs	r3, #0
   d57c6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d57ca:	f04f 0202 	mov.w	r2, #2
   d57ce:	e8d4 3f4f 	ldrexb	r3, [r4]
   d57d2:	2b00      	cmp	r3, #0
   d57d4:	d103      	bne.n	d57de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d57d6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d57da:	2900      	cmp	r1, #0
   d57dc:	d1f7      	bne.n	d57ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d57de:	d002      	beq.n	d57e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d57e0:	f88d 3008 	strb.w	r3, [sp, #8]
   d57e4:	e063      	b.n	d58ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d57e6:	f114 050c 	adds.w	r5, r4, #12
   d57ea:	d003      	beq.n	d57f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d57ec:	4669      	mov	r1, sp
   d57ee:	4628      	mov	r0, r5
   d57f0:	f7ff ff35 	bl	d565e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d57f4:	f3bf 8f5f 	dmb	sy
   d57f8:	2301      	movs	r3, #1
   d57fa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d57fc:	2000      	movs	r0, #0
   d57fe:	f104 0308 	add.w	r3, r4, #8
   d5802:	f3bf 8f5f 	dmb	sy
   d5806:	e853 6f00 	ldrex	r6, [r3]
   d580a:	e843 0200 	strex	r2, r0, [r3]
   d580e:	2a00      	cmp	r2, #0
   d5810:	d1f9      	bne.n	d5806 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5812:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5816:	2e00      	cmp	r6, #0
   d5818:	d049      	beq.n	d58ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d581a:	f7ff f989 	bl	d4b30 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d581e:	b120      	cbz	r0, d582a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5820:	4629      	mov	r1, r5
   d5822:	4630      	mov	r0, r6
   d5824:	f7ff ff98 	bl	d5758 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5828:	e03a      	b.n	d58a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d582a:	4631      	mov	r1, r6
   d582c:	a802      	add	r0, sp, #8
   d582e:	f7ff ffb3 	bl	d5798 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5832:	68e0      	ldr	r0, [r4, #12]
   d5834:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5838:	b108      	cbz	r0, d583e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d583a:	f000 ffe5 	bl	d6808 <strdup>
   d583e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5840:	2010      	movs	r0, #16
   d5842:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5846:	f7fe fc26 	bl	d4096 <_Znwj>
   d584a:	4605      	mov	r5, r0
   d584c:	b1e8      	cbz	r0, d588a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d584e:	2700      	movs	r7, #0
   d5850:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5852:	2018      	movs	r0, #24
   d5854:	f7fe fc1f 	bl	d4096 <_Znwj>
   d5858:	4604      	mov	r4, r0
   d585a:	b188      	cbz	r0, d5880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d585c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d585e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5860:	a802      	add	r0, sp, #8
   d5862:	f7ff fe65 	bl	d5530 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5866:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5868:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d586a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d586c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d586e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5870:	a906      	add	r1, sp, #24
   d5872:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5874:	60e3      	str	r3, [r4, #12]
   d5876:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d587a:	9205      	str	r2, [sp, #20]
   d587c:	f7ff feef 	bl	d565e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5880:	4b0d      	ldr	r3, [pc, #52]	; (d58b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5882:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5884:	4b0d      	ldr	r3, [pc, #52]	; (d58bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5886:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5888:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d588a:	a806      	add	r0, sp, #24
   d588c:	f7ff fef6 	bl	d567c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5890:	a802      	add	r0, sp, #8
   d5892:	f7ff fe3e 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5896:	2200      	movs	r2, #0
   d5898:	4629      	mov	r1, r5
   d589a:	4809      	ldr	r0, [pc, #36]	; (d58c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d589c:	f7ff f950 	bl	d4b40 <application_thread_invoke>
   d58a0:	4630      	mov	r0, r6
   d58a2:	f7ff fe36 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d58a6:	2110      	movs	r1, #16
   d58a8:	4630      	mov	r0, r6
   d58aa:	f000 fdc2 	bl	d6432 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d58ae:	4668      	mov	r0, sp
   d58b0:	f7ff fee4 	bl	d567c <_ZN8particle5ErrorD1Ev>
    }
   d58b4:	b009      	add	sp, #36	; 0x24
   d58b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58b8:	000d576b 	.word	0x000d576b
   d58bc:	000d59e1 	.word	0x000d59e1
   d58c0:	000d5f59 	.word	0x000d5f59

000d58c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d58c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58c8:	b08b      	sub	sp, #44	; 0x2c
   d58ca:	4606      	mov	r6, r0
   d58cc:	460f      	mov	r7, r1
   d58ce:	4690      	mov	r8, r2
   d58d0:	4699      	mov	r9, r3
   d58d2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d58d6:	f7ff f9bf 	bl	d4c58 <spark_cloud_flag_connected>
   d58da:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d58dc:	4683      	mov	fp, r0
   d58de:	bb30      	cbnz	r0, d592e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d58e0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d58e4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d58e6:	a905      	add	r1, sp, #20
   d58e8:	4628      	mov	r0, r5
   d58ea:	f8ad 3018 	strh.w	r3, [sp, #24]
   d58ee:	f7ff feb6 	bl	d565e <_ZN8particle5ErrorC1EOS0_>
   d58f2:	2014      	movs	r0, #20
   d58f4:	f7fe fbcf 	bl	d4096 <_Znwj>
   d58f8:	4604      	mov	r4, r0
   d58fa:	b158      	cbz	r0, d5914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d58fc:	2302      	movs	r3, #2
   d58fe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5900:	2301      	movs	r3, #1
   d5902:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5904:	f8c0 b004 	str.w	fp, [r0, #4]
   d5908:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d590c:	4629      	mov	r1, r5
   d590e:	300c      	adds	r0, #12
   d5910:	f7ff fea5 	bl	d565e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5914:	4630      	mov	r0, r6
   d5916:	4621      	mov	r1, r4
   d5918:	f840 4b04 	str.w	r4, [r0], #4
   d591c:	f7ff ff08 	bl	d5730 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5920:	4628      	mov	r0, r5
   d5922:	f7ff feab 	bl	d567c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5926:	a805      	add	r0, sp, #20
   d5928:	f7ff fea8 	bl	d567c <_ZN8particle5ErrorD1Ev>
   d592c:	e052      	b.n	d59d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d592e:	2400      	movs	r4, #0
   d5930:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5932:	2014      	movs	r0, #20
   d5934:	606c      	str	r4, [r5, #4]
   d5936:	60ac      	str	r4, [r5, #8]
   d5938:	9307      	str	r3, [sp, #28]
   d593a:	f7fe fbac 	bl	d4096 <_Znwj>
   d593e:	4601      	mov	r1, r0
   d5940:	b118      	cbz	r0, d594a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5942:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5944:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5946:	6044      	str	r4, [r0, #4]
   d5948:	6084      	str	r4, [r0, #8]
   d594a:	a804      	add	r0, sp, #16
   d594c:	9103      	str	r1, [sp, #12]
   d594e:	f7ff feef 	bl	d5730 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5952:	4b22      	ldr	r3, [pc, #136]	; (d59dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5954:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5956:	2008      	movs	r0, #8
   d5958:	f7fe fb9d 	bl	d4096 <_Znwj>
   d595c:	4604      	mov	r4, r0
   d595e:	b128      	cbz	r0, d596c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5960:	9b03      	ldr	r3, [sp, #12]
   d5962:	f840 3b04 	str.w	r3, [r0], #4
   d5966:	a904      	add	r1, sp, #16
   d5968:	f7ff fcd0 	bl	d530c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d596c:	9500      	str	r5, [sp, #0]
   d596e:	fa5f f38a 	uxtb.w	r3, sl
   d5972:	464a      	mov	r2, r9
   d5974:	4641      	mov	r1, r8
   d5976:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5978:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d597a:	f7ff f97d 	bl	d4c78 <spark_send_event>
   d597e:	b920      	cbnz	r0, d598a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5980:	9b03      	ldr	r3, [sp, #12]
   d5982:	785b      	ldrb	r3, [r3, #1]
   d5984:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5988:	b183      	cbz	r3, d59ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d598a:	9b03      	ldr	r3, [sp, #12]
   d598c:	9305      	str	r3, [sp, #20]
   d598e:	a904      	add	r1, sp, #16
   d5990:	a806      	add	r0, sp, #24
   d5992:	f7ff fcbb 	bl	d530c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5996:	a905      	add	r1, sp, #20
   d5998:	4630      	mov	r0, r6
   d599a:	f7ff fe99 	bl	d56d0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d599e:	a806      	add	r0, sp, #24
   d59a0:	f7fe fd98 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59a4:	a804      	add	r0, sp, #16
   d59a6:	f7fe fd95 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59aa:	e013      	b.n	d59d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d59ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d59b0:	a905      	add	r1, sp, #20
   d59b2:	a803      	add	r0, sp, #12
   d59b4:	9205      	str	r2, [sp, #20]
   d59b6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d59ba:	f7ff fefd 	bl	d57b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d59be:	a805      	add	r0, sp, #20
   d59c0:	f7ff fe5c 	bl	d567c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d59c4:	a805      	add	r0, sp, #20
   d59c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d59c8:	f7ff fe93 	bl	d56f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d59cc:	a806      	add	r0, sp, #24
   d59ce:	f7fe fd81 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59d2:	e7da      	b.n	d598a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d59d4:	4630      	mov	r0, r6
   d59d6:	b00b      	add	sp, #44	; 0x2c
   d59d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59dc:	000d5b51 	.word	0x000d5b51

000d59e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d59e0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d59e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59e4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d59e6:	d006      	beq.n	d59f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d59e8:	2a03      	cmp	r2, #3
   d59ea:	d017      	beq.n	d5a1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d59ec:	2a01      	cmp	r2, #1
   d59ee:	d122      	bne.n	d5a36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d59f0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d59f2:	6003      	str	r3, [r0, #0]
	      break;
   d59f4:	e01f      	b.n	d5a36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d59f6:	2018      	movs	r0, #24
   d59f8:	680e      	ldr	r6, [r1, #0]
   d59fa:	f7fe fb4c 	bl	d4096 <_Znwj>
   d59fe:	4605      	mov	r5, r0
   d5a00:	b150      	cbz	r0, d5a18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5a02:	4631      	mov	r1, r6
   d5a04:	f7ff fec8 	bl	d5798 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5a08:	6930      	ldr	r0, [r6, #16]
   d5a0a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5a0e:	b108      	cbz	r0, d5a14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5a10:	f000 fefa 	bl	d6808 <strdup>
   d5a14:	6128      	str	r0, [r5, #16]
   d5a16:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a18:	6025      	str	r5, [r4, #0]
   d5a1a:	e00c      	b.n	d5a36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a1c:	6804      	ldr	r4, [r0, #0]
   d5a1e:	b154      	cbz	r4, d5a36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5a20:	f104 0010 	add.w	r0, r4, #16
   d5a24:	f7ff fe2a 	bl	d567c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a28:	4620      	mov	r0, r4
   d5a2a:	f7ff fd72 	bl	d5512 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a2e:	2118      	movs	r1, #24
   d5a30:	4620      	mov	r0, r4
   d5a32:	f000 fcfe 	bl	d6432 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5a36:	2000      	movs	r0, #0
   d5a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a3a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5a3a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5a3c:	2300      	movs	r3, #0
   d5a3e:	6083      	str	r3, [r0, #8]
   d5a40:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5a42:	4604      	mov	r4, r0
   d5a44:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5a46:	b12b      	cbz	r3, d5a54 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5a48:	2202      	movs	r2, #2
   d5a4a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5a4c:	68eb      	ldr	r3, [r5, #12]
   d5a4e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5a50:	68ab      	ldr	r3, [r5, #8]
   d5a52:	60a3      	str	r3, [r4, #8]
	}
    }
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd38      	pop	{r3, r4, r5, pc}

000d5a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5a58:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5a5a:	b570      	push	{r4, r5, r6, lr}
   d5a5c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5a5e:	d006      	beq.n	d5a6e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5a60:	2a03      	cmp	r2, #3
   d5a62:	d011      	beq.n	d5a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5a64:	2a01      	cmp	r2, #1
   d5a66:	d118      	bne.n	d5a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5a68:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5a6a:	6003      	str	r3, [r0, #0]
	      break;
   d5a6c:	e015      	b.n	d5a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a6e:	2014      	movs	r0, #20
   d5a70:	680e      	ldr	r6, [r1, #0]
   d5a72:	f7fe fb10 	bl	d4096 <_Znwj>
   d5a76:	4605      	mov	r5, r0
   d5a78:	b120      	cbz	r0, d5a84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5a7a:	4631      	mov	r1, r6
   d5a7c:	f7ff ffdd 	bl	d5a3a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5a80:	7c33      	ldrb	r3, [r6, #16]
   d5a82:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5a84:	6025      	str	r5, [r4, #0]
   d5a86:	e008      	b.n	d5a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a88:	6804      	ldr	r4, [r0, #0]
   d5a8a:	b134      	cbz	r4, d5a9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5a8c:	4620      	mov	r0, r4
   d5a8e:	f7ff fd40 	bl	d5512 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5a92:	2114      	movs	r1, #20
   d5a94:	4620      	mov	r0, r4
   d5a96:	f000 fccc 	bl	d6432 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5a9a:	2000      	movs	r0, #0
   d5a9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5aa0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5aa0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5aa2:	2300      	movs	r3, #0
   d5aa4:	b087      	sub	sp, #28
   d5aa6:	460c      	mov	r4, r1
   d5aa8:	f3bf 8f5f 	dmb	sy
   d5aac:	e850 6f00 	ldrex	r6, [r0]
   d5ab0:	e840 3200 	strex	r2, r3, [r0]
   d5ab4:	2a00      	cmp	r2, #0
   d5ab6:	d1f9      	bne.n	d5aac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5ab8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5abc:	2e00      	cmp	r6, #0
   d5abe:	d03f      	beq.n	d5b40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ac0:	4618      	mov	r0, r3
   d5ac2:	f7ff f835 	bl	d4b30 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5ac6:	4607      	mov	r7, r0
   d5ac8:	b120      	cbz	r0, d5ad4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5aca:	4621      	mov	r1, r4
   d5acc:	4630      	mov	r0, r6
   d5ace:	f7ff fe53 	bl	d5778 <_ZNKSt8functionIFvRKbEEclES1_>
   d5ad2:	e02e      	b.n	d5b32 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ad4:	4631      	mov	r1, r6
   d5ad6:	a801      	add	r0, sp, #4
   d5ad8:	f7ff ffaf 	bl	d5a3a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5adc:	7823      	ldrb	r3, [r4, #0]
   d5ade:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5ae2:	2010      	movs	r0, #16
   d5ae4:	f7fe fad7 	bl	d4096 <_Znwj>
   d5ae8:	4605      	mov	r5, r0
   d5aea:	b1d0      	cbz	r0, d5b22 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5aec:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5aee:	2014      	movs	r0, #20
   d5af0:	f7fe fad1 	bl	d4096 <_Znwj>
   d5af4:	4604      	mov	r4, r0
   d5af6:	b178      	cbz	r0, d5b18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5af8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5afa:	4601      	mov	r1, r0
   d5afc:	a801      	add	r0, sp, #4
   d5afe:	f7ff fd17 	bl	d5530 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b02:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5b04:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b06:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5b08:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5b0a:	9203      	str	r2, [sp, #12]
   d5b0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b0e:	60e3      	str	r3, [r4, #12]
   d5b10:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b14:	9204      	str	r2, [sp, #16]
   d5b16:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5b18:	4b0a      	ldr	r3, [pc, #40]	; (d5b44 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5b1a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5b1c:	4b0a      	ldr	r3, [pc, #40]	; (d5b48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5b1e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5b20:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5b22:	a801      	add	r0, sp, #4
   d5b24:	f7ff fcf5 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5b28:	2200      	movs	r2, #0
   d5b2a:	4629      	mov	r1, r5
   d5b2c:	4807      	ldr	r0, [pc, #28]	; (d5b4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5b2e:	f7ff f807 	bl	d4b40 <application_thread_invoke>
   d5b32:	4630      	mov	r0, r6
   d5b34:	f7ff fced 	bl	d5512 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5b38:	2110      	movs	r1, #16
   d5b3a:	4630      	mov	r0, r6
   d5b3c:	f000 fc79 	bl	d6432 <_ZdlPvj>
        }
    }
   d5b40:	b007      	add	sp, #28
   d5b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b44:	000d578b 	.word	0x000d578b
   d5b48:	000d5a59 	.word	0x000d5a59
   d5b4c:	000d5f59 	.word	0x000d5f59

000d5b50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5b50:	b530      	push	{r4, r5, lr}
   d5b52:	b085      	sub	sp, #20
   d5b54:	4604      	mov	r4, r0
   d5b56:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5b58:	4668      	mov	r0, sp
   d5b5a:	4611      	mov	r1, r2
   d5b5c:	f7ff fdc9 	bl	d56f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5b60:	b17c      	cbz	r4, d5b82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5b62:	b224      	sxth	r4, r4
   d5b64:	4628      	mov	r0, r5
   d5b66:	b10d      	cbz	r5, d5b6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5b68:	f000 fe4e 	bl	d6808 <strdup>
   d5b6c:	9002      	str	r0, [sp, #8]
   d5b6e:	a902      	add	r1, sp, #8
   d5b70:	4668      	mov	r0, sp
   d5b72:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5b76:	f7ff fe1f 	bl	d57b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5b7a:	a802      	add	r0, sp, #8
   d5b7c:	f7ff fd7e 	bl	d567c <_ZN8particle5ErrorD1Ev>
   d5b80:	e01d      	b.n	d5bbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5b82:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5b84:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5b88:	f04f 0201 	mov.w	r2, #1
   d5b8c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5b90:	42a3      	cmp	r3, r4
   d5b92:	d103      	bne.n	d5b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5b94:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5b98:	2900      	cmp	r1, #0
   d5b9a:	d1f7      	bne.n	d5b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5b9c:	d002      	beq.n	d5ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5b9e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5ba2:	e00c      	b.n	d5bbe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5ba4:	f110 010c 	adds.w	r1, r0, #12
   d5ba8:	f04f 0301 	mov.w	r3, #1
   d5bac:	bf18      	it	ne
   d5bae:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5bb0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5bb4:	3004      	adds	r0, #4
   d5bb6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5bba:	f7ff ff71 	bl	d5aa0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5bbe:	a801      	add	r0, sp, #4
   d5bc0:	f7fe fc88 	bl	d44d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5bc4:	b005      	add	sp, #20
   d5bc6:	bd30      	pop	{r4, r5, pc}

000d5bc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5bc8:	4770      	bx	lr

000d5bca <_ZN9IPAddressD0Ev>:
   d5bca:	b510      	push	{r4, lr}
   d5bcc:	2118      	movs	r1, #24
   d5bce:	4604      	mov	r4, r0
   d5bd0:	f000 fc2f 	bl	d6432 <_ZdlPvj>
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	bd10      	pop	{r4, pc}

000d5bd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bda:	7d03      	ldrb	r3, [r0, #20]
   d5bdc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bde:	b08d      	sub	sp, #52	; 0x34
   d5be0:	460e      	mov	r6, r1
   d5be2:	f100 0704 	add.w	r7, r0, #4
   d5be6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bea:	d002      	beq.n	d5bf2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5bec:	f100 0508 	add.w	r5, r0, #8
   d5bf0:	e018      	b.n	d5c24 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bf2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bf4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bf6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bfa:	232f      	movs	r3, #47	; 0x2f
   d5bfc:	462a      	mov	r2, r5
   d5bfe:	200a      	movs	r0, #10
   d5c00:	f7fe febe 	bl	d4980 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c04:	4628      	mov	r0, r5
   d5c06:	f000 fe1a 	bl	d683e <strlen>
   d5c0a:	6833      	ldr	r3, [r6, #0]
   d5c0c:	4602      	mov	r2, r0
   d5c0e:	68db      	ldr	r3, [r3, #12]
   d5c10:	4629      	mov	r1, r5
   d5c12:	4630      	mov	r0, r6
   d5c14:	4798      	blx	r3
   d5c16:	e00f      	b.n	d5c38 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5c18:	b124      	cbz	r4, d5c24 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5c1a:	212e      	movs	r1, #46	; 0x2e
   d5c1c:	4630      	mov	r0, r6
   d5c1e:	f7ff fbaf 	bl	d5380 <_ZN5Print5printEc>
   d5c22:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5c24:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c28:	220a      	movs	r2, #10
   d5c2a:	4630      	mov	r0, r6
   d5c2c:	f7ff fbee 	bl	d540c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c30:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c32:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c34:	d1f0      	bne.n	d5c18 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c36:	4620      	mov	r0, r4
    }
    return n;
}
   d5c38:	b00d      	add	sp, #52	; 0x34
   d5c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c3c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5c3c:	b510      	push	{r4, lr}
   d5c3e:	4b05      	ldr	r3, [pc, #20]	; (d5c54 <_ZN9IPAddressC1Ev+0x18>)
   d5c40:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c42:	2211      	movs	r2, #17
   d5c44:	f840 3b04 	str.w	r3, [r0], #4
   d5c48:	2100      	movs	r1, #0
   d5c4a:	f000 fd8b 	bl	d6764 <memset>
{
    clear();
}
   d5c4e:	4620      	mov	r0, r4
   d5c50:	bd10      	pop	{r4, pc}
   d5c52:	bf00      	nop
   d5c54:	000d6c10 	.word	0x000d6c10

000d5c58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c58:	4603      	mov	r3, r0
   d5c5a:	4a07      	ldr	r2, [pc, #28]	; (d5c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c5c:	b510      	push	{r4, lr}
   d5c5e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c62:	f101 0210 	add.w	r2, r1, #16
   d5c66:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c6a:	f843 4b04 	str.w	r4, [r3], #4
   d5c6e:	4291      	cmp	r1, r2
   d5c70:	d1f9      	bne.n	d5c66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c72:	780a      	ldrb	r2, [r1, #0]
   d5c74:	701a      	strb	r2, [r3, #0]
}
   d5c76:	bd10      	pop	{r4, pc}
   d5c78:	000d6c10 	.word	0x000d6c10

000d5c7c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c8e:	2304      	movs	r3, #4
   d5c90:	6041      	str	r1, [r0, #4]
   d5c92:	7503      	strb	r3, [r0, #20]
   d5c94:	bd10      	pop	{r4, pc}

000d5c96 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c98:	780d      	ldrb	r5, [r1, #0]
   d5c9a:	788b      	ldrb	r3, [r1, #2]
   d5c9c:	784a      	ldrb	r2, [r1, #1]
   d5c9e:	78c9      	ldrb	r1, [r1, #3]
   d5ca0:	9100      	str	r1, [sp, #0]
   d5ca2:	4629      	mov	r1, r5
   d5ca4:	f7ff ffea 	bl	d5c7c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5ca8:	b003      	add	sp, #12
   d5caa:	bd30      	pop	{r4, r5, pc}

000d5cac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5cac:	7441      	strb	r1, [r0, #17]
   d5cae:	4770      	bx	lr

000d5cb0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5cb0:	4770      	bx	lr

000d5cb2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5cb2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5cb4:	2100      	movs	r1, #0
   d5cb6:	7c00      	ldrb	r0, [r0, #16]
   d5cb8:	f7fe ff02 	bl	d4ac0 <HAL_USB_USART_Receive_Data>
}
   d5cbc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cc0:	bf28      	it	cs
   d5cc2:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cc6:	bd08      	pop	{r3, pc}

000d5cc8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5cc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5cca:	2101      	movs	r1, #1
   d5ccc:	7c00      	ldrb	r0, [r0, #16]
   d5cce:	f7fe fef7 	bl	d4ac0 <HAL_USB_USART_Receive_Data>
}
   d5cd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5cd6:	bf28      	it	cs
   d5cd8:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cdc:	bd08      	pop	{r3, pc}

000d5cde <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5cde:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5ce0:	7c00      	ldrb	r0, [r0, #16]
   d5ce2:	f7fe fee5 	bl	d4ab0 <HAL_USB_USART_Available_Data_For_Write>
}
   d5ce6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cea:	bd08      	pop	{r3, pc}

000d5cec <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5cec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5cee:	7c00      	ldrb	r0, [r0, #16]
   d5cf0:	f7fe fed6 	bl	d4aa0 <HAL_USB_USART_Available_Data>
}
   d5cf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cf8:	bd08      	pop	{r3, pc}

000d5cfa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5cfa:	7c00      	ldrb	r0, [r0, #16]
   d5cfc:	f7fe bef0 	b.w	d4ae0 <HAL_USB_USART_Flush_Data>

000d5d00 <_ZN9USBSerialD0Ev>:
   d5d00:	b510      	push	{r4, lr}
   d5d02:	2114      	movs	r1, #20
   d5d04:	4604      	mov	r4, r0
   d5d06:	f000 fb94 	bl	d6432 <_ZdlPvj>
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	bd10      	pop	{r4, pc}

000d5d0e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d0e:	b538      	push	{r3, r4, r5, lr}
   d5d10:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d12:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5d14:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5d16:	f7fe fecb 	bl	d4ab0 <HAL_USB_USART_Available_Data_For_Write>
   d5d1a:	2800      	cmp	r0, #0
   d5d1c:	dc01      	bgt.n	d5d22 <_ZN9USBSerial5writeEh+0x14>
   d5d1e:	7c60      	ldrb	r0, [r4, #17]
   d5d20:	b128      	cbz	r0, d5d2e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5d22:	4629      	mov	r1, r5
   d5d24:	7c20      	ldrb	r0, [r4, #16]
   d5d26:	f7fe fed3 	bl	d4ad0 <HAL_USB_USART_Send_Data>
   d5d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5d2e:	bd38      	pop	{r3, r4, r5, pc}

000d5d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d30:	b510      	push	{r4, lr}
   d5d32:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d34:	2300      	movs	r3, #0
   d5d36:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d3c:	60a3      	str	r3, [r4, #8]
   d5d3e:	4b05      	ldr	r3, [pc, #20]	; (d5d54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d40:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5d42:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d44:	4608      	mov	r0, r1
{
  _serial = serial;
   d5d46:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5d48:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5d4a:	4611      	mov	r1, r2
   d5d4c:	f7fe fe98 	bl	d4a80 <HAL_USB_USART_Init>
}
   d5d50:	4620      	mov	r0, r4
   d5d52:	bd10      	pop	{r4, pc}
   d5d54:	000d6c24 	.word	0x000d6c24

000d5d58 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d58:	2200      	movs	r2, #0
   d5d5a:	7c00      	ldrb	r0, [r0, #16]
   d5d5c:	f7fe be98 	b.w	d4a90 <HAL_USB_USART_Begin>

000d5d60 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d62:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d64:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d66:	2100      	movs	r1, #0
   d5d68:	f000 fcfc 	bl	d6764 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	bd10      	pop	{r4, pc}

000d5d70 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d70:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d72:	4d0e      	ldr	r5, [pc, #56]	; (d5dac <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5d74:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d76:	a801      	add	r0, sp, #4
   d5d78:	f7ff fff2 	bl	d5d60 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d7c:	6829      	ldr	r1, [r5, #0]
   d5d7e:	f011 0401 	ands.w	r4, r1, #1
   d5d82:	d110      	bne.n	d5da6 <_Z16_fetch_usbserialv+0x36>
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7fe f98c 	bl	d40a2 <__cxa_guard_acquire>
   d5d8a:	b160      	cbz	r0, d5da6 <_Z16_fetch_usbserialv+0x36>
   d5d8c:	aa01      	add	r2, sp, #4
   d5d8e:	4621      	mov	r1, r4
   d5d90:	4807      	ldr	r0, [pc, #28]	; (d5db0 <_Z16_fetch_usbserialv+0x40>)
   d5d92:	f7ff ffcd 	bl	d5d30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d96:	4628      	mov	r0, r5
   d5d98:	f7fe f988 	bl	d40ac <__cxa_guard_release>
   d5d9c:	4a05      	ldr	r2, [pc, #20]	; (d5db4 <_Z16_fetch_usbserialv+0x44>)
   d5d9e:	4906      	ldr	r1, [pc, #24]	; (d5db8 <_Z16_fetch_usbserialv+0x48>)
   d5da0:	4803      	ldr	r0, [pc, #12]	; (d5db0 <_Z16_fetch_usbserialv+0x40>)
   d5da2:	f000 fb41 	bl	d6428 <__aeabi_atexit>
	return _usbserial;
}
   d5da6:	4802      	ldr	r0, [pc, #8]	; (d5db0 <_Z16_fetch_usbserialv+0x40>)
   d5da8:	b007      	add	sp, #28
   d5daa:	bd30      	pop	{r4, r5, pc}
   d5dac:	2003e3d0 	.word	0x2003e3d0
   d5db0:	2003e3d4 	.word	0x2003e3d4
   d5db4:	2003e26c 	.word	0x2003e26c
   d5db8:	000d5cb1 	.word	0x000d5cb1

000d5dbc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	4611      	mov	r1, r2
   d5dc0:	6840      	ldr	r0, [r0, #4]
   d5dc2:	f7fe bef9 	b.w	d4bb8 <network_ready>

000d5dc6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5dc6:	2200      	movs	r2, #0
   d5dc8:	4611      	mov	r1, r2
   d5dca:	6840      	ldr	r0, [r0, #4]
   d5dcc:	f7fe bf14 	b.w	d4bf8 <network_listening>

000d5dd0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5dd0:	2200      	movs	r2, #0
   d5dd2:	4611      	mov	r1, r2
   d5dd4:	6840      	ldr	r0, [r0, #4]
   d5dd6:	f7fe bf1f 	b.w	d4c18 <network_get_listen_timeout>

000d5dda <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5dda:	2200      	movs	r2, #0
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7fe bf13 	b.w	d4c08 <network_set_listen_timeout>

000d5de2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5de2:	2200      	movs	r2, #0
   d5de4:	f081 0101 	eor.w	r1, r1, #1
   d5de8:	6840      	ldr	r0, [r0, #4]
   d5dea:	f7fe befd 	b.w	d4be8 <network_listen>

000d5dee <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5dee:	2300      	movs	r3, #0
   d5df0:	461a      	mov	r2, r3
   d5df2:	4619      	mov	r1, r3
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	f7fe beef 	b.w	d4bd8 <network_off>

000d5dfa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	461a      	mov	r2, r3
   d5dfe:	4619      	mov	r1, r3
   d5e00:	6840      	ldr	r0, [r0, #4]
   d5e02:	f7fe bee1 	b.w	d4bc8 <network_on>

000d5e06 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5e06:	2200      	movs	r2, #0
   d5e08:	4611      	mov	r1, r2
   d5e0a:	6840      	ldr	r0, [r0, #4]
   d5e0c:	f7fe bec4 	b.w	d4b98 <network_connecting>

000d5e10 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e10:	2200      	movs	r2, #0
   d5e12:	2102      	movs	r1, #2
   d5e14:	6840      	ldr	r0, [r0, #4]
   d5e16:	f7fe bec7 	b.w	d4ba8 <network_disconnect>

000d5e1a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5e1a:	2300      	movs	r3, #0
   d5e1c:	461a      	mov	r2, r3
   d5e1e:	6840      	ldr	r0, [r0, #4]
   d5e20:	f7fe beb2 	b.w	d4b88 <network_connect>

000d5e24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5e24:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5e26:	4c08      	ldr	r4, [pc, #32]	; (d5e48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5e28:	2528      	movs	r5, #40	; 0x28
   d5e2a:	462a      	mov	r2, r5
   d5e2c:	2100      	movs	r1, #0
   d5e2e:	4620      	mov	r0, r4
   d5e30:	f000 fc98 	bl	d6764 <memset>
        cid = -1;
   d5e34:	f04f 33ff 	mov.w	r3, #4294967295
   d5e38:	6063      	str	r3, [r4, #4]
   d5e3a:	4b04      	ldr	r3, [pc, #16]	; (d5e4c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5e3c:	8025      	strh	r5, [r4, #0]
   d5e3e:	2204      	movs	r2, #4
   d5e40:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5e42:	4a03      	ldr	r2, [pc, #12]	; (d5e50 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5e44:	601a      	str	r2, [r3, #0]
   d5e46:	bd38      	pop	{r3, r4, r5, pc}
   d5e48:	2003e3f0 	.word	0x2003e3f0
   d5e4c:	2003e3e8 	.word	0x2003e3e8
   d5e50:	000d6c54 	.word	0x000d6c54

000d5e54 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5e54:	4770      	bx	lr

000d5e56 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5e56:	7441      	strb	r1, [r0, #17]
   d5e58:	4770      	bx	lr

000d5e5a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5e5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5e5c:	7c00      	ldrb	r0, [r0, #16]
   d5e5e:	f7fe fdcf 	bl	d4a00 <HAL_USART_Available_Data_For_Write>
}
   d5e62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e66:	bd08      	pop	{r3, pc}

000d5e68 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5e68:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5e6a:	7c00      	ldrb	r0, [r0, #16]
   d5e6c:	f7fe fda0 	bl	d49b0 <HAL_USART_Available_Data>
}
   d5e70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5e74:	bd08      	pop	{r3, pc}

000d5e76 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5e76:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5e78:	7c00      	ldrb	r0, [r0, #16]
   d5e7a:	f7fe fda9 	bl	d49d0 <HAL_USART_Peek_Data>
}
   d5e7e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e82:	bf28      	it	cs
   d5e84:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e88:	bd08      	pop	{r3, pc}

000d5e8a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5e8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5e8c:	7c00      	ldrb	r0, [r0, #16]
   d5e8e:	f7fe fd97 	bl	d49c0 <HAL_USART_Read_Data>
}
   d5e92:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e96:	bf28      	it	cs
   d5e98:	f04f 30ff 	movcs.w	r0, #4294967295
   d5e9c:	bd08      	pop	{r3, pc}

000d5e9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5e9e:	7c00      	ldrb	r0, [r0, #16]
   d5ea0:	f7fe bd9e 	b.w	d49e0 <HAL_USART_Flush_Data>

000d5ea4 <_ZN11USARTSerialD0Ev>:
   d5ea4:	b510      	push	{r4, lr}
   d5ea6:	2114      	movs	r1, #20
   d5ea8:	4604      	mov	r4, r0
   d5eaa:	f000 fac2 	bl	d6432 <_ZdlPvj>
   d5eae:	4620      	mov	r0, r4
   d5eb0:	bd10      	pop	{r4, pc}

000d5eb2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5eb2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5eb4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5eb6:	4604      	mov	r4, r0
   d5eb8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5eba:	b925      	cbnz	r5, d5ec6 <_ZN11USARTSerial5writeEh+0x14>
   d5ebc:	7c00      	ldrb	r0, [r0, #16]
   d5ebe:	f7fe fd9f 	bl	d4a00 <HAL_USART_Available_Data_For_Write>
   d5ec2:	2800      	cmp	r0, #0
   d5ec4:	dd05      	ble.n	d5ed2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ec6:	4631      	mov	r1, r6
   d5ec8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ece:	f7fe bd67 	b.w	d49a0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5ed2:	4628      	mov	r0, r5
   d5ed4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5ed8:	b510      	push	{r4, lr}
   d5eda:	4604      	mov	r4, r0
   d5edc:	4608      	mov	r0, r1
   d5ede:	4611      	mov	r1, r2
   d5ee0:	2200      	movs	r2, #0
   d5ee2:	6062      	str	r2, [r4, #4]
   d5ee4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ee8:	60a2      	str	r2, [r4, #8]
   d5eea:	4a05      	ldr	r2, [pc, #20]	; (d5f00 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5eec:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5eee:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ef0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5ef2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5ef4:	461a      	mov	r2, r3
   d5ef6:	f7fe fd4b 	bl	d4990 <HAL_USART_Init>
}
   d5efa:	4620      	mov	r0, r4
   d5efc:	bd10      	pop	{r4, pc}
   d5efe:	bf00      	nop
   d5f00:	000d6c88 	.word	0x000d6c88

000d5f04 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5f04:	7c00      	ldrb	r0, [r0, #16]
   d5f06:	f7fe bd73 	b.w	d49f0 <HAL_USART_Is_Enabled>
	...

000d5f0c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5f0c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5f0e:	4d0c      	ldr	r5, [pc, #48]	; (d5f40 <_Z22__fetch_global_Serial1v+0x34>)
   d5f10:	6829      	ldr	r1, [r5, #0]
   d5f12:	f011 0401 	ands.w	r4, r1, #1
   d5f16:	d111      	bne.n	d5f3c <_Z22__fetch_global_Serial1v+0x30>
   d5f18:	4628      	mov	r0, r5
   d5f1a:	f7fe f8c2 	bl	d40a2 <__cxa_guard_acquire>
   d5f1e:	b168      	cbz	r0, d5f3c <_Z22__fetch_global_Serial1v+0x30>
   d5f20:	4a08      	ldr	r2, [pc, #32]	; (d5f44 <_Z22__fetch_global_Serial1v+0x38>)
   d5f22:	4b09      	ldr	r3, [pc, #36]	; (d5f48 <_Z22__fetch_global_Serial1v+0x3c>)
   d5f24:	4809      	ldr	r0, [pc, #36]	; (d5f4c <_Z22__fetch_global_Serial1v+0x40>)
   d5f26:	4621      	mov	r1, r4
   d5f28:	f7ff ffd6 	bl	d5ed8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5f2c:	4628      	mov	r0, r5
   d5f2e:	f7fe f8bd 	bl	d40ac <__cxa_guard_release>
   d5f32:	4a07      	ldr	r2, [pc, #28]	; (d5f50 <_Z22__fetch_global_Serial1v+0x44>)
   d5f34:	4907      	ldr	r1, [pc, #28]	; (d5f54 <_Z22__fetch_global_Serial1v+0x48>)
   d5f36:	4805      	ldr	r0, [pc, #20]	; (d5f4c <_Z22__fetch_global_Serial1v+0x40>)
   d5f38:	f000 fa76 	bl	d6428 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5f3c:	4803      	ldr	r0, [pc, #12]	; (d5f4c <_Z22__fetch_global_Serial1v+0x40>)
   d5f3e:	bd38      	pop	{r3, r4, r5, pc}
   d5f40:	2003e4b0 	.word	0x2003e4b0
   d5f44:	2003e4b4 	.word	0x2003e4b4
   d5f48:	2003e42c 	.word	0x2003e42c
   d5f4c:	2003e418 	.word	0x2003e418
   d5f50:	2003e26c 	.word	0x2003e26c
   d5f54:	000d5e55 	.word	0x000d5e55

000d5f58 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5f58:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5f5a:	6883      	ldr	r3, [r0, #8]
   d5f5c:	4604      	mov	r4, r0
   d5f5e:	b90b      	cbnz	r3, d5f64 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5f60:	f000 fa69 	bl	d6436 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5f64:	68c3      	ldr	r3, [r0, #12]
   d5f66:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5f68:	68a3      	ldr	r3, [r4, #8]
   d5f6a:	b11b      	cbz	r3, d5f74 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5f6c:	2203      	movs	r2, #3
   d5f6e:	4621      	mov	r1, r4
   d5f70:	4620      	mov	r0, r4
   d5f72:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5f74:	4620      	mov	r0, r4
   d5f76:	2110      	movs	r1, #16
}
   d5f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5f7c:	f000 ba59 	b.w	d6432 <_ZdlPvj>

000d5f80 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5f80:	4770      	bx	lr

000d5f82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f84:	4606      	mov	r6, r0
   d5f86:	4615      	mov	r5, r2
   d5f88:	460c      	mov	r4, r1
   d5f8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f8c:	42bc      	cmp	r4, r7
   d5f8e:	d006      	beq.n	d5f9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5f90:	6833      	ldr	r3, [r6, #0]
   d5f92:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5f96:	689b      	ldr	r3, [r3, #8]
   d5f98:	4630      	mov	r0, r6
   d5f9a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5f9c:	e7f6      	b.n	d5f8c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5f9e:	4628      	mov	r0, r5
   d5fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fa2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5fa2:	2200      	movs	r2, #0
   d5fa4:	7c00      	ldrb	r0, [r0, #16]
   d5fa6:	f7fe bd33 	b.w	d4a10 <HAL_I2C_Write_Data>

000d5faa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5faa:	2100      	movs	r1, #0
   d5fac:	7c00      	ldrb	r0, [r0, #16]
   d5fae:	f7fe bd37 	b.w	d4a20 <HAL_I2C_Available_Data>

000d5fb2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5fb2:	2100      	movs	r1, #0
   d5fb4:	7c00      	ldrb	r0, [r0, #16]
   d5fb6:	f7fe bd3b 	b.w	d4a30 <HAL_I2C_Read_Data>

000d5fba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5fba:	2100      	movs	r1, #0
   d5fbc:	7c00      	ldrb	r0, [r0, #16]
   d5fbe:	f7fe bd3f 	b.w	d4a40 <HAL_I2C_Peek_Data>

000d5fc2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5fc2:	2100      	movs	r1, #0
   d5fc4:	7c00      	ldrb	r0, [r0, #16]
   d5fc6:	f7fe bd43 	b.w	d4a50 <HAL_I2C_Flush_Data>

000d5fca <_ZN7TwoWireD0Ev>:
   d5fca:	b510      	push	{r4, lr}
   d5fcc:	2114      	movs	r1, #20
   d5fce:	4604      	mov	r4, r0
   d5fd0:	f000 fa2f 	bl	d6432 <_ZdlPvj>
   d5fd4:	4620      	mov	r0, r4
   d5fd6:	bd10      	pop	{r4, pc}

000d5fd8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5fd8:	b510      	push	{r4, lr}
   d5fda:	4604      	mov	r4, r0
   d5fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5fe0:	4608      	mov	r0, r1
   d5fe2:	60a3      	str	r3, [r4, #8]
   d5fe4:	2100      	movs	r1, #0
   d5fe6:	4b04      	ldr	r3, [pc, #16]	; (d5ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5fe8:	7420      	strb	r0, [r4, #16]
   d5fea:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5fec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5fee:	f7fe fd3f 	bl	d4a70 <HAL_I2C_Init>

}
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	bd10      	pop	{r4, pc}
   d5ff6:	bf00      	nop
   d5ff8:	000d6cb8 	.word	0x000d6cb8

000d5ffc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5ffc:	2100      	movs	r1, #0
   d5ffe:	7c00      	ldrb	r0, [r0, #16]
   d6000:	f7fe bd2e 	b.w	d4a60 <HAL_I2C_Is_Enabled>

000d6004 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6004:	2200      	movs	r2, #0
   d6006:	4611      	mov	r1, r2
   d6008:	6840      	ldr	r0, [r0, #4]
   d600a:	f7fe bdf5 	b.w	d4bf8 <network_listening>

000d600e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d600e:	2200      	movs	r2, #0
   d6010:	4611      	mov	r1, r2
   d6012:	6840      	ldr	r0, [r0, #4]
   d6014:	f7fe be00 	b.w	d4c18 <network_get_listen_timeout>

000d6018 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6018:	2200      	movs	r2, #0
   d601a:	6840      	ldr	r0, [r0, #4]
   d601c:	f7fe bdf4 	b.w	d4c08 <network_set_listen_timeout>

000d6020 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6020:	2200      	movs	r2, #0
   d6022:	f081 0101 	eor.w	r1, r1, #1
   d6026:	6840      	ldr	r0, [r0, #4]
   d6028:	f7fe bdde 	b.w	d4be8 <network_listen>

000d602c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d602c:	2300      	movs	r3, #0
   d602e:	461a      	mov	r2, r3
   d6030:	2101      	movs	r1, #1
   d6032:	6840      	ldr	r0, [r0, #4]
   d6034:	f7fe bdd0 	b.w	d4bd8 <network_off>

000d6038 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6038:	2300      	movs	r3, #0
   d603a:	461a      	mov	r2, r3
   d603c:	4619      	mov	r1, r3
   d603e:	6840      	ldr	r0, [r0, #4]
   d6040:	f7fe bdc2 	b.w	d4bc8 <network_on>

000d6044 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6044:	2200      	movs	r2, #0
   d6046:	4611      	mov	r1, r2
   d6048:	6840      	ldr	r0, [r0, #4]
   d604a:	f7fe bdb5 	b.w	d4bb8 <network_ready>

000d604e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d604e:	2200      	movs	r2, #0
   d6050:	4611      	mov	r1, r2
   d6052:	6840      	ldr	r0, [r0, #4]
   d6054:	f7fe bda0 	b.w	d4b98 <network_connecting>

000d6058 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6058:	2200      	movs	r2, #0
   d605a:	2102      	movs	r1, #2
   d605c:	6840      	ldr	r0, [r0, #4]
   d605e:	f7fe bda3 	b.w	d4ba8 <network_disconnect>

000d6062 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6062:	2300      	movs	r3, #0
   d6064:	461a      	mov	r2, r3
   d6066:	6840      	ldr	r0, [r0, #4]
   d6068:	f7fe bd8e 	b.w	d4b88 <network_connect>

000d606c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d606c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d606e:	4605      	mov	r5, r0
   d6070:	b188      	cbz	r0, d6096 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6072:	6804      	ldr	r4, [r0, #0]
   d6074:	b14c      	cbz	r4, d608a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6076:	68a3      	ldr	r3, [r4, #8]
   d6078:	b11b      	cbz	r3, d6082 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d607a:	2203      	movs	r2, #3
   d607c:	4621      	mov	r1, r4
   d607e:	4620      	mov	r0, r4
   d6080:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6082:	2110      	movs	r1, #16
   d6084:	4620      	mov	r0, r4
   d6086:	f000 f9d4 	bl	d6432 <_ZdlPvj>
   d608a:	4628      	mov	r0, r5
   d608c:	2114      	movs	r1, #20
      }
   d608e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6092:	f000 b9ce 	b.w	d6432 <_ZdlPvj>
   d6096:	bd38      	pop	{r3, r4, r5, pc}

000d6098 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6098:	b110      	cbz	r0, d60a0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d609a:	6803      	ldr	r3, [r0, #0]
   d609c:	685b      	ldr	r3, [r3, #4]
   d609e:	4718      	bx	r3
   d60a0:	4770      	bx	lr

000d60a2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d60a2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d60a4:	6803      	ldr	r3, [r0, #0]
   d60a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d60a8:	b1bb      	cbz	r3, d60da <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d60aa:	6858      	ldr	r0, [r3, #4]
   d60ac:	f7fe fc40 	bl	d4930 <os_thread_is_current>
   d60b0:	b978      	cbnz	r0, d60d2 <_ZN6ThreadD1Ev+0x30>
   d60b2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d60b4:	7c5a      	ldrb	r2, [r3, #17]
   d60b6:	b912      	cbnz	r2, d60be <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d60b8:	6858      	ldr	r0, [r3, #4]
   d60ba:	f7fe fc41 	bl	d4940 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d60be:	6823      	ldr	r3, [r4, #0]
   d60c0:	6858      	ldr	r0, [r3, #4]
   d60c2:	f7fe fc45 	bl	d4950 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d60c6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d60c8:	2300      	movs	r3, #0
   d60ca:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d60cc:	b128      	cbz	r0, d60da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d60ce:	f7ff ffcd 	bl	d606c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60d2:	6820      	ldr	r0, [r4, #0]
   d60d4:	b108      	cbz	r0, d60da <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d60d6:	f7ff ffc9 	bl	d606c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d60da:	4620      	mov	r0, r4
   d60dc:	bd10      	pop	{r4, pc}
	...

000d60e0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d60e0:	b538      	push	{r3, r4, r5, lr}
   d60e2:	4b0c      	ldr	r3, [pc, #48]	; (d6114 <_ZN5spark9MeshClassD1Ev+0x34>)
   d60e4:	6003      	str	r3, [r0, #0]
   d60e6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60e8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d60ec:	b108      	cbz	r0, d60f2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d60ee:	f7fd ffd6 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60f2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d60f6:	b135      	cbz	r5, d6106 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d60f8:	4628      	mov	r0, r5
   d60fa:	f7ff ffd2 	bl	d60a2 <_ZN6ThreadD1Ev>
   d60fe:	2104      	movs	r1, #4
   d6100:	4628      	mov	r0, r5
   d6102:	f000 f996 	bl	d6432 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6106:	68a0      	ldr	r0, [r4, #8]
   d6108:	b108      	cbz	r0, d610e <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d610a:	f7ff ffc5 	bl	d6098 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d610e:	4620      	mov	r0, r4
   d6110:	bd38      	pop	{r3, r4, r5, pc}
   d6112:	bf00      	nop
   d6114:	000d6ce0 	.word	0x000d6ce0

000d6118 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6118:	b538      	push	{r3, r4, r5, lr}
   d611a:	4c0e      	ldr	r4, [pc, #56]	; (d6154 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d611c:	4b0e      	ldr	r3, [pc, #56]	; (d6158 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d611e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6120:	2500      	movs	r5, #0
   d6122:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6124:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6128:	6063      	str	r3, [r4, #4]
   d612a:	60a5      	str	r5, [r4, #8]
   d612c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6130:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6134:	f7fe fc1c 	bl	d4970 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6138:	4b08      	ldr	r3, [pc, #32]	; (d615c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d613a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d613e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6142:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6144:	4620      	mov	r0, r4
   d6146:	4a06      	ldr	r2, [pc, #24]	; (d6160 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6148:	4906      	ldr	r1, [pc, #24]	; (d6164 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d614a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d614e:	f000 b96b 	b.w	d6428 <__aeabi_atexit>
   d6152:	bf00      	nop
   d6154:	2003e538 	.word	0x2003e538
   d6158:	000d6d14 	.word	0x000d6d14
   d615c:	000d6ce0 	.word	0x000d6ce0
   d6160:	2003e26c 	.word	0x2003e26c
   d6164:	000d60e1 	.word	0x000d60e1

000d6168 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6168:	2300      	movs	r3, #0
   d616a:	461a      	mov	r2, r3
   d616c:	6840      	ldr	r0, [r0, #4]
   d616e:	f7fe bd0b 	b.w	d4b88 <network_connect>

000d6172 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6172:	2200      	movs	r2, #0
   d6174:	2102      	movs	r1, #2
   d6176:	6840      	ldr	r0, [r0, #4]
   d6178:	f7fe bd16 	b.w	d4ba8 <network_disconnect>

000d617c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d617c:	2200      	movs	r2, #0
   d617e:	4611      	mov	r1, r2
   d6180:	6840      	ldr	r0, [r0, #4]
   d6182:	f7fe bd09 	b.w	d4b98 <network_connecting>

000d6186 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6186:	2200      	movs	r2, #0
   d6188:	4611      	mov	r1, r2
   d618a:	6840      	ldr	r0, [r0, #4]
   d618c:	f7fe bd14 	b.w	d4bb8 <network_ready>

000d6190 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6190:	2300      	movs	r3, #0
   d6192:	461a      	mov	r2, r3
   d6194:	4619      	mov	r1, r3
   d6196:	6840      	ldr	r0, [r0, #4]
   d6198:	f7fe bd16 	b.w	d4bc8 <network_on>

000d619c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d619c:	2300      	movs	r3, #0
   d619e:	461a      	mov	r2, r3
   d61a0:	4619      	mov	r1, r3
   d61a2:	6840      	ldr	r0, [r0, #4]
   d61a4:	f7fe bd18 	b.w	d4bd8 <network_off>

000d61a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d61a8:	2200      	movs	r2, #0
   d61aa:	f081 0101 	eor.w	r1, r1, #1
   d61ae:	6840      	ldr	r0, [r0, #4]
   d61b0:	f7fe bd1a 	b.w	d4be8 <network_listen>

000d61b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d61b4:	2200      	movs	r2, #0
   d61b6:	6840      	ldr	r0, [r0, #4]
   d61b8:	f7fe bd26 	b.w	d4c08 <network_set_listen_timeout>

000d61bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d61bc:	2200      	movs	r2, #0
   d61be:	4611      	mov	r1, r2
   d61c0:	6840      	ldr	r0, [r0, #4]
   d61c2:	f7fe bd29 	b.w	d4c18 <network_get_listen_timeout>

000d61c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d61c6:	2200      	movs	r2, #0
   d61c8:	4611      	mov	r1, r2
   d61ca:	6840      	ldr	r0, [r0, #4]
   d61cc:	f7fe bd14 	b.w	d4bf8 <network_listening>

000d61d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d61d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61d4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d61d6:	b095      	sub	sp, #84	; 0x54
   d61d8:	4616      	mov	r6, r2
   d61da:	460d      	mov	r5, r1
   d61dc:	4607      	mov	r7, r0
    IPAddress addr;
   d61de:	f7ff fd2d 	bl	d5c3c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d61e2:	4621      	mov	r1, r4
   d61e4:	2220      	movs	r2, #32
   d61e6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d61e8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d61ea:	f000 fabb 	bl	d6764 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d61ee:	2340      	movs	r3, #64	; 0x40
   d61f0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d61f2:	4621      	mov	r1, r4
   d61f4:	466b      	mov	r3, sp
   d61f6:	aa0c      	add	r2, sp, #48	; 0x30
   d61f8:	4630      	mov	r0, r6
   d61fa:	f7fe fb39 	bl	d4870 <netdb_getaddrinfo>
    if (!r) {
   d61fe:	4604      	mov	r4, r0
   d6200:	2800      	cmp	r0, #0
   d6202:	d144      	bne.n	d628e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6204:	4602      	mov	r2, r0
   d6206:	2101      	movs	r1, #1
   d6208:	6868      	ldr	r0, [r5, #4]
   d620a:	f7fe fcd5 	bl	d4bb8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d620e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6210:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6212:	4622      	mov	r2, r4
   d6214:	6868      	ldr	r0, [r5, #4]
   d6216:	f7fe fccf 	bl	d4bb8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d621a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d621c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d621e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6220:	2e00      	cmp	r6, #0
   d6222:	d034      	beq.n	d628e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6224:	2900      	cmp	r1, #0
   d6226:	d132      	bne.n	d628e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6228:	6873      	ldr	r3, [r6, #4]
   d622a:	2b02      	cmp	r3, #2
   d622c:	d002      	beq.n	d6234 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d622e:	2b0a      	cmp	r3, #10
   d6230:	d009      	beq.n	d6246 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6232:	e02a      	b.n	d628a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6234:	f1b8 0f00 	cmp.w	r8, #0
   d6238:	d027      	beq.n	d628a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d623a:	6971      	ldr	r1, [r6, #20]
   d623c:	4638      	mov	r0, r7
   d623e:	3104      	adds	r1, #4
   d6240:	f7ff fd29 	bl	d5c96 <_ZN9IPAddressaSEPKh>
   d6244:	e020      	b.n	d6288 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6246:	f1b9 0f00 	cmp.w	r9, #0
   d624a:	d01e      	beq.n	d628a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d624c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d624e:	2211      	movs	r2, #17
   d6250:	a801      	add	r0, sp, #4
   d6252:	f000 fa87 	bl	d6764 <memset>
                    a.v = 6;
   d6256:	2306      	movs	r3, #6
   d6258:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d625c:	ad01      	add	r5, sp, #4
   d625e:	f104 0308 	add.w	r3, r4, #8
   d6262:	3418      	adds	r4, #24
   d6264:	6818      	ldr	r0, [r3, #0]
   d6266:	6859      	ldr	r1, [r3, #4]
   d6268:	462a      	mov	r2, r5
   d626a:	c203      	stmia	r2!, {r0, r1}
   d626c:	3308      	adds	r3, #8
   d626e:	42a3      	cmp	r3, r4
   d6270:	4615      	mov	r5, r2
   d6272:	d1f7      	bne.n	d6264 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6274:	a901      	add	r1, sp, #4
   d6276:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6278:	ad07      	add	r5, sp, #28
   d627a:	f7ff fced 	bl	d5c58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d627e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6280:	1d3c      	adds	r4, r7, #4
   d6282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6284:	682b      	ldr	r3, [r5, #0]
   d6286:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6288:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d628a:	69f6      	ldr	r6, [r6, #28]
   d628c:	e7c8      	b.n	d6220 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d628e:	9800      	ldr	r0, [sp, #0]
   d6290:	f7fe fae6 	bl	d4860 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6294:	4638      	mov	r0, r7
   d6296:	b015      	add	sp, #84	; 0x54
   d6298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d629c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d629c:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d629e:	4a03      	ldr	r2, [pc, #12]	; (d62ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d62a0:	601a      	str	r2, [r3, #0]
   d62a2:	2200      	movs	r2, #0
   d62a4:	605a      	str	r2, [r3, #4]
   d62a6:	4770      	bx	lr
   d62a8:	2003e70c 	.word	0x2003e70c
   d62ac:	000d6d14 	.word	0x000d6d14

000d62b0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <spark_protocol_instance+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	681b      	ldr	r3, [r3, #0]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	0003025c 	.word	0x0003025c

000d62c0 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <spark_protocol_set_product_id+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	685b      	ldr	r3, [r3, #4]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	0003025c 	.word	0x0003025c

000d62d0 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <spark_protocol_set_product_firmware_version+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	689b      	ldr	r3, [r3, #8]
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	0003025c 	.word	0x0003025c

000d62e0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d62e0:	b510      	push	{r4, lr}
   d62e2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d62e4:	480f      	ldr	r0, [pc, #60]	; (d6324 <pinAvailable+0x44>)
   d62e6:	f7fe fd71 	bl	d4dcc <_ZN8SPIClass9isEnabledEv>
   d62ea:	b128      	cbz	r0, d62f8 <pinAvailable+0x18>
   d62ec:	f1a4 030b 	sub.w	r3, r4, #11
   d62f0:	2b02      	cmp	r3, #2
   d62f2:	d801      	bhi.n	d62f8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d62f4:	2000      	movs	r0, #0
   d62f6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d62f8:	f000 f876 	bl	d63e8 <_Z19__fetch_global_Wirev>
   d62fc:	f7ff fe7e 	bl	d5ffc <_ZN7TwoWire9isEnabledEv>
   d6300:	b108      	cbz	r0, d6306 <pinAvailable+0x26>
   d6302:	2c01      	cmp	r4, #1
   d6304:	d9f6      	bls.n	d62f4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6306:	f7ff fe01 	bl	d5f0c <_Z22__fetch_global_Serial1v>
   d630a:	f7ff fdfb 	bl	d5f04 <_ZN11USARTSerial9isEnabledEv>
   d630e:	b118      	cbz	r0, d6318 <pinAvailable+0x38>
   d6310:	f1a4 0309 	sub.w	r3, r4, #9
   d6314:	2b01      	cmp	r3, #1
   d6316:	d9ed      	bls.n	d62f4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6318:	2c23      	cmp	r4, #35	; 0x23
   d631a:	bf8c      	ite	hi
   d631c:	2000      	movhi	r0, #0
   d631e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6320:	bd10      	pop	{r4, pc}
   d6322:	bf00      	nop
   d6324:	2003e714 	.word	0x2003e714

000d6328 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6328:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d632a:	b538      	push	{r3, r4, r5, lr}
   d632c:	4604      	mov	r4, r0
   d632e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6330:	d80a      	bhi.n	d6348 <pinMode+0x20>
   d6332:	29ff      	cmp	r1, #255	; 0xff
   d6334:	d008      	beq.n	d6348 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6336:	f7ff ffd3 	bl	d62e0 <pinAvailable>
   d633a:	b128      	cbz	r0, d6348 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d633c:	4629      	mov	r1, r5
   d633e:	4620      	mov	r0, r4
}
   d6340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6344:	f7fe baa4 	b.w	d4890 <HAL_Pin_Mode>
   d6348:	bd38      	pop	{r3, r4, r5, pc}

000d634a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d634a:	b538      	push	{r3, r4, r5, lr}
   d634c:	4604      	mov	r4, r0
   d634e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6350:	f7fe faa6 	bl	d48a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6354:	28ff      	cmp	r0, #255	; 0xff
   d6356:	d010      	beq.n	d637a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6358:	2806      	cmp	r0, #6
   d635a:	d804      	bhi.n	d6366 <digitalWrite+0x1c>
   d635c:	234d      	movs	r3, #77	; 0x4d
   d635e:	fa23 f000 	lsr.w	r0, r3, r0
   d6362:	07c3      	lsls	r3, r0, #31
   d6364:	d409      	bmi.n	d637a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6366:	4620      	mov	r0, r4
   d6368:	f7ff ffba 	bl	d62e0 <pinAvailable>
   d636c:	b128      	cbz	r0, d637a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d636e:	4629      	mov	r1, r5
   d6370:	4620      	mov	r0, r4
}
   d6372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6376:	f7fe ba9b 	b.w	d48b0 <HAL_GPIO_Write>
   d637a:	bd38      	pop	{r3, r4, r5, pc}

000d637c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d637c:	b510      	push	{r4, lr}
   d637e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6380:	f7fe fa8e 	bl	d48a0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6384:	3804      	subs	r0, #4
   d6386:	b2c0      	uxtb	r0, r0
   d6388:	2801      	cmp	r0, #1
   d638a:	d908      	bls.n	d639e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d638c:	4620      	mov	r0, r4
   d638e:	f7ff ffa7 	bl	d62e0 <pinAvailable>
   d6392:	b120      	cbz	r0, d639e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6394:	4620      	mov	r0, r4
}
   d6396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d639a:	f7fe ba91 	b.w	d48c0 <HAL_GPIO_Read>
}
   d639e:	2000      	movs	r0, #0
   d63a0:	bd10      	pop	{r4, pc}
	...

000d63a4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d63a4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d63a6:	4c0c      	ldr	r4, [pc, #48]	; (d63d8 <_GLOBAL__sub_I_SPI+0x34>)
   d63a8:	4e0c      	ldr	r6, [pc, #48]	; (d63dc <_GLOBAL__sub_I_SPI+0x38>)
   d63aa:	4d0d      	ldr	r5, [pc, #52]	; (d63e0 <_GLOBAL__sub_I_SPI+0x3c>)
   d63ac:	2100      	movs	r1, #0
   d63ae:	4620      	mov	r0, r4
   d63b0:	f7fe fcf8 	bl	d4da4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d63b4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d63b6:	4c0b      	ldr	r4, [pc, #44]	; (d63e4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d63b8:	4632      	mov	r2, r6
   d63ba:	4629      	mov	r1, r5
   d63bc:	f000 f834 	bl	d6428 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d63c0:	2101      	movs	r1, #1
   d63c2:	4620      	mov	r0, r4
   d63c4:	f7fe fcee 	bl	d4da4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d63c8:	4632      	mov	r2, r6
   d63ca:	4629      	mov	r1, r5
   d63cc:	4620      	mov	r0, r4
   d63ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d63d2:	f000 b829 	b.w	d6428 <__aeabi_atexit>
   d63d6:	bf00      	nop
   d63d8:	2003e714 	.word	0x2003e714
   d63dc:	2003e26c 	.word	0x2003e26c
   d63e0:	000d4d95 	.word	0x000d4d95
   d63e4:	2003e724 	.word	0x2003e724

000d63e8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d63e8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d63ea:	4d0b      	ldr	r5, [pc, #44]	; (d6418 <_Z19__fetch_global_Wirev+0x30>)
   d63ec:	6829      	ldr	r1, [r5, #0]
   d63ee:	f011 0401 	ands.w	r4, r1, #1
   d63f2:	d10f      	bne.n	d6414 <_Z19__fetch_global_Wirev+0x2c>
   d63f4:	4628      	mov	r0, r5
   d63f6:	f7fd fe54 	bl	d40a2 <__cxa_guard_acquire>
   d63fa:	b158      	cbz	r0, d6414 <_Z19__fetch_global_Wirev+0x2c>
   d63fc:	4621      	mov	r1, r4
   d63fe:	4807      	ldr	r0, [pc, #28]	; (d641c <_Z19__fetch_global_Wirev+0x34>)
   d6400:	f7ff fdea 	bl	d5fd8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6404:	4628      	mov	r0, r5
   d6406:	f7fd fe51 	bl	d40ac <__cxa_guard_release>
   d640a:	4a05      	ldr	r2, [pc, #20]	; (d6420 <_Z19__fetch_global_Wirev+0x38>)
   d640c:	4905      	ldr	r1, [pc, #20]	; (d6424 <_Z19__fetch_global_Wirev+0x3c>)
   d640e:	4803      	ldr	r0, [pc, #12]	; (d641c <_Z19__fetch_global_Wirev+0x34>)
   d6410:	f000 f80a 	bl	d6428 <__aeabi_atexit>
	return wire;
}
   d6414:	4801      	ldr	r0, [pc, #4]	; (d641c <_Z19__fetch_global_Wirev+0x34>)
   d6416:	bd38      	pop	{r3, r4, r5, pc}
   d6418:	2003e738 	.word	0x2003e738
   d641c:	2003e73c 	.word	0x2003e73c
   d6420:	2003e26c 	.word	0x2003e26c
   d6424:	000d5f81 	.word	0x000d5f81

000d6428 <__aeabi_atexit>:
   d6428:	460b      	mov	r3, r1
   d642a:	4601      	mov	r1, r0
   d642c:	4618      	mov	r0, r3
   d642e:	f000 b951 	b.w	d66d4 <__cxa_atexit>

000d6432 <_ZdlPvj>:
   d6432:	f7fd be32 	b.w	d409a <_ZdlPv>

000d6436 <_ZSt25__throw_bad_function_callv>:
   d6436:	b508      	push	{r3, lr}
   d6438:	f7fe fc5e 	bl	d4cf8 <abort>

000d643c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d643c:	4b18      	ldr	r3, [pc, #96]	; (d64a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d643e:	681a      	ldr	r2, [r3, #0]
   d6440:	07d1      	lsls	r1, r2, #31
   d6442:	bf5c      	itt	pl
   d6444:	2201      	movpl	r2, #1
   d6446:	601a      	strpl	r2, [r3, #0]
   d6448:	4b16      	ldr	r3, [pc, #88]	; (d64a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d2      	lsls	r2, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4b14      	ldr	r3, [pc, #80]	; (d64a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6456:	681a      	ldr	r2, [r3, #0]
   d6458:	07d0      	lsls	r0, r2, #31
   d645a:	bf5c      	itt	pl
   d645c:	2201      	movpl	r2, #1
   d645e:	601a      	strpl	r2, [r3, #0]
   d6460:	4b12      	ldr	r3, [pc, #72]	; (d64ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6462:	681a      	ldr	r2, [r3, #0]
   d6464:	07d1      	lsls	r1, r2, #31
   d6466:	bf5c      	itt	pl
   d6468:	2201      	movpl	r2, #1
   d646a:	601a      	strpl	r2, [r3, #0]
   d646c:	4b10      	ldr	r3, [pc, #64]	; (d64b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d646e:	681a      	ldr	r2, [r3, #0]
   d6470:	07d2      	lsls	r2, r2, #31
   d6472:	bf5c      	itt	pl
   d6474:	2201      	movpl	r2, #1
   d6476:	601a      	strpl	r2, [r3, #0]
   d6478:	4b0e      	ldr	r3, [pc, #56]	; (d64b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d647a:	681a      	ldr	r2, [r3, #0]
   d647c:	07d0      	lsls	r0, r2, #31
   d647e:	bf5c      	itt	pl
   d6480:	2201      	movpl	r2, #1
   d6482:	601a      	strpl	r2, [r3, #0]
   d6484:	4b0c      	ldr	r3, [pc, #48]	; (d64b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6486:	681a      	ldr	r2, [r3, #0]
   d6488:	07d1      	lsls	r1, r2, #31
   d648a:	bf5c      	itt	pl
   d648c:	2201      	movpl	r2, #1
   d648e:	601a      	strpl	r2, [r3, #0]
   d6490:	4b0a      	ldr	r3, [pc, #40]	; (d64bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	07d2      	lsls	r2, r2, #31
   d6496:	bf5c      	itt	pl
   d6498:	2201      	movpl	r2, #1
   d649a:	601a      	strpl	r2, [r3, #0]
   d649c:	4770      	bx	lr
   d649e:	bf00      	nop
   d64a0:	2003e76c 	.word	0x2003e76c
   d64a4:	2003e768 	.word	0x2003e768
   d64a8:	2003e764 	.word	0x2003e764
   d64ac:	2003e760 	.word	0x2003e760
   d64b0:	2003e75c 	.word	0x2003e75c
   d64b4:	2003e758 	.word	0x2003e758
   d64b8:	2003e754 	.word	0x2003e754
   d64bc:	2003e750 	.word	0x2003e750

000d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d64c0:	4b24      	ldr	r3, [pc, #144]	; (d6554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d0      	lsls	r0, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b22      	ldr	r3, [pc, #136]	; (d6558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d1      	lsls	r1, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b20      	ldr	r3, [pc, #128]	; (d655c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d2      	lsls	r2, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b1e      	ldr	r3, [pc, #120]	; (d6560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d0      	lsls	r0, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b1c      	ldr	r3, [pc, #112]	; (d6564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d1      	lsls	r1, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b1a      	ldr	r3, [pc, #104]	; (d6568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d2      	lsls	r2, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b18      	ldr	r3, [pc, #96]	; (d656c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d0      	lsls	r0, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b16      	ldr	r3, [pc, #88]	; (d6570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d1      	lsls	r1, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4b14      	ldr	r3, [pc, #80]	; (d6574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6522:	681a      	ldr	r2, [r3, #0]
   d6524:	07d2      	lsls	r2, r2, #31
   d6526:	bf5c      	itt	pl
   d6528:	2201      	movpl	r2, #1
   d652a:	601a      	strpl	r2, [r3, #0]
   d652c:	4b12      	ldr	r3, [pc, #72]	; (d6578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d652e:	681a      	ldr	r2, [r3, #0]
   d6530:	07d0      	lsls	r0, r2, #31
   d6532:	bf5c      	itt	pl
   d6534:	2201      	movpl	r2, #1
   d6536:	601a      	strpl	r2, [r3, #0]
   d6538:	4b10      	ldr	r3, [pc, #64]	; (d657c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d653a:	681a      	ldr	r2, [r3, #0]
   d653c:	07d1      	lsls	r1, r2, #31
   d653e:	bf5c      	itt	pl
   d6540:	2201      	movpl	r2, #1
   d6542:	601a      	strpl	r2, [r3, #0]
   d6544:	4b0e      	ldr	r3, [pc, #56]	; (d6580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6546:	681a      	ldr	r2, [r3, #0]
   d6548:	07d2      	lsls	r2, r2, #31
   d654a:	bf5c      	itt	pl
   d654c:	2201      	movpl	r2, #1
   d654e:	601a      	strpl	r2, [r3, #0]
   d6550:	4770      	bx	lr
   d6552:	bf00      	nop
   d6554:	2003e79c 	.word	0x2003e79c
   d6558:	2003e798 	.word	0x2003e798
   d655c:	2003e794 	.word	0x2003e794
   d6560:	2003e790 	.word	0x2003e790
   d6564:	2003e78c 	.word	0x2003e78c
   d6568:	2003e788 	.word	0x2003e788
   d656c:	2003e784 	.word	0x2003e784
   d6570:	2003e780 	.word	0x2003e780
   d6574:	2003e77c 	.word	0x2003e77c
   d6578:	2003e778 	.word	0x2003e778
   d657c:	2003e774 	.word	0x2003e774
   d6580:	2003e770 	.word	0x2003e770

000d6584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6584:	4b24      	ldr	r3, [pc, #144]	; (d6618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d0      	lsls	r0, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b22      	ldr	r3, [pc, #136]	; (d661c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d1      	lsls	r1, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4b20      	ldr	r3, [pc, #128]	; (d6620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d659e:	681a      	ldr	r2, [r3, #0]
   d65a0:	07d2      	lsls	r2, r2, #31
   d65a2:	bf5c      	itt	pl
   d65a4:	2201      	movpl	r2, #1
   d65a6:	601a      	strpl	r2, [r3, #0]
   d65a8:	4b1e      	ldr	r3, [pc, #120]	; (d6624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d65aa:	681a      	ldr	r2, [r3, #0]
   d65ac:	07d0      	lsls	r0, r2, #31
   d65ae:	bf5c      	itt	pl
   d65b0:	2201      	movpl	r2, #1
   d65b2:	601a      	strpl	r2, [r3, #0]
   d65b4:	4b1c      	ldr	r3, [pc, #112]	; (d6628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d65b6:	681a      	ldr	r2, [r3, #0]
   d65b8:	07d1      	lsls	r1, r2, #31
   d65ba:	bf5c      	itt	pl
   d65bc:	2201      	movpl	r2, #1
   d65be:	601a      	strpl	r2, [r3, #0]
   d65c0:	4b1a      	ldr	r3, [pc, #104]	; (d662c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d65c2:	681a      	ldr	r2, [r3, #0]
   d65c4:	07d2      	lsls	r2, r2, #31
   d65c6:	bf5c      	itt	pl
   d65c8:	2201      	movpl	r2, #1
   d65ca:	601a      	strpl	r2, [r3, #0]
   d65cc:	4b18      	ldr	r3, [pc, #96]	; (d6630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d65ce:	681a      	ldr	r2, [r3, #0]
   d65d0:	07d0      	lsls	r0, r2, #31
   d65d2:	bf5c      	itt	pl
   d65d4:	2201      	movpl	r2, #1
   d65d6:	601a      	strpl	r2, [r3, #0]
   d65d8:	4b16      	ldr	r3, [pc, #88]	; (d6634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d65da:	681a      	ldr	r2, [r3, #0]
   d65dc:	07d1      	lsls	r1, r2, #31
   d65de:	bf5c      	itt	pl
   d65e0:	2201      	movpl	r2, #1
   d65e2:	601a      	strpl	r2, [r3, #0]
   d65e4:	4b14      	ldr	r3, [pc, #80]	; (d6638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d65e6:	681a      	ldr	r2, [r3, #0]
   d65e8:	07d2      	lsls	r2, r2, #31
   d65ea:	bf5c      	itt	pl
   d65ec:	2201      	movpl	r2, #1
   d65ee:	601a      	strpl	r2, [r3, #0]
   d65f0:	4b12      	ldr	r3, [pc, #72]	; (d663c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d65f2:	681a      	ldr	r2, [r3, #0]
   d65f4:	07d0      	lsls	r0, r2, #31
   d65f6:	bf5c      	itt	pl
   d65f8:	2201      	movpl	r2, #1
   d65fa:	601a      	strpl	r2, [r3, #0]
   d65fc:	4b10      	ldr	r3, [pc, #64]	; (d6640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d65fe:	681a      	ldr	r2, [r3, #0]
   d6600:	07d1      	lsls	r1, r2, #31
   d6602:	bf5c      	itt	pl
   d6604:	2201      	movpl	r2, #1
   d6606:	601a      	strpl	r2, [r3, #0]
   d6608:	4b0e      	ldr	r3, [pc, #56]	; (d6644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d2      	lsls	r2, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4770      	bx	lr
   d6616:	bf00      	nop
   d6618:	2003e7cc 	.word	0x2003e7cc
   d661c:	2003e7c8 	.word	0x2003e7c8
   d6620:	2003e7c4 	.word	0x2003e7c4
   d6624:	2003e7c0 	.word	0x2003e7c0
   d6628:	2003e7bc 	.word	0x2003e7bc
   d662c:	2003e7b8 	.word	0x2003e7b8
   d6630:	2003e7b4 	.word	0x2003e7b4
   d6634:	2003e7b0 	.word	0x2003e7b0
   d6638:	2003e7ac 	.word	0x2003e7ac
   d663c:	2003e7a8 	.word	0x2003e7a8
   d6640:	2003e7a4 	.word	0x2003e7a4
   d6644:	2003e7a0 	.word	0x2003e7a0

000d6648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6648:	4b18      	ldr	r3, [pc, #96]	; (d66ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d664a:	681a      	ldr	r2, [r3, #0]
   d664c:	07d1      	lsls	r1, r2, #31
   d664e:	bf5c      	itt	pl
   d6650:	2201      	movpl	r2, #1
   d6652:	601a      	strpl	r2, [r3, #0]
   d6654:	4b16      	ldr	r3, [pc, #88]	; (d66b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6656:	681a      	ldr	r2, [r3, #0]
   d6658:	07d2      	lsls	r2, r2, #31
   d665a:	bf5c      	itt	pl
   d665c:	2201      	movpl	r2, #1
   d665e:	601a      	strpl	r2, [r3, #0]
   d6660:	4b14      	ldr	r3, [pc, #80]	; (d66b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6662:	681a      	ldr	r2, [r3, #0]
   d6664:	07d0      	lsls	r0, r2, #31
   d6666:	bf5c      	itt	pl
   d6668:	2201      	movpl	r2, #1
   d666a:	601a      	strpl	r2, [r3, #0]
   d666c:	4b12      	ldr	r3, [pc, #72]	; (d66b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d666e:	681a      	ldr	r2, [r3, #0]
   d6670:	07d1      	lsls	r1, r2, #31
   d6672:	bf5c      	itt	pl
   d6674:	2201      	movpl	r2, #1
   d6676:	601a      	strpl	r2, [r3, #0]
   d6678:	4b10      	ldr	r3, [pc, #64]	; (d66bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d667a:	681a      	ldr	r2, [r3, #0]
   d667c:	07d2      	lsls	r2, r2, #31
   d667e:	bf5c      	itt	pl
   d6680:	2201      	movpl	r2, #1
   d6682:	601a      	strpl	r2, [r3, #0]
   d6684:	4b0e      	ldr	r3, [pc, #56]	; (d66c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6686:	681a      	ldr	r2, [r3, #0]
   d6688:	07d0      	lsls	r0, r2, #31
   d668a:	bf5c      	itt	pl
   d668c:	2201      	movpl	r2, #1
   d668e:	601a      	strpl	r2, [r3, #0]
   d6690:	4b0c      	ldr	r3, [pc, #48]	; (d66c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6692:	681a      	ldr	r2, [r3, #0]
   d6694:	07d1      	lsls	r1, r2, #31
   d6696:	bf5c      	itt	pl
   d6698:	2201      	movpl	r2, #1
   d669a:	601a      	strpl	r2, [r3, #0]
   d669c:	4b0a      	ldr	r3, [pc, #40]	; (d66c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d669e:	681a      	ldr	r2, [r3, #0]
   d66a0:	07d2      	lsls	r2, r2, #31
   d66a2:	bf5c      	itt	pl
   d66a4:	2201      	movpl	r2, #1
   d66a6:	601a      	strpl	r2, [r3, #0]
   d66a8:	4770      	bx	lr
   d66aa:	bf00      	nop
   d66ac:	2003e7ec 	.word	0x2003e7ec
   d66b0:	2003e7e8 	.word	0x2003e7e8
   d66b4:	2003e7e4 	.word	0x2003e7e4
   d66b8:	2003e7e0 	.word	0x2003e7e0
   d66bc:	2003e7dc 	.word	0x2003e7dc
   d66c0:	2003e7d8 	.word	0x2003e7d8
   d66c4:	2003e7d4 	.word	0x2003e7d4
   d66c8:	2003e7d0 	.word	0x2003e7d0

000d66cc <atol>:
   d66cc:	220a      	movs	r2, #10
   d66ce:	2100      	movs	r1, #0
   d66d0:	f000 b95e 	b.w	d6990 <strtol>

000d66d4 <__cxa_atexit>:
   d66d4:	b510      	push	{r4, lr}
   d66d6:	4c05      	ldr	r4, [pc, #20]	; (d66ec <__cxa_atexit+0x18>)
   d66d8:	4613      	mov	r3, r2
   d66da:	b12c      	cbz	r4, d66e8 <__cxa_atexit+0x14>
   d66dc:	460a      	mov	r2, r1
   d66de:	4601      	mov	r1, r0
   d66e0:	2002      	movs	r0, #2
   d66e2:	f3af 8000 	nop.w
   d66e6:	bd10      	pop	{r4, pc}
   d66e8:	4620      	mov	r0, r4
   d66ea:	bd10      	pop	{r4, pc}
   d66ec:	00000000 	.word	0x00000000

000d66f0 <ldiv>:
   d66f0:	2900      	cmp	r1, #0
   d66f2:	b510      	push	{r4, lr}
   d66f4:	fb91 f4f2 	sdiv	r4, r1, r2
   d66f8:	fb02 1314 	mls	r3, r2, r4, r1
   d66fc:	db04      	blt.n	d6708 <ldiv+0x18>
   d66fe:	2b00      	cmp	r3, #0
   d6700:	da07      	bge.n	d6712 <ldiv+0x22>
   d6702:	3401      	adds	r4, #1
   d6704:	1a9b      	subs	r3, r3, r2
   d6706:	e004      	b.n	d6712 <ldiv+0x22>
   d6708:	2b00      	cmp	r3, #0
   d670a:	bfc4      	itt	gt
   d670c:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d6710:	189b      	addgt	r3, r3, r2
   d6712:	6004      	str	r4, [r0, #0]
   d6714:	6043      	str	r3, [r0, #4]
   d6716:	bd10      	pop	{r4, pc}

000d6718 <memcpy>:
   d6718:	b510      	push	{r4, lr}
   d671a:	1e43      	subs	r3, r0, #1
   d671c:	440a      	add	r2, r1
   d671e:	4291      	cmp	r1, r2
   d6720:	d004      	beq.n	d672c <memcpy+0x14>
   d6722:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6726:	f803 4f01 	strb.w	r4, [r3, #1]!
   d672a:	e7f8      	b.n	d671e <memcpy+0x6>
   d672c:	bd10      	pop	{r4, pc}

000d672e <memmove>:
   d672e:	4288      	cmp	r0, r1
   d6730:	b510      	push	{r4, lr}
   d6732:	eb01 0302 	add.w	r3, r1, r2
   d6736:	d801      	bhi.n	d673c <memmove+0xe>
   d6738:	1e42      	subs	r2, r0, #1
   d673a:	e00b      	b.n	d6754 <memmove+0x26>
   d673c:	4298      	cmp	r0, r3
   d673e:	d2fb      	bcs.n	d6738 <memmove+0xa>
   d6740:	1881      	adds	r1, r0, r2
   d6742:	1ad2      	subs	r2, r2, r3
   d6744:	42d3      	cmn	r3, r2
   d6746:	d004      	beq.n	d6752 <memmove+0x24>
   d6748:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d674c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d6750:	e7f8      	b.n	d6744 <memmove+0x16>
   d6752:	bd10      	pop	{r4, pc}
   d6754:	4299      	cmp	r1, r3
   d6756:	d004      	beq.n	d6762 <memmove+0x34>
   d6758:	f811 4b01 	ldrb.w	r4, [r1], #1
   d675c:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6760:	e7f8      	b.n	d6754 <memmove+0x26>
   d6762:	bd10      	pop	{r4, pc}

000d6764 <memset>:
   d6764:	4402      	add	r2, r0
   d6766:	4603      	mov	r3, r0
   d6768:	4293      	cmp	r3, r2
   d676a:	d002      	beq.n	d6772 <memset+0xe>
   d676c:	f803 1b01 	strb.w	r1, [r3], #1
   d6770:	e7fa      	b.n	d6768 <memset+0x4>
   d6772:	4770      	bx	lr

000d6774 <srand>:
   d6774:	b538      	push	{r3, r4, r5, lr}
   d6776:	4b12      	ldr	r3, [pc, #72]	; (d67c0 <srand+0x4c>)
   d6778:	681c      	ldr	r4, [r3, #0]
   d677a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d677c:	4605      	mov	r5, r0
   d677e:	b9d3      	cbnz	r3, d67b6 <srand+0x42>
   d6780:	2018      	movs	r0, #24
   d6782:	f7fe faa1 	bl	d4cc8 <malloc>
   d6786:	f243 330e 	movw	r3, #13070	; 0x330e
   d678a:	63a0      	str	r0, [r4, #56]	; 0x38
   d678c:	8003      	strh	r3, [r0, #0]
   d678e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6792:	8043      	strh	r3, [r0, #2]
   d6794:	f241 2334 	movw	r3, #4660	; 0x1234
   d6798:	8083      	strh	r3, [r0, #4]
   d679a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d679e:	80c3      	strh	r3, [r0, #6]
   d67a0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d67a4:	8103      	strh	r3, [r0, #8]
   d67a6:	2305      	movs	r3, #5
   d67a8:	8143      	strh	r3, [r0, #10]
   d67aa:	230b      	movs	r3, #11
   d67ac:	8183      	strh	r3, [r0, #12]
   d67ae:	2201      	movs	r2, #1
   d67b0:	2300      	movs	r3, #0
   d67b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67b8:	2200      	movs	r2, #0
   d67ba:	611d      	str	r5, [r3, #16]
   d67bc:	615a      	str	r2, [r3, #20]
   d67be:	bd38      	pop	{r3, r4, r5, pc}
   d67c0:	2003e268 	.word	0x2003e268

000d67c4 <strcat>:
   d67c4:	b510      	push	{r4, lr}
   d67c6:	4602      	mov	r2, r0
   d67c8:	4613      	mov	r3, r2
   d67ca:	3201      	adds	r2, #1
   d67cc:	781c      	ldrb	r4, [r3, #0]
   d67ce:	2c00      	cmp	r4, #0
   d67d0:	d1fa      	bne.n	d67c8 <strcat+0x4>
   d67d2:	3b01      	subs	r3, #1
   d67d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   d67d8:	f803 2f01 	strb.w	r2, [r3, #1]!
   d67dc:	2a00      	cmp	r2, #0
   d67de:	d1f9      	bne.n	d67d4 <strcat+0x10>
   d67e0:	bd10      	pop	{r4, pc}

000d67e2 <strcmp>:
   d67e2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d67e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   d67ea:	2a01      	cmp	r2, #1
   d67ec:	bf28      	it	cs
   d67ee:	429a      	cmpcs	r2, r3
   d67f0:	d0f7      	beq.n	d67e2 <strcmp>
   d67f2:	1ad0      	subs	r0, r2, r3
   d67f4:	4770      	bx	lr

000d67f6 <strcpy>:
   d67f6:	4603      	mov	r3, r0
   d67f8:	f811 2b01 	ldrb.w	r2, [r1], #1
   d67fc:	f803 2b01 	strb.w	r2, [r3], #1
   d6800:	2a00      	cmp	r2, #0
   d6802:	d1f9      	bne.n	d67f8 <strcpy+0x2>
   d6804:	4770      	bx	lr
	...

000d6808 <strdup>:
   d6808:	4b02      	ldr	r3, [pc, #8]	; (d6814 <strdup+0xc>)
   d680a:	4601      	mov	r1, r0
   d680c:	6818      	ldr	r0, [r3, #0]
   d680e:	f000 b803 	b.w	d6818 <_strdup_r>
   d6812:	bf00      	nop
   d6814:	2003e268 	.word	0x2003e268

000d6818 <_strdup_r>:
   d6818:	b570      	push	{r4, r5, r6, lr}
   d681a:	4606      	mov	r6, r0
   d681c:	4608      	mov	r0, r1
   d681e:	460c      	mov	r4, r1
   d6820:	f000 f80d 	bl	d683e <strlen>
   d6824:	1c45      	adds	r5, r0, #1
   d6826:	4629      	mov	r1, r5
   d6828:	4630      	mov	r0, r6
   d682a:	f7fe fa6d 	bl	d4d08 <_malloc_r>
   d682e:	4606      	mov	r6, r0
   d6830:	b118      	cbz	r0, d683a <_strdup_r+0x22>
   d6832:	462a      	mov	r2, r5
   d6834:	4621      	mov	r1, r4
   d6836:	f7ff ff6f 	bl	d6718 <memcpy>
   d683a:	4630      	mov	r0, r6
   d683c:	bd70      	pop	{r4, r5, r6, pc}

000d683e <strlen>:
   d683e:	4603      	mov	r3, r0
   d6840:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6844:	2a00      	cmp	r2, #0
   d6846:	d1fb      	bne.n	d6840 <strlen+0x2>
   d6848:	1a18      	subs	r0, r3, r0
   d684a:	3801      	subs	r0, #1
   d684c:	4770      	bx	lr

000d684e <strstr>:
   d684e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6850:	7803      	ldrb	r3, [r0, #0]
   d6852:	b963      	cbnz	r3, d686e <strstr+0x20>
   d6854:	780b      	ldrb	r3, [r1, #0]
   d6856:	2b00      	cmp	r3, #0
   d6858:	bf18      	it	ne
   d685a:	2000      	movne	r0, #0
   d685c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d685e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6862:	b162      	cbz	r2, d687e <strstr+0x30>
   d6864:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d6868:	4297      	cmp	r7, r2
   d686a:	4630      	mov	r0, r6
   d686c:	d0f7      	beq.n	d685e <strstr+0x10>
   d686e:	4603      	mov	r3, r0
   d6870:	1c46      	adds	r6, r0, #1
   d6872:	7800      	ldrb	r0, [r0, #0]
   d6874:	b110      	cbz	r0, d687c <strstr+0x2e>
   d6876:	1e4d      	subs	r5, r1, #1
   d6878:	1e5c      	subs	r4, r3, #1
   d687a:	e7f0      	b.n	d685e <strstr+0x10>
   d687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d687e:	4618      	mov	r0, r3
   d6880:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6884 <_strtol_r>:
   d6884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6888:	4680      	mov	r8, r0
   d688a:	4840      	ldr	r0, [pc, #256]	; (d698c <_strtol_r+0x108>)
   d688c:	f8d0 9000 	ldr.w	r9, [r0]
   d6890:	460f      	mov	r7, r1
   d6892:	463d      	mov	r5, r7
   d6894:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6898:	eb09 0004 	add.w	r0, r9, r4
   d689c:	7840      	ldrb	r0, [r0, #1]
   d689e:	f000 0008 	and.w	r0, r0, #8
   d68a2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d68a6:	b108      	cbz	r0, d68ac <_strtol_r+0x28>
   d68a8:	462f      	mov	r7, r5
   d68aa:	e7f2      	b.n	d6892 <_strtol_r+0xe>
   d68ac:	2c2d      	cmp	r4, #45	; 0x2d
   d68ae:	d103      	bne.n	d68b8 <_strtol_r+0x34>
   d68b0:	1cbd      	adds	r5, r7, #2
   d68b2:	787c      	ldrb	r4, [r7, #1]
   d68b4:	2601      	movs	r6, #1
   d68b6:	e003      	b.n	d68c0 <_strtol_r+0x3c>
   d68b8:	2c2b      	cmp	r4, #43	; 0x2b
   d68ba:	bf04      	itt	eq
   d68bc:	787c      	ldrbeq	r4, [r7, #1]
   d68be:	1cbd      	addeq	r5, r7, #2
   d68c0:	b113      	cbz	r3, d68c8 <_strtol_r+0x44>
   d68c2:	2b10      	cmp	r3, #16
   d68c4:	d10a      	bne.n	d68dc <_strtol_r+0x58>
   d68c6:	e05b      	b.n	d6980 <_strtol_r+0xfc>
   d68c8:	2c30      	cmp	r4, #48	; 0x30
   d68ca:	d157      	bne.n	d697c <_strtol_r+0xf8>
   d68cc:	7828      	ldrb	r0, [r5, #0]
   d68ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d68d2:	2858      	cmp	r0, #88	; 0x58
   d68d4:	d14d      	bne.n	d6972 <_strtol_r+0xee>
   d68d6:	786c      	ldrb	r4, [r5, #1]
   d68d8:	2310      	movs	r3, #16
   d68da:	3502      	adds	r5, #2
   d68dc:	2e00      	cmp	r6, #0
   d68de:	bf14      	ite	ne
   d68e0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d68e4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d68e8:	2700      	movs	r7, #0
   d68ea:	fbbc faf3 	udiv	sl, ip, r3
   d68ee:	4638      	mov	r0, r7
   d68f0:	fb03 cc1a 	mls	ip, r3, sl, ip
   d68f4:	eb09 0e04 	add.w	lr, r9, r4
   d68f8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d68fc:	f01e 0f04 	tst.w	lr, #4
   d6900:	d001      	beq.n	d6906 <_strtol_r+0x82>
   d6902:	3c30      	subs	r4, #48	; 0x30
   d6904:	e00b      	b.n	d691e <_strtol_r+0x9a>
   d6906:	f01e 0e03 	ands.w	lr, lr, #3
   d690a:	d01b      	beq.n	d6944 <_strtol_r+0xc0>
   d690c:	f1be 0f01 	cmp.w	lr, #1
   d6910:	bf0c      	ite	eq
   d6912:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6916:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d691a:	ebce 0404 	rsb	r4, lr, r4
   d691e:	42a3      	cmp	r3, r4
   d6920:	dd10      	ble.n	d6944 <_strtol_r+0xc0>
   d6922:	f1b7 3fff 	cmp.w	r7, #4294967295
   d6926:	d00a      	beq.n	d693e <_strtol_r+0xba>
   d6928:	4550      	cmp	r0, sl
   d692a:	d806      	bhi.n	d693a <_strtol_r+0xb6>
   d692c:	d101      	bne.n	d6932 <_strtol_r+0xae>
   d692e:	4564      	cmp	r4, ip
   d6930:	dc03      	bgt.n	d693a <_strtol_r+0xb6>
   d6932:	fb03 4000 	mla	r0, r3, r0, r4
   d6936:	2701      	movs	r7, #1
   d6938:	e001      	b.n	d693e <_strtol_r+0xba>
   d693a:	f04f 37ff 	mov.w	r7, #4294967295
   d693e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6942:	e7d7      	b.n	d68f4 <_strtol_r+0x70>
   d6944:	1c7b      	adds	r3, r7, #1
   d6946:	d10c      	bne.n	d6962 <_strtol_r+0xde>
   d6948:	2e00      	cmp	r6, #0
   d694a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d694e:	bf14      	ite	ne
   d6950:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d6954:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6958:	f8c8 3000 	str.w	r3, [r8]
   d695c:	b92a      	cbnz	r2, d696a <_strtol_r+0xe6>
   d695e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6962:	b106      	cbz	r6, d6966 <_strtol_r+0xe2>
   d6964:	4240      	negs	r0, r0
   d6966:	b172      	cbz	r2, d6986 <_strtol_r+0x102>
   d6968:	b107      	cbz	r7, d696c <_strtol_r+0xe8>
   d696a:	1e69      	subs	r1, r5, #1
   d696c:	6011      	str	r1, [r2, #0]
   d696e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6972:	2430      	movs	r4, #48	; 0x30
   d6974:	2b00      	cmp	r3, #0
   d6976:	d1b1      	bne.n	d68dc <_strtol_r+0x58>
   d6978:	2308      	movs	r3, #8
   d697a:	e7af      	b.n	d68dc <_strtol_r+0x58>
   d697c:	230a      	movs	r3, #10
   d697e:	e7ad      	b.n	d68dc <_strtol_r+0x58>
   d6980:	2c30      	cmp	r4, #48	; 0x30
   d6982:	d0a3      	beq.n	d68cc <_strtol_r+0x48>
   d6984:	e7aa      	b.n	d68dc <_strtol_r+0x58>
   d6986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d698a:	bf00      	nop
   d698c:	2003e204 	.word	0x2003e204

000d6990 <strtol>:
   d6990:	4613      	mov	r3, r2
   d6992:	460a      	mov	r2, r1
   d6994:	4601      	mov	r1, r0
   d6996:	4802      	ldr	r0, [pc, #8]	; (d69a0 <strtol+0x10>)
   d6998:	6800      	ldr	r0, [r0, #0]
   d699a:	f7ff bf73 	b.w	d6884 <_strtol_r>
   d699e:	bf00      	nop
   d69a0:	2003e268 	.word	0x2003e268

000d69a4 <dynalib_user>:
   d69a4:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d69b4:	00000000 53006973 69747465 7320676e     ....si.Setting s
   d69c4:	49646e65 7265746e 206c6176 203a6f74     endInterval to: 
   d69d4:	00696c00 74746553 20676e69 49676f6c     .li.Setting logI
   d69e4:	7265746e 206c6176 203a6f74 006d7300     nterval to: .sm.
   d69f4:	74746553 20676e69 74617473 6e497375     Setting statusIn
   d6a04:	76726574 74206c61 00203a6f 6e6b6e55     terval to: .Unkn
   d6a14:	206e776f 61726170 6574656d 00202d72     own parameter- .
   d6a24:	002e0022 70736572 65736e6f 63657220     "...response rec
   d6a34:	65766965 682f0064 2d6b6f6f 70736572     eived./hook-resp
   d6a44:	65736e6f 6174532f 00737574 72617453     onse/Status.Star
   d6a54:	676e6974 61745300 2c737574 003a696c     ting.Status,li:.
   d6a64:	3a69732c 6d732c00 6150003a 616f6c79     ,si:.,sm:.Payloa
   d6a74:	2c003a64 33343031 6f43002c 65746e75     d:.,1043,.Counte
   d6a84:	6f740072 506c6174 6f6c7961 203a6461     r.totalPayload: 
   d6a94:	656c5300 00007065                       .Sleep..

000d6a9c <_ZTVN5spark13EthernetClassE>:
	...
   d6aa4:	000d4d77 000d4d6d 000d4d63 000d4d59     wM..mM..cM..YM..
   d6ab4:	000d4d4d 000d4d41 000d4d35 000d4d2d     MM..AM..5M..-M..
   d6ac4:	000d4d23 000d4d19 000d61d1              #M...M...a..

000d6ad0 <_ZTV8SPIClass>:
	...
   d6ad8:	000d4d95 000d4d97 64756162 72655300     .M...M..baud.Ser
   d6ae8:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d6af8:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d6b08:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d6b18:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d6b28:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d6b38:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d6b48:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d6b58:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d6b68:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d6b78:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d6b88:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d6b98:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d6ba8:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d6bb8:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d6bc8:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d6bd8:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d6be8:	00000065                                e...

000d6bec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6bf4:	000d5641 000d5647 000d568b 000d5655     AV..GV...V..UV..
   d6c04:	000d5643                                CV..

000d6c08 <_ZTV9IPAddress>:
	...
   d6c10:	000d5bd9 000d5bc9 000d5bcb              .[...[...[..

000d6c1c <_ZTV9USBSerial>:
	...
   d6c24:	000d5cb1 000d5d01 000d5d0f 000d532d     .\...]...]..-S..
   d6c34:	000d5ced 000d5cb3 000d5cc9 000d5cfb     .\...\...\...\..
   d6c44:	000d5cdf 000d5cad                       .\...\..

000d6c4c <_ZTVN5spark13CellularClassE>:
	...
   d6c54:	000d5e1b 000d5e11 000d5e07 000d5dbd     .^...^...^...]..
   d6c64:	000d5dfb 000d5def 000d5de3 000d5ddb     .]...]...]...]..
   d6c74:	000d5dd1 000d5dc7 000d61d1              .]...]...a..

000d6c80 <_ZTV11USARTSerial>:
	...
   d6c88:	000d5e55 000d5ea5 000d5eb3 000d532d     U^...^...^..-S..
   d6c98:	000d5e69 000d5e8b 000d5e77 000d5e9f     i^...^..w^...^..
   d6ca8:	000d5e57 000d5e5b                       W^..[^..

000d6cb0 <_ZTV7TwoWire>:
	...
   d6cb8:	000d5f81 000d5fcb 000d5fa3 000d5f83     ._..._..._..._..
   d6cc8:	000d5fab 000d5fb3 000d5fbb 000d5fc3     ._..._..._..._..

000d6cd8 <_ZTVN5spark9MeshClassE>:
	...
   d6ce0:	000d6063 000d6059 000d604f 000d6045     c`..Y`..O`..E`..
   d6cf0:	000d6039 000d602d 000d6021 000d6019     9`..-`..!`...`..
   d6d00:	000d600f 000d6005 000d61d1              .`...`...a..

000d6d0c <_ZTVN5spark12NetworkClassE>:
	...
   d6d14:	000d6169 000d6173 000d617d 000d6187     ia..sa..}a...a..
   d6d24:	000d6191 000d619d 000d61a9 000d61b5     .a...a...a...a..
   d6d34:	000d61bd 000d61c7 000d61d1              .a...a...a..

000d6d40 <_ctype_>:
   d6d40:	20202000 20202020 28282020 20282828     .         ((((( 
   d6d50:	20202020 20202020 20202020 20202020                     
   d6d60:	10108820 10101010 10101010 10101010      ...............
   d6d70:	04040410 04040404 10040404 10101010     ................
   d6d80:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6d90:	01010101 01010101 01010101 10101010     ................
   d6da0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6db0:	02020202 02020202 02020202 10101010     ................
   d6dc0:	00000020 00000000 00000000 00000000      ...............
	...

000d6e44 <__sf_fake_stdin>:
	...

000d6e64 <__sf_fake_stdout>:
	...

000d6e84 <__sf_fake_stderr>:
	...
   d6ea4:	00000043                                         C.

000d6ea6 <link_const_variable_data_end>:
	...

000d6ea8 <link_constructors_location>:
   d6ea8:	000d480d 	.word	0x000d480d
   d6eac:	000d4d81 	.word	0x000d4d81
   d6eb0:	000d4e05 	.word	0x000d4e05
   d6eb4:	000d531d 	.word	0x000d531d
   d6eb8:	000d547d 	.word	0x000d547d
   d6ebc:	000d54f9 	.word	0x000d54f9
   d6ec0:	000d5551 	.word	0x000d5551
   d6ec4:	000d5e25 	.word	0x000d5e25
   d6ec8:	000d6119 	.word	0x000d6119
   d6ecc:	000d629d 	.word	0x000d629d
   d6ed0:	000d63a5 	.word	0x000d63a5
   d6ed4:	000d643d 	.word	0x000d643d
   d6ed8:	000d64c1 	.word	0x000d64c1
   d6edc:	000d6585 	.word	0x000d6585
   d6ee0:	000d6649 	.word	0x000d6649

000d6ee4 <link_constructors_end>:
	...
