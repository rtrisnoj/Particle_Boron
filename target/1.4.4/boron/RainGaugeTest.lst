
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Rain_Gauge/src/RainGaugeTest/target/1.4.4/boron/RainGaugeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003654  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  0001772c  2**0
                  CONTENTS
  4 .data         0000008c  2003e2ac  000d7670  0000e2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004b8  2003e338  2003e338  0001e338  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  000d76fc  000d76fc  000176fc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d7728  000d7728  00017728  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dee6f  00000000  00000000  0001772c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000119a8  00000000  00000000  000f659b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002046c  00000000  00000000  00107f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002968  00000000  00000000  001283af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004cb8  00000000  00000000  0012ad17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035e62  00000000  00000000  0012f9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b53a  00000000  00000000  00165831  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010312f  00000000  00000000  00190d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d8b4  00000000  00000000  00293e9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 feeb 	bl	d6e08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ff0b 	bl	d6e54 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2ac 	.word	0x2003e2ac
   d4048:	000d7670 	.word	0x000d7670
   d404c:	2003e338 	.word	0x2003e338
   d4050:	2003e338 	.word	0x2003e338
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe2d 	bl	d5cb8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7668 	.word	0x000d7668
   d4080:	000d762c 	.word	0x000d762c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 ba2e 	b.w	d44e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc93 	bl	d49b4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bddf 	b.w	d5c54 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b8b1 	b.w	d51fc <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b8b7 	b.w	d520c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b8b5 	b.w	d520c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass8syncTimeEv.isra.9>:
    void unsubscribe()
    {
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
   d40b2:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40b4:	f001 f86a 	bl	d518c <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d40b8:	b120      	cbz	r0, d40c4 <_ZN10CloudClass8syncTimeEv.isra.9+0x12>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d40ba:	2000      	movs	r0, #0
    }
   d40bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bool syncTime(void)
    {
        if (!connected()) {
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d40c0:	f001 b884 	b.w	d51cc <spark_sync_time>
    }
   d40c4:	bd08      	pop	{r3, pc}

000d40c6 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d40c6:	2200      	movs	r2, #0
   d40c8:	4611      	mov	r1, r2
   d40ca:	6840      	ldr	r0, [r0, #4]
   d40cc:	f001 b80e 	b.w	d50ec <network_ready>

000d40d0 <_Z12setParameter6StringS_>:
  }

  setParameter(parameter,value.replace(".",""));
}
bool setParameter(String param, String value)
{
   d40d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d2:	460c      	mov	r4, r1
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40d4:	4967      	ldr	r1, [pc, #412]	; (d4274 <_Z12setParameter6StringS_+0x1a4>)
   d40d6:	4605      	mov	r5, r0
   d40d8:	f001 fb25 	bl	d5726 <_ZNK6String6equalsEPKc>
 
if (param == "si")
   d40dc:	b1b0      	cbz	r0, d410c <_Z12setParameter6StringS_+0x3c>
  {
      Serial.println("Setting sendInterval to: " + value);
   d40de:	f002 f99d 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d40e2:	4965      	ldr	r1, [pc, #404]	; (d4278 <_Z12setParameter6StringS_+0x1a8>)
   d40e4:	4605      	mov	r5, r0
   d40e6:	4668      	mov	r0, sp
   d40e8:	f001 fa33 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d40ec:	4621      	mov	r1, r4
   d40ee:	4668      	mov	r0, sp
   d40f0:	f001 fafb 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d40f4:	6801      	ldr	r1, [r0, #0]
   d40f6:	4628      	mov	r0, r5
   d40f8:	f001 fc29 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d40fc:	4668      	mov	r0, sp
   d40fe:	f001 f9e1 	bl	d54c4 <_ZN6StringD1Ev>
      sendInterval = value.toInt();
   d4102:	4620      	mov	r0, r4
   d4104:	f001 fbda 	bl	d58bc <_ZNK6String5toIntEv>
   d4108:	4b5c      	ldr	r3, [pc, #368]	; (d427c <_Z12setParameter6StringS_+0x1ac>)
   d410a:	e036      	b.n	d417a <_Z12setParameter6StringS_+0xaa>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410c:	495c      	ldr	r1, [pc, #368]	; (d4280 <_Z12setParameter6StringS_+0x1b0>)
   d410e:	4628      	mov	r0, r5
   d4110:	f001 fb09 	bl	d5726 <_ZNK6String6equalsEPKc>
  }
  else if (param == "li")
   d4114:	b1b0      	cbz	r0, d4144 <_Z12setParameter6StringS_+0x74>
  {
      Serial.println("Setting logInterval to: " + value);
   d4116:	f002 f981 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d411a:	495a      	ldr	r1, [pc, #360]	; (d4284 <_Z12setParameter6StringS_+0x1b4>)
   d411c:	4605      	mov	r5, r0
   d411e:	4668      	mov	r0, sp
   d4120:	f001 fa17 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4124:	4621      	mov	r1, r4
   d4126:	4668      	mov	r0, sp
   d4128:	f001 fadf 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d412c:	6801      	ldr	r1, [r0, #0]
   d412e:	4628      	mov	r0, r5
   d4130:	f001 fc0d 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4134:	4668      	mov	r0, sp
   d4136:	f001 f9c5 	bl	d54c4 <_ZN6StringD1Ev>
      logInterval = value.toInt();
   d413a:	4620      	mov	r0, r4
   d413c:	f001 fbbe 	bl	d58bc <_ZNK6String5toIntEv>
   d4140:	4b51      	ldr	r3, [pc, #324]	; (d4288 <_Z12setParameter6StringS_+0x1b8>)
   d4142:	e01a      	b.n	d417a <_Z12setParameter6StringS_+0xaa>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4144:	4951      	ldr	r1, [pc, #324]	; (d428c <_Z12setParameter6StringS_+0x1bc>)
   d4146:	4628      	mov	r0, r5
   d4148:	f001 faed 	bl	d5726 <_ZNK6String6equalsEPKc>
  }
  else if (param == "sm")
   d414c:	b1b8      	cbz	r0, d417e <_Z12setParameter6StringS_+0xae>
  {
      Serial.println("Setting statusInterval to: " + value);
   d414e:	f002 f965 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4152:	494f      	ldr	r1, [pc, #316]	; (d4290 <_Z12setParameter6StringS_+0x1c0>)
   d4154:	4605      	mov	r5, r0
   d4156:	4668      	mov	r0, sp
   d4158:	f001 f9fb 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d415c:	4621      	mov	r1, r4
   d415e:	4668      	mov	r0, sp
   d4160:	f001 fac3 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4164:	6801      	ldr	r1, [r0, #0]
   d4166:	4628      	mov	r0, r5
   d4168:	f001 fbf1 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d416c:	4668      	mov	r0, sp
   d416e:	f001 f9a9 	bl	d54c4 <_ZN6StringD1Ev>
      statusInterval = value.toInt();
   d4172:	4620      	mov	r0, r4
   d4174:	f001 fba2 	bl	d58bc <_ZNK6String5toIntEv>
   d4178:	4b46      	ldr	r3, [pc, #280]	; (d4294 <_Z12setParameter6StringS_+0x1c4>)
   d417a:	6018      	str	r0, [r3, #0]
   d417c:	e076      	b.n	d426c <_Z12setParameter6StringS_+0x19c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d417e:	4946      	ldr	r1, [pc, #280]	; (d4298 <_Z12setParameter6StringS_+0x1c8>)
   d4180:	4628      	mov	r0, r5
   d4182:	f001 fad0 	bl	d5726 <_ZNK6String6equalsEPKc>
  }
  else if (param == "tm")
   d4186:	b1b0      	cbz	r0, d41b6 <_Z12setParameter6StringS_+0xe6>
  {
      Serial.println("Setting transmitMode to: " + value);
   d4188:	f002 f948 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d418c:	4943      	ldr	r1, [pc, #268]	; (d429c <_Z12setParameter6StringS_+0x1cc>)
   d418e:	4605      	mov	r5, r0
   d4190:	4668      	mov	r0, sp
   d4192:	f001 f9de 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4196:	4621      	mov	r1, r4
   d4198:	4668      	mov	r0, sp
   d419a:	f001 faa6 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d419e:	6801      	ldr	r1, [r0, #0]
   d41a0:	4628      	mov	r0, r5
   d41a2:	f001 fbd4 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41a6:	4668      	mov	r0, sp
   d41a8:	f001 f98c 	bl	d54c4 <_ZN6StringD1Ev>
      transmitMode = value.toInt();
   d41ac:	4620      	mov	r0, r4
   d41ae:	f001 fb85 	bl	d58bc <_ZNK6String5toIntEv>
   d41b2:	4b3b      	ldr	r3, [pc, #236]	; (d42a0 <_Z12setParameter6StringS_+0x1d0>)
   d41b4:	e7e1      	b.n	d417a <_Z12setParameter6StringS_+0xaa>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41b6:	493b      	ldr	r1, [pc, #236]	; (d42a4 <_Z12setParameter6StringS_+0x1d4>)
   d41b8:	4628      	mov	r0, r5
   d41ba:	f001 fab4 	bl	d5726 <_ZNK6String6equalsEPKc>
  }
  else if (param == "to")
   d41be:	b1e8      	cbz	r0, d41fc <_Z12setParameter6StringS_+0x12c>
  {
      Serial.println("Setting timeout to: " + value);
   d41c0:	f002 f92c 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d41c4:	4938      	ldr	r1, [pc, #224]	; (d42a8 <_Z12setParameter6StringS_+0x1d8>)
   d41c6:	4605      	mov	r5, r0
   d41c8:	4668      	mov	r0, sp
   d41ca:	f001 f9c2 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d41ce:	4621      	mov	r1, r4
   d41d0:	4668      	mov	r0, sp
   d41d2:	f001 fa8a 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d41d6:	6801      	ldr	r1, [r0, #0]
   d41d8:	4628      	mov	r0, r5
   d41da:	f001 fbb8 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d41de:	4668      	mov	r0, sp
   d41e0:	f001 f970 	bl	d54c4 <_ZN6StringD1Ev>
      timeout = value.toInt();
   d41e4:	4620      	mov	r0, r4
   d41e6:	f001 fb69 	bl	d58bc <_ZNK6String5toIntEv>
      if (timeout < 10000)  // Ensure that an invalid timeout parameter does not disable radio... minimum timeout is 10 seconds
   d41ea:	f242 730f 	movw	r3, #9999	; 0x270f
   d41ee:	4298      	cmp	r0, r3
   d41f0:	4b2e      	ldr	r3, [pc, #184]	; (d42ac <_Z12setParameter6StringS_+0x1dc>)
   d41f2:	dcc2      	bgt.n	d417a <_Z12setParameter6StringS_+0xaa>
        timeout = 10000;
   d41f4:	f242 7210 	movw	r2, #10000	; 0x2710
   d41f8:	601a      	str	r2, [r3, #0]
   d41fa:	e037      	b.n	d426c <_Z12setParameter6StringS_+0x19c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d41fc:	492c      	ldr	r1, [pc, #176]	; (d42b0 <_Z12setParameter6StringS_+0x1e0>)
   d41fe:	4628      	mov	r0, r5
   d4200:	f001 fa91 	bl	d5726 <_ZNK6String6equalsEPKc>
  }
  else if (param == "db")
   d4204:	b1d0      	cbz	r0, d423c <_Z12setParameter6StringS_+0x16c>
  {
      Serial.println("Setting debug to: " + value);
   d4206:	f002 f909 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d420a:	492a      	ldr	r1, [pc, #168]	; (d42b4 <_Z12setParameter6StringS_+0x1e4>)
   d420c:	4605      	mov	r5, r0
   d420e:	4668      	mov	r0, sp
   d4210:	f001 f99f 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4214:	4621      	mov	r1, r4
   d4216:	4668      	mov	r0, sp
   d4218:	f001 fa67 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d421c:	6801      	ldr	r1, [r0, #0]
   d421e:	4628      	mov	r0, r5
   d4220:	f001 fb95 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4224:	4668      	mov	r0, sp
   d4226:	f001 f94d 	bl	d54c4 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d422a:	4923      	ldr	r1, [pc, #140]	; (d42b8 <_Z12setParameter6StringS_+0x1e8>)
   d422c:	4620      	mov	r0, r4
   d422e:	f001 fa7a 	bl	d5726 <_ZNK6String6equalsEPKc>
      if(value == "true")
   d4232:	b1d8      	cbz	r0, d426c <_Z12setParameter6StringS_+0x19c>
        debug = true;
   d4234:	4b21      	ldr	r3, [pc, #132]	; (d42bc <_Z12setParameter6StringS_+0x1ec>)
   d4236:	2201      	movs	r2, #1
   d4238:	701a      	strb	r2, [r3, #0]
   d423a:	e017      	b.n	d426c <_Z12setParameter6StringS_+0x19c>
  }
  else
  {
      Serial.println("Unknown parameter- " + param + ":" + value);
   d423c:	f002 f8ee 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4240:	491f      	ldr	r1, [pc, #124]	; (d42c0 <_Z12setParameter6StringS_+0x1f0>)
   d4242:	4606      	mov	r6, r0
   d4244:	4668      	mov	r0, sp
   d4246:	f001 f984 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d424a:	4629      	mov	r1, r5
   d424c:	4668      	mov	r0, sp
   d424e:	f001 fa4c 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4252:	491c      	ldr	r1, [pc, #112]	; (d42c4 <_Z12setParameter6StringS_+0x1f4>)
   d4254:	f001 fa55 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d4258:	4621      	mov	r1, r4
   d425a:	f001 fa46 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d425e:	6801      	ldr	r1, [r0, #0]
   d4260:	4630      	mov	r0, r6
   d4262:	f001 fb74 	bl	d594e <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4266:	4668      	mov	r0, sp
   d4268:	f001 f92c 	bl	d54c4 <_ZN6StringD1Ev>
  }
  
  return true;
}
   d426c:	2001      	movs	r0, #1
   d426e:	b004      	add	sp, #16
   d4270:	bd70      	pop	{r4, r5, r6, pc}
   d4272:	bf00      	nop
   d4274:	000d7088 	.word	0x000d7088
   d4278:	000d708b 	.word	0x000d708b
   d427c:	2003e2c4 	.word	0x2003e2c4
   d4280:	000d70a5 	.word	0x000d70a5
   d4284:	000d70a8 	.word	0x000d70a8
   d4288:	2003e2b8 	.word	0x2003e2b8
   d428c:	000d70c1 	.word	0x000d70c1
   d4290:	000d70c4 	.word	0x000d70c4
   d4294:	2003e2c8 	.word	0x2003e2c8
   d4298:	000d70e0 	.word	0x000d70e0
   d429c:	000d70e3 	.word	0x000d70e3
   d42a0:	2003e2bc 	.word	0x2003e2bc
   d42a4:	000d70fd 	.word	0x000d70fd
   d42a8:	000d7100 	.word	0x000d7100
   d42ac:	2003e2ac 	.word	0x2003e2ac
   d42b0:	000d7115 	.word	0x000d7115
   d42b4:	000d7118 	.word	0x000d7118
   d42b8:	000d712b 	.word	0x000d712b
   d42bc:	2003e350 	.word	0x2003e350
   d42c0:	000d7130 	.word	0x000d7130
   d42c4:	000d7172 	.word	0x000d7172

000d42c8 <_Z11parseString6String>:
  parseString(data);
   responseMessage();
}
       
void parseString(String strVars)
{
   d42c8:	b570      	push	{r4, r5, r6, lr}
   d42ca:	b09c      	sub	sp, #112	; 0x70
   d42cc:	4605      	mov	r5, r0

  strVars = strVars.replace("\"","");
   d42ce:	4953      	ldr	r1, [pc, #332]	; (d441c <_Z11parseString6String+0x154>)
   d42d0:	a814      	add	r0, sp, #80	; 0x50
   d42d2:	f001 f93e 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d42d6:	4952      	ldr	r1, [pc, #328]	; (d4420 <_Z11parseString6String+0x158>)
   d42d8:	a818      	add	r0, sp, #96	; 0x60
   d42da:	f001 f93a 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d42de:	aa18      	add	r2, sp, #96	; 0x60
   d42e0:	a914      	add	r1, sp, #80	; 0x50
   d42e2:	4628      	mov	r0, r5
   d42e4:	f001 fa63 	bl	d57ae <_ZN6String7replaceERKS_S1_>
   d42e8:	4601      	mov	r1, r0
   d42ea:	4628      	mov	r0, r5
   d42ec:	f001 f961 	bl	d55b2 <_ZN6StringaSERKS_>
   d42f0:	a818      	add	r0, sp, #96	; 0x60
   d42f2:	f001 f8e7 	bl	d54c4 <_ZN6StringD1Ev>
   d42f6:	a814      	add	r0, sp, #80	; 0x50
   d42f8:	f001 f8e4 	bl	d54c4 <_ZN6StringD1Ev>
  String parameter = ""; 
   d42fc:	4948      	ldr	r1, [pc, #288]	; (d4420 <_Z11parseString6String+0x158>)
   d42fe:	4668      	mov	r0, sp
   d4300:	f001 f927 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
  String value = "";
   d4304:	4946      	ldr	r1, [pc, #280]	; (d4420 <_Z11parseString6String+0x158>)
   d4306:	a804      	add	r0, sp, #16
   d4308:	f001 f923 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
  String inChar = "";
   d430c:	4944      	ldr	r1, [pc, #272]	; (d4420 <_Z11parseString6String+0x158>)
   d430e:	a808      	add	r0, sp, #32
   d4310:	f001 f91f 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4314:	2400      	movs	r4, #0
  int i = 0;
  bool readingParam = true;
   d4316:	2601      	movs	r6, #1
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4318:	4942      	ldr	r1, [pc, #264]	; (d4424 <_Z11parseString6String+0x15c>)
   d431a:	a808      	add	r0, sp, #32
   d431c:	f001 fa03 	bl	d5726 <_ZNK6String6equalsEPKc>

  while (inChar != ".")
   d4320:	b9d8      	cbnz	r0, d435a <_Z11parseString6String+0x92>
  {
  inChar = strVars.charAt(i++);
   d4322:	4621      	mov	r1, r4
   d4324:	4628      	mov	r0, r5
   d4326:	f001 fa19 	bl	d575c <_ZNK6String6charAtEj>
class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
   d432a:	4601      	mov	r1, r0
   d432c:	a818      	add	r0, sp, #96	; 0x60
   d432e:	f001 f97b 	bl	d5628 <_ZN6StringC1Ec>
   d4332:	a918      	add	r1, sp, #96	; 0x60
   d4334:	a808      	add	r0, sp, #32
   d4336:	f001 f95e 	bl	d55f6 <_ZN6StringaSEO15StringSumHelper>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d433a:	a818      	add	r0, sp, #96	; 0x60
   d433c:	f001 f8c2 	bl	d54c4 <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4340:	4939      	ldr	r1, [pc, #228]	; (d4428 <_Z11parseString6String+0x160>)
   d4342:	a808      	add	r0, sp, #32
   d4344:	f001 f9ef 	bl	d5726 <_ZNK6String6equalsEPKc>
  if (inChar != ":" and inChar != ",")
   d4348:	2800      	cmp	r0, #0
   d434a:	d140      	bne.n	d43ce <_Z11parseString6String+0x106>
   d434c:	4937      	ldr	r1, [pc, #220]	; (d442c <_Z11parseString6String+0x164>)
   d434e:	a808      	add	r0, sp, #32
   d4350:	f001 f9e9 	bl	d5726 <_ZNK6String6equalsEPKc>
   d4354:	2800      	cmp	r0, #0
   d4356:	d030      	beq.n	d43ba <_Z11parseString6String+0xf2>
   d4358:	e039      	b.n	d43ce <_Z11parseString6String+0x106>
        readingParam = true;
      }
    }
  }

  setParameter(parameter,value.replace(".",""));
   d435a:	4669      	mov	r1, sp
   d435c:	a814      	add	r0, sp, #80	; 0x50
   d435e:	f001 f937 	bl	d55d0 <_ZN6StringC1ERKS_>
   d4362:	4930      	ldr	r1, [pc, #192]	; (d4424 <_Z11parseString6String+0x15c>)
   d4364:	a80c      	add	r0, sp, #48	; 0x30
   d4366:	f001 f8f4 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d436a:	492d      	ldr	r1, [pc, #180]	; (d4420 <_Z11parseString6String+0x158>)
   d436c:	a810      	add	r0, sp, #64	; 0x40
   d436e:	f001 f8f0 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4372:	aa10      	add	r2, sp, #64	; 0x40
   d4374:	a90c      	add	r1, sp, #48	; 0x30
   d4376:	a804      	add	r0, sp, #16
   d4378:	f001 fa19 	bl	d57ae <_ZN6String7replaceERKS_S1_>
   d437c:	4601      	mov	r1, r0
   d437e:	a818      	add	r0, sp, #96	; 0x60
   d4380:	f001 f926 	bl	d55d0 <_ZN6StringC1ERKS_>
   d4384:	a918      	add	r1, sp, #96	; 0x60
   d4386:	a814      	add	r0, sp, #80	; 0x50
   d4388:	f7ff fea2 	bl	d40d0 <_Z12setParameter6StringS_>
   d438c:	a818      	add	r0, sp, #96	; 0x60
   d438e:	f001 f899 	bl	d54c4 <_ZN6StringD1Ev>
   d4392:	a810      	add	r0, sp, #64	; 0x40
   d4394:	f001 f896 	bl	d54c4 <_ZN6StringD1Ev>
   d4398:	a80c      	add	r0, sp, #48	; 0x30
   d439a:	f001 f893 	bl	d54c4 <_ZN6StringD1Ev>
   d439e:	a814      	add	r0, sp, #80	; 0x50
   d43a0:	f001 f890 	bl	d54c4 <_ZN6StringD1Ev>
        readingParam = false;
      }
      else
      {
        if (setParameter(parameter, value) == false)
          return;
   d43a4:	a808      	add	r0, sp, #32
   d43a6:	f001 f88d 	bl	d54c4 <_ZN6StringD1Ev>
   d43aa:	a804      	add	r0, sp, #16
   d43ac:	f001 f88a 	bl	d54c4 <_ZN6StringD1Ev>
   d43b0:	4668      	mov	r0, sp
   d43b2:	f001 f887 	bl	d54c4 <_ZN6StringD1Ev>
      }
    }
  }

  setParameter(parameter,value.replace(".",""));
}
   d43b6:	b01c      	add	sp, #112	; 0x70
   d43b8:	bd70      	pop	{r4, r5, r6, pc}
  while (inChar != ".")
  {
  inChar = strVars.charAt(i++);
  if (inChar != ":" and inChar != ",")
    {
    if (readingParam)
   d43ba:	b116      	cbz	r6, d43c2 <_Z11parseString6String+0xfa>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d43bc:	a908      	add	r1, sp, #32
   d43be:	4668      	mov	r0, sp
   d43c0:	e001      	b.n	d43c6 <_Z11parseString6String+0xfe>
   d43c2:	a908      	add	r1, sp, #32
   d43c4:	a804      	add	r0, sp, #16
   d43c6:	f001 f97d 	bl	d56c4 <_ZN6String6concatERKS_>
   d43ca:	3401      	adds	r4, #1
   d43cc:	e7a4      	b.n	d4318 <_Z11parseString6String+0x50>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d43ce:	4916      	ldr	r1, [pc, #88]	; (d4428 <_Z11parseString6String+0x160>)
   d43d0:	a808      	add	r0, sp, #32
   d43d2:	f001 f9a8 	bl	d5726 <_ZNK6String6equalsEPKc>
    else
      value += inChar;    
    }
  else
    {
      if (inChar == ":")
   d43d6:	b108      	cbz	r0, d43dc <_Z11parseString6String+0x114>
      {
        readingParam = false;
   d43d8:	2600      	movs	r6, #0
   d43da:	e7f6      	b.n	d43ca <_Z11parseString6String+0x102>
      }
      else
      {
        if (setParameter(parameter, value) == false)
   d43dc:	4669      	mov	r1, sp
   d43de:	a814      	add	r0, sp, #80	; 0x50
   d43e0:	f001 f8f6 	bl	d55d0 <_ZN6StringC1ERKS_>
   d43e4:	a904      	add	r1, sp, #16
   d43e6:	a818      	add	r0, sp, #96	; 0x60
   d43e8:	f001 f8f2 	bl	d55d0 <_ZN6StringC1ERKS_>
   d43ec:	a918      	add	r1, sp, #96	; 0x60
   d43ee:	a814      	add	r0, sp, #80	; 0x50
   d43f0:	f7ff fe6e 	bl	d40d0 <_Z12setParameter6StringS_>
   d43f4:	4606      	mov	r6, r0
   d43f6:	a818      	add	r0, sp, #96	; 0x60
   d43f8:	f001 f864 	bl	d54c4 <_ZN6StringD1Ev>
   d43fc:	a814      	add	r0, sp, #80	; 0x50
   d43fe:	f001 f861 	bl	d54c4 <_ZN6StringD1Ev>
   d4402:	2e00      	cmp	r6, #0
   d4404:	d0ce      	beq.n	d43a4 <_Z11parseString6String+0xdc>
          return;
        parameter = "";
   d4406:	4906      	ldr	r1, [pc, #24]	; (d4420 <_Z11parseString6String+0x158>)
   d4408:	4668      	mov	r0, sp
   d440a:	f001 f8fc 	bl	d5606 <_ZN6StringaSEPKc>
        value = ""; 
   d440e:	4904      	ldr	r1, [pc, #16]	; (d4420 <_Z11parseString6String+0x158>)
   d4410:	a804      	add	r0, sp, #16
   d4412:	f001 f8f8 	bl	d5606 <_ZN6StringaSEPKc>
        readingParam = true;
   d4416:	2601      	movs	r6, #1
   d4418:	e7d7      	b.n	d43ca <_Z11parseString6String+0x102>
   d441a:	bf00      	nop
   d441c:	000d7144 	.word	0x000d7144
   d4420:	000d72db 	.word	0x000d72db
   d4424:	000d7146 	.word	0x000d7146
   d4428:	000d7172 	.word	0x000d7172
   d442c:	000d71b0 	.word	0x000d71b0

000d4430 <_Z14initConnectionv>:
{
  initConnection();
  Particle.syncTime();
}
bool initConnection()
{
   d4430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4434:	4c25      	ldr	r4, [pc, #148]	; (d44cc <_Z14initConnectionv+0x9c>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4436:	2300      	movs	r3, #0
   d4438:	461a      	mov	r2, r3
   d443a:	4619      	mov	r1, r3
   d443c:	6860      	ldr	r0, [r4, #4]
   d443e:	f000 fe5d 	bl	d50fc <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4442:	2300      	movs	r3, #0
   d4444:	6860      	ldr	r0, [r4, #4]
  bool retVal = false;
  Cellular.on();
  Cellular.connect();
  waitFor(Cellular.ready,timeout);
   d4446:	4c22      	ldr	r4, [pc, #136]	; (d44d0 <_Z14initConnectionv+0xa0>)
   d4448:	461a      	mov	r2, r3
   d444a:	4619      	mov	r1, r3
   d444c:	f000 fe36 	bl	d50bc <network_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4450:	2000      	movs	r0, #0
   d4452:	6826      	ldr	r6, [r4, #0]
   d4454:	f000 fcec 	bl	d4e30 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4458:	f04f 0900 	mov.w	r9, #0
   d445c:	4680      	mov	r8, r0
   d445e:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4460:	2000      	movs	r0, #0
   d4462:	f000 fce5 	bl	d4e30 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4466:	ebb0 0008 	subs.w	r0, r0, r8
   d446a:	eb61 0109 	sbc.w	r1, r1, r9
   d446e:	42b9      	cmp	r1, r7
   d4470:	bf08      	it	eq
   d4472:	42b0      	cmpeq	r0, r6
   d4474:	d206      	bcs.n	d4484 <_Z14initConnectionv+0x54>
   d4476:	4815      	ldr	r0, [pc, #84]	; (d44cc <_Z14initConnectionv+0x9c>)
   d4478:	f7ff fe25 	bl	d40c6 <_ZN5spark13CellularClass5readyEv>
   d447c:	b910      	cbnz	r0, d4484 <_Z14initConnectionv+0x54>
            spark_process();
   d447e:	f000 fe6d 	bl	d515c <spark_process>
   d4482:	e7ed      	b.n	d4460 <_Z14initConnectionv+0x30>
   d4484:	4811      	ldr	r0, [pc, #68]	; (d44cc <_Z14initConnectionv+0x9c>)
   d4486:	f7ff fe1e 	bl	d40c6 <_ZN5spark13CellularClass5readyEv>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d448a:	f000 fe6f 	bl	d516c <spark_cloud_flag_connect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d448e:	2000      	movs	r0, #0
  Particle.connect();
  waitFor(Particle.connected,timeout);
   d4490:	6824      	ldr	r4, [r4, #0]
   d4492:	f000 fccd 	bl	d4e30 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4496:	2700      	movs	r7, #0
   d4498:	4606      	mov	r6, r0
   d449a:	2500      	movs	r5, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d449c:	2000      	movs	r0, #0
   d449e:	f000 fcc7 	bl	d4e30 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d44a2:	1b80      	subs	r0, r0, r6
   d44a4:	eb61 0107 	sbc.w	r1, r1, r7
   d44a8:	42a9      	cmp	r1, r5
   d44aa:	bf08      	it	eq
   d44ac:	42a0      	cmpeq	r0, r4
   d44ae:	d202      	bcs.n	d44b6 <_Z14initConnectionv+0x86>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44b0:	f000 fe6c 	bl	d518c <spark_cloud_flag_connected>
   d44b4:	b130      	cbz	r0, d44c4 <_Z14initConnectionv+0x94>
   d44b6:	f000 fe69 	bl	d518c <spark_cloud_flag_connected>
  if (Cellular.ready())
   d44ba:	4804      	ldr	r0, [pc, #16]	; (d44cc <_Z14initConnectionv+0x9c>)
   d44bc:	f7ff fe03 	bl	d40c6 <_ZN5spark13CellularClass5readyEv>
    retVal = true;
  return retVal;
   d44c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            spark_process();
   d44c4:	f000 fe4a 	bl	d515c <spark_process>
   d44c8:	e7e8      	b.n	d449c <_Z14initConnectionv+0x6c>
   d44ca:	bf00      	nop
   d44cc:	2003e3e8 	.word	0x2003e3e8
   d44d0:	2003e2ac 	.word	0x2003e2ac

000d44d4 <_Z12initSyncTimev>:
      System.sleep(wakeUpPins,1,FALLING,logInterval * 60);
    }
    
}
void initSyncTime()
{
   d44d4:	b508      	push	{r3, lr}
  initConnection();
   d44d6:	f7ff ffab 	bl	d4430 <_Z14initConnectionv>
  Particle.syncTime();
}
   d44da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    
}
void initSyncTime()
{
  initConnection();
  Particle.syncTime();
   d44de:	f7ff bde8 	b.w	d40b2 <_ZN10CloudClass8syncTimeEv.isra.9>
	...

000d44e4 <setup>:


SYSTEM_MODE (MANUAL);

void setup()
{ 
   d44e4:	b530      	push	{r4, r5, lr}
   d44e6:	b08b      	sub	sp, #44	; 0x2c
  Serial.begin(9600);
   d44e8:	f001 ff98 	bl	d641c <_Z16_fetch_usbserialv>
   d44ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d44f0:	f001 ff88 	bl	d6404 <_ZN9USBSerial5beginEl>
  delay(3000);
  pinMode(buttonPin, INPUT);
  pinMode(led1, OUTPUT);
   d44f4:	4d1f      	ldr	r5, [pc, #124]	; (d4574 <setup+0x90>)
  pinMode(led2, OUTPUT);
   d44f6:	4c20      	ldr	r4, [pc, #128]	; (d4578 <setup+0x94>)
SYSTEM_MODE (MANUAL);

void setup()
{ 
  Serial.begin(9600);
  delay(3000);
   d44f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   d44fc:	f001 facc 	bl	d5a98 <delay>
  pinMode(buttonPin, INPUT);
   d4500:	2100      	movs	r1, #0
   d4502:	2004      	movs	r0, #4
   d4504:	f002 fa9c 	bl	d6a40 <pinMode>
  pinMode(led1, OUTPUT);
   d4508:	8828      	ldrh	r0, [r5, #0]
   d450a:	2101      	movs	r1, #1
   d450c:	f002 fa98 	bl	d6a40 <pinMode>
  pinMode(led2, OUTPUT);
   d4510:	8820      	ldrh	r0, [r4, #0]
   d4512:	2101      	movs	r1, #1
   d4514:	f002 fa94 	bl	d6a40 <pinMode>
  digitalWrite(led1, LOW);
   d4518:	8828      	ldrh	r0, [r5, #0]
   d451a:	2100      	movs	r1, #0
   d451c:	f002 faa1 	bl	d6a62 <digitalWrite>
  digitalWrite(led2, LOW);
   d4520:	2100      	movs	r1, #0
   d4522:	8820      	ldrh	r0, [r4, #0]
   d4524:	f002 fa9d 	bl	d6a62 <digitalWrite>
  initSyncTime();
   d4528:	f7ff ffd4 	bl	d44d4 <_Z12initSyncTimev>
  prevTime = Time.now();         
   d452c:	f001 faa2 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d4530:	4b12      	ldr	r3, [pc, #72]	; (d457c <setup+0x98>)
   d4532:	6018      	str	r0, [r3, #0]
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d4534:	a802      	add	r0, sp, #8
   d4536:	f000 fe31 	bl	d519c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d453a:	a902      	add	r1, sp, #8
   d453c:	a806      	add	r0, sp, #24
   d453e:	f001 f847 	bl	d55d0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/Status", responseHandler, MY_DEVICES);
   d4542:	490f      	ldr	r1, [pc, #60]	; (d4580 <setup+0x9c>)
   d4544:	a806      	add	r0, sp, #24
   d4546:	f001 f8dc 	bl	d5702 <_ZplRK15StringSumHelperPKc>
     */
    int publishVitals(system_tick_t period_s = particle::NOW);

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d454a:	2300      	movs	r3, #0
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	9300      	str	r3, [sp, #0]
   d4550:	461a      	mov	r2, r3
   d4552:	490c      	ldr	r1, [pc, #48]	; (d4584 <setup+0xa0>)
   d4554:	6800      	ldr	r0, [r0, #0]
   d4556:	f000 fe31 	bl	d51bc <spark_subscribe>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d455a:	a806      	add	r0, sp, #24
   d455c:	f000 ffb2 	bl	d54c4 <_ZN6StringD1Ev>
   d4560:	a802      	add	r0, sp, #8
   d4562:	f000 ffaf 	bl	d54c4 <_ZN6StringD1Ev>
  Serial.println("Starting");
   d4566:	f001 ff59 	bl	d641c <_Z16_fetch_usbserialv>
   d456a:	4907      	ldr	r1, [pc, #28]	; (d4588 <setup+0xa4>)
   d456c:	f001 f9ef 	bl	d594e <_ZN5Print7printlnEPKc>
}
   d4570:	b00b      	add	sp, #44	; 0x2c
   d4572:	bd30      	pop	{r4, r5, pc}
   d4574:	2003e398 	.word	0x2003e398
   d4578:	2003e2b0 	.word	0x2003e2b0
   d457c:	2003e37c 	.word	0x2003e37c
   d4580:	000d7148 	.word	0x000d7148
   d4584:	000d4955 	.word	0x000d4955
   d4588:	000d715e 	.word	0x000d715e

000d458c <_Z20disconnectConnectionv>:
  if (Cellular.ready())
    retVal = true;
  return retVal;
}
void disconnectConnection()
{
   d458c:	b510      	push	{r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d458e:	f000 fdf5 	bl	d517c <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4592:	f000 fdfb 	bl	d518c <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4596:	4604      	mov	r4, r0
   d4598:	b950      	cbnz	r0, d45b0 <_Z20disconnectConnectionv+0x24>
   d459a:	f000 fdf7 	bl	d518c <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d459e:	4806      	ldr	r0, [pc, #24]	; (d45b8 <_Z20disconnectConnectionv+0x2c>)
   d45a0:	4623      	mov	r3, r4
   d45a2:	4622      	mov	r2, r4
   d45a4:	4621      	mov	r1, r4
   d45a6:	6840      	ldr	r0, [r0, #4]
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d45a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d45ac:	f000 bdae 	b.w	d510c <network_off>
            spark_process();
   d45b0:	f000 fdd4 	bl	d515c <spark_process>
   d45b4:	e7ed      	b.n	d4592 <_Z20disconnectConnectionv+0x6>
   d45b6:	bf00      	nop
   d45b8:	2003e3e8 	.word	0x2003e3e8

000d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d45bc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d45be:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d45c0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d45c2:	b17c      	cbz	r4, d45e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d45c4:	6863      	ldr	r3, [r4, #4]
   d45c6:	3b01      	subs	r3, #1
   d45c8:	6063      	str	r3, [r4, #4]
   d45ca:	b95b      	cbnz	r3, d45e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d45cc:	6823      	ldr	r3, [r4, #0]
   d45ce:	4620      	mov	r0, r4
   d45d0:	689b      	ldr	r3, [r3, #8]
   d45d2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d45d4:	68a3      	ldr	r3, [r4, #8]
   d45d6:	3b01      	subs	r3, #1
   d45d8:	60a3      	str	r3, [r4, #8]
   d45da:	b91b      	cbnz	r3, d45e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d45dc:	6823      	ldr	r3, [r4, #0]
   d45de:	4620      	mov	r0, r4
   d45e0:	68db      	ldr	r3, [r3, #12]
   d45e2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d45e4:	4628      	mov	r0, r5
   d45e6:	bd38      	pop	{r3, r4, r5, pc}

000d45e8 <_Z13statusMessagev>:
  return true;
}

/****  Every version of code should contain a daily status message  ****/
void statusMessage()
{
   d45e8:	b530      	push	{r4, r5, lr}
   d45ea:	b0a5      	sub	sp, #148	; 0x94
  if (initConnection())
   d45ec:	f7ff ff20 	bl	d4430 <_Z14initConnectionv>
   d45f0:	2800      	cmp	r0, #0
   d45f2:	f000 80d0 	beq.w	d4796 <_Z13statusMessagev+0x1ae>
  {
        Particle.syncTime();
   d45f6:	f7ff fd5c 	bl	d40b2 <_ZN10CloudClass8syncTimeEv.isra.9>
    delay(2000);
   d45fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d45fe:	f001 fa4b 	bl	d5a98 <delay>
    CellularSignal sig = Cellular.RSSI();
   d4602:	4968      	ldr	r1, [pc, #416]	; (d47a4 <_Z13statusMessagev+0x1bc>)
   d4604:	a81a      	add	r0, sp, #104	; 0x68
   d4606:	f001 ff5f 	bl	d64c8 <_ZN5spark13CellularClass4RSSIEv>
    int rssi = sig.rssi;
   d460a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    Serial.println("RSSI: " + (String)rssi);
   d460c:	f001 ff06 	bl	d641c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4610:	4965      	ldr	r1, [pc, #404]	; (d47a8 <_Z13statusMessagev+0x1c0>)
   d4612:	4605      	mov	r5, r0
   d4614:	a816      	add	r0, sp, #88	; 0x58
   d4616:	f000 ff9c 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d461a:	220a      	movs	r2, #10
   d461c:	4621      	mov	r1, r4
   d461e:	a812      	add	r0, sp, #72	; 0x48
   d4620:	f001 f813 	bl	d564a <_ZN6StringC1Eih>
   d4624:	a912      	add	r1, sp, #72	; 0x48
   d4626:	a816      	add	r0, sp, #88	; 0x58
   d4628:	f001 f85f 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d462c:	6801      	ldr	r1, [r0, #0]
   d462e:	4628      	mov	r0, r5
   d4630:	f001 f98d 	bl	d594e <_ZN5Print7printlnEPKc>
   d4634:	a812      	add	r0, sp, #72	; 0x48
   d4636:	f000 ff45 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d463a:	a816      	add	r0, sp, #88	; 0x58
   d463c:	f000 ff42 	bl	d54c4 <_ZN6StringD1Ev>

    String message =  String(Time.now()) + ",Status,";
   d4640:	f001 fa18 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d4644:	220a      	movs	r2, #10
   d4646:	4601      	mov	r1, r0
   d4648:	a812      	add	r0, sp, #72	; 0x48
   d464a:	f001 f811 	bl	d5670 <_ZN6StringC1Elh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d464e:	a912      	add	r1, sp, #72	; 0x48
   d4650:	a816      	add	r0, sp, #88	; 0x58
   d4652:	f000 ffbd 	bl	d55d0 <_ZN6StringC1ERKS_>
   d4656:	4955      	ldr	r1, [pc, #340]	; (d47ac <_Z13statusMessagev+0x1c4>)
   d4658:	a816      	add	r0, sp, #88	; 0x58
   d465a:	f001 f852 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d465e:	4601      	mov	r1, r0
   d4660:	a802      	add	r0, sp, #8
   d4662:	f000 ffb5 	bl	d55d0 <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4666:	a816      	add	r0, sp, #88	; 0x58
   d4668:	f000 ff2c 	bl	d54c4 <_ZN6StringD1Ev>
   d466c:	a812      	add	r0, sp, #72	; 0x48
   d466e:	f000 ff29 	bl	d54c4 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4672:	494f      	ldr	r1, [pc, #316]	; (d47b0 <_Z13statusMessagev+0x1c8>)
   d4674:	a80a      	add	r0, sp, #40	; 0x28
   d4676:	f000 ff6c 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
    message += "li:" + (String)logInterval + ",si:" + (String)sendInterval + ",sm:" + (String)statusInterval + ",tm:" + (String)transmitMode;
   d467a:	4b4e      	ldr	r3, [pc, #312]	; (d47b4 <_Z13statusMessagev+0x1cc>)
   d467c:	220a      	movs	r2, #10
   d467e:	6819      	ldr	r1, [r3, #0]
   d4680:	a806      	add	r0, sp, #24
   d4682:	f000 ffe2 	bl	d564a <_ZN6StringC1Eih>
   d4686:	a906      	add	r1, sp, #24
   d4688:	a80a      	add	r0, sp, #40	; 0x28
   d468a:	f001 f82e 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d468e:	494a      	ldr	r1, [pc, #296]	; (d47b8 <_Z13statusMessagev+0x1d0>)
   d4690:	f001 f837 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d4694:	4b49      	ldr	r3, [pc, #292]	; (d47bc <_Z13statusMessagev+0x1d4>)
   d4696:	220a      	movs	r2, #10
   d4698:	6819      	ldr	r1, [r3, #0]
   d469a:	4605      	mov	r5, r0
   d469c:	a80e      	add	r0, sp, #56	; 0x38
   d469e:	f000 ffd4 	bl	d564a <_ZN6StringC1Eih>
   d46a2:	a90e      	add	r1, sp, #56	; 0x38
   d46a4:	4628      	mov	r0, r5
   d46a6:	f001 f820 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d46aa:	4945      	ldr	r1, [pc, #276]	; (d47c0 <_Z13statusMessagev+0x1d8>)
   d46ac:	f001 f829 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d46b0:	4b44      	ldr	r3, [pc, #272]	; (d47c4 <_Z13statusMessagev+0x1dc>)
   d46b2:	220a      	movs	r2, #10
   d46b4:	6819      	ldr	r1, [r3, #0]
   d46b6:	4605      	mov	r5, r0
   d46b8:	a812      	add	r0, sp, #72	; 0x48
   d46ba:	f000 ffc6 	bl	d564a <_ZN6StringC1Eih>
   d46be:	a912      	add	r1, sp, #72	; 0x48
   d46c0:	4628      	mov	r0, r5
   d46c2:	f001 f812 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d46c6:	4940      	ldr	r1, [pc, #256]	; (d47c8 <_Z13statusMessagev+0x1e0>)
   d46c8:	f001 f81b 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d46cc:	4b3f      	ldr	r3, [pc, #252]	; (d47cc <_Z13statusMessagev+0x1e4>)
   d46ce:	220a      	movs	r2, #10
   d46d0:	6819      	ldr	r1, [r3, #0]
   d46d2:	4605      	mov	r5, r0
   d46d4:	a816      	add	r0, sp, #88	; 0x58
   d46d6:	f000 ffb8 	bl	d564a <_ZN6StringC1Eih>
   d46da:	a916      	add	r1, sp, #88	; 0x58
   d46dc:	4628      	mov	r0, r5
   d46de:	f001 f804 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d46e2:	4601      	mov	r1, r0
   d46e4:	a802      	add	r0, sp, #8
   d46e6:	f000 ffed 	bl	d56c4 <_ZN6String6concatERKS_>
   d46ea:	a816      	add	r0, sp, #88	; 0x58
   d46ec:	f000 feea 	bl	d54c4 <_ZN6StringD1Ev>
   d46f0:	a812      	add	r0, sp, #72	; 0x48
   d46f2:	f000 fee7 	bl	d54c4 <_ZN6StringD1Ev>
   d46f6:	a80e      	add	r0, sp, #56	; 0x38
   d46f8:	f000 fee4 	bl	d54c4 <_ZN6StringD1Ev>
   d46fc:	a806      	add	r0, sp, #24
   d46fe:	f000 fee1 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4702:	a80a      	add	r0, sp, #40	; 0x28
   d4704:	f000 fede 	bl	d54c4 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4708:	4931      	ldr	r1, [pc, #196]	; (d47d0 <_Z13statusMessagev+0x1e8>)
   d470a:	a816      	add	r0, sp, #88	; 0x58
   d470c:	f000 ff21 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
    message += ",to:" + (String)timeout + ",ver:" + Version ;
   d4710:	4b30      	ldr	r3, [pc, #192]	; (d47d4 <_Z13statusMessagev+0x1ec>)
   d4712:	220a      	movs	r2, #10
   d4714:	6819      	ldr	r1, [r3, #0]
   d4716:	a812      	add	r0, sp, #72	; 0x48
   d4718:	f000 ff97 	bl	d564a <_ZN6StringC1Eih>
   d471c:	a912      	add	r1, sp, #72	; 0x48
   d471e:	a816      	add	r0, sp, #88	; 0x58
   d4720:	f000 ffe3 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4724:	492c      	ldr	r1, [pc, #176]	; (d47d8 <_Z13statusMessagev+0x1f0>)
   d4726:	f000 ffec 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d472a:	492c      	ldr	r1, [pc, #176]	; (d47dc <_Z13statusMessagev+0x1f4>)
   d472c:	f000 ffdd 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4730:	4601      	mov	r1, r0
   d4732:	a802      	add	r0, sp, #8
   d4734:	f000 ffc6 	bl	d56c4 <_ZN6String6concatERKS_>
   d4738:	a812      	add	r0, sp, #72	; 0x48
   d473a:	f000 fec3 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d473e:	a816      	add	r0, sp, #88	; 0x58
   d4740:	f000 fec0 	bl	d54c4 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4744:	4926      	ldr	r1, [pc, #152]	; (d47e0 <_Z13statusMessagev+0x1f8>)
   d4746:	a816      	add	r0, sp, #88	; 0x58
   d4748:	f000 ff03 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
    message +=  ", RSSI: " + (String)rssi;
   d474c:	220a      	movs	r2, #10
   d474e:	4621      	mov	r1, r4
   d4750:	a812      	add	r0, sp, #72	; 0x48
   d4752:	f000 ff7a 	bl	d564a <_ZN6StringC1Eih>
   d4756:	a912      	add	r1, sp, #72	; 0x48
   d4758:	a816      	add	r0, sp, #88	; 0x58
   d475a:	f000 ffc6 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d475e:	4601      	mov	r1, r0
   d4760:	a802      	add	r0, sp, #8
   d4762:	f000 ffaf 	bl	d56c4 <_ZN6String6concatERKS_>
   d4766:	a812      	add	r0, sp, #72	; 0x48
   d4768:	f000 feac 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d476c:	a816      	add	r0, sp, #88	; 0x58
   d476e:	f000 fea9 	bl	d54c4 <_ZN6StringD1Ev>
   d4772:	4b1c      	ldr	r3, [pc, #112]	; (d47e4 <_Z13statusMessagev+0x1fc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4774:	9a02      	ldr	r2, [sp, #8]
   d4776:	781b      	ldrb	r3, [r3, #0]
   d4778:	491b      	ldr	r1, [pc, #108]	; (d47e8 <_Z13statusMessagev+0x200>)
   d477a:	f88d 3000 	strb.w	r3, [sp]
   d477e:	a816      	add	r0, sp, #88	; 0x58
   d4780:	233c      	movs	r3, #60	; 0x3c
   d4782:	f001 fbf5 	bl	d5f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4786:	a817      	add	r0, sp, #92	; 0x5c
   d4788:	f7ff ff18 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Status", message, PRIVATE);

    disconnectConnection();
   d478c:	f7ff fefe 	bl	d458c <_Z20disconnectConnectionv>
    delay(2000);
    CellularSignal sig = Cellular.RSSI();
    int rssi = sig.rssi;
    Serial.println("RSSI: " + (String)rssi);

    String message =  String(Time.now()) + ",Status,";
   d4790:	a802      	add	r0, sp, #8
   d4792:	f000 fe97 	bl	d54c4 <_ZN6StringD1Ev>
    message +=  ", RSSI: " + (String)rssi;
    Particle.publish("Status", message, PRIVATE);

    disconnectConnection();
  }
  lastStatusMessage = Time.now() + 60;
   d4796:	f001 f96d 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d479a:	4b14      	ldr	r3, [pc, #80]	; (d47ec <_Z13statusMessagev+0x204>)
   d479c:	303c      	adds	r0, #60	; 0x3c
   d479e:	6018      	str	r0, [r3, #0]
}
   d47a0:	b025      	add	sp, #148	; 0x94
   d47a2:	bd30      	pop	{r4, r5, pc}
   d47a4:	2003e3e8 	.word	0x2003e3e8
   d47a8:	000d7190 	.word	0x000d7190
   d47ac:	000d7167 	.word	0x000d7167
   d47b0:	000d7170 	.word	0x000d7170
   d47b4:	2003e2b8 	.word	0x2003e2b8
   d47b8:	000d7174 	.word	0x000d7174
   d47bc:	2003e2c4 	.word	0x2003e2c4
   d47c0:	000d7179 	.word	0x000d7179
   d47c4:	2003e2c8 	.word	0x2003e2c8
   d47c8:	000d717e 	.word	0x000d717e
   d47cc:	2003e2bc 	.word	0x2003e2bc
   d47d0:	000d7183 	.word	0x000d7183
   d47d4:	2003e2ac 	.word	0x2003e2ac
   d47d8:	000d7188 	.word	0x000d7188
   d47dc:	2003e384 	.word	0x2003e384
   d47e0:	000d718e 	.word	0x000d718e
   d47e4:	2003e378 	.word	0x2003e378
   d47e8:	000d7157 	.word	0x000d7157
   d47ec:	2003e354 	.word	0x2003e354

000d47f0 <_Z15responseMessagev>:

/****  validate response to status by sending back new parameters  ****/
void responseMessage()
{
   d47f0:	b510      	push	{r4, lr}
   d47f2:	b09a      	sub	sp, #104	; 0x68
  if (initConnection())
   d47f4:	f7ff fe1c 	bl	d4430 <_Z14initConnectionv>
   d47f8:	2800      	cmp	r0, #0
   d47fa:	f000 808e 	beq.w	d491a <_Z15responseMessagev+0x12a>
  {
    String message =  String(Time.now()) + ",Reply,";
   d47fe:	f001 f939 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d4802:	220a      	movs	r2, #10
   d4804:	4601      	mov	r1, r0
   d4806:	a816      	add	r0, sp, #88	; 0x58
   d4808:	f000 ff32 	bl	d5670 <_ZN6StringC1Elh>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d480c:	a916      	add	r1, sp, #88	; 0x58
   d480e:	a812      	add	r0, sp, #72	; 0x48
   d4810:	f000 fede 	bl	d55d0 <_ZN6StringC1ERKS_>
   d4814:	4942      	ldr	r1, [pc, #264]	; (d4920 <_Z15responseMessagev+0x130>)
   d4816:	a812      	add	r0, sp, #72	; 0x48
   d4818:	f000 ff73 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d481c:	4601      	mov	r1, r0
   d481e:	a802      	add	r0, sp, #8
   d4820:	f000 fed6 	bl	d55d0 <_ZN6StringC1ERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4824:	a812      	add	r0, sp, #72	; 0x48
   d4826:	f000 fe4d 	bl	d54c4 <_ZN6StringD1Ev>
   d482a:	a816      	add	r0, sp, #88	; 0x58
   d482c:	f000 fe4a 	bl	d54c4 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4830:	493c      	ldr	r1, [pc, #240]	; (d4924 <_Z15responseMessagev+0x134>)
   d4832:	a806      	add	r0, sp, #24
   d4834:	f000 fe8d 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
    message += "li:" + (String)logInterval + ",si:" + (String)sendInterval + ",sm:" + (String)statusInterval + ",tm:" + (String)transmitMode;
   d4838:	4b3b      	ldr	r3, [pc, #236]	; (d4928 <_Z15responseMessagev+0x138>)
   d483a:	220a      	movs	r2, #10
   d483c:	6819      	ldr	r1, [r3, #0]
   d483e:	a80a      	add	r0, sp, #40	; 0x28
   d4840:	f000 ff03 	bl	d564a <_ZN6StringC1Eih>
   d4844:	a90a      	add	r1, sp, #40	; 0x28
   d4846:	a806      	add	r0, sp, #24
   d4848:	f000 ff4f 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d484c:	4937      	ldr	r1, [pc, #220]	; (d492c <_Z15responseMessagev+0x13c>)
   d484e:	f000 ff58 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d4852:	4b37      	ldr	r3, [pc, #220]	; (d4930 <_Z15responseMessagev+0x140>)
   d4854:	220a      	movs	r2, #10
   d4856:	6819      	ldr	r1, [r3, #0]
   d4858:	4604      	mov	r4, r0
   d485a:	a80e      	add	r0, sp, #56	; 0x38
   d485c:	f000 fef5 	bl	d564a <_ZN6StringC1Eih>
   d4860:	a90e      	add	r1, sp, #56	; 0x38
   d4862:	4620      	mov	r0, r4
   d4864:	f000 ff41 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4868:	4932      	ldr	r1, [pc, #200]	; (d4934 <_Z15responseMessagev+0x144>)
   d486a:	f000 ff4a 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d486e:	4b32      	ldr	r3, [pc, #200]	; (d4938 <_Z15responseMessagev+0x148>)
   d4870:	220a      	movs	r2, #10
   d4872:	6819      	ldr	r1, [r3, #0]
   d4874:	4604      	mov	r4, r0
   d4876:	a812      	add	r0, sp, #72	; 0x48
   d4878:	f000 fee7 	bl	d564a <_ZN6StringC1Eih>
   d487c:	a912      	add	r1, sp, #72	; 0x48
   d487e:	4620      	mov	r0, r4
   d4880:	f000 ff33 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4884:	492d      	ldr	r1, [pc, #180]	; (d493c <_Z15responseMessagev+0x14c>)
   d4886:	f000 ff3c 	bl	d5702 <_ZplRK15StringSumHelperPKc>
   d488a:	4b2d      	ldr	r3, [pc, #180]	; (d4940 <_Z15responseMessagev+0x150>)
   d488c:	220a      	movs	r2, #10
   d488e:	6819      	ldr	r1, [r3, #0]
   d4890:	4604      	mov	r4, r0
   d4892:	a816      	add	r0, sp, #88	; 0x58
   d4894:	f000 fed9 	bl	d564a <_ZN6StringC1Eih>
   d4898:	a916      	add	r1, sp, #88	; 0x58
   d489a:	4620      	mov	r0, r4
   d489c:	f000 ff25 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d48a0:	4601      	mov	r1, r0
   d48a2:	a802      	add	r0, sp, #8
   d48a4:	f000 ff0e 	bl	d56c4 <_ZN6String6concatERKS_>
   d48a8:	a816      	add	r0, sp, #88	; 0x58
   d48aa:	f000 fe0b 	bl	d54c4 <_ZN6StringD1Ev>
   d48ae:	a812      	add	r0, sp, #72	; 0x48
   d48b0:	f000 fe08 	bl	d54c4 <_ZN6StringD1Ev>
   d48b4:	a80e      	add	r0, sp, #56	; 0x38
   d48b6:	f000 fe05 	bl	d54c4 <_ZN6StringD1Ev>
   d48ba:	a80a      	add	r0, sp, #40	; 0x28
   d48bc:	f000 fe02 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d48c0:	a806      	add	r0, sp, #24
   d48c2:	f000 fdff 	bl	d54c4 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d48c6:	491f      	ldr	r1, [pc, #124]	; (d4944 <_Z15responseMessagev+0x154>)
   d48c8:	a812      	add	r0, sp, #72	; 0x48
   d48ca:	f000 fe42 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
    message += ",to:" + (String)timeout;
   d48ce:	4b1e      	ldr	r3, [pc, #120]	; (d4948 <_Z15responseMessagev+0x158>)
   d48d0:	220a      	movs	r2, #10
   d48d2:	6819      	ldr	r1, [r3, #0]
   d48d4:	a816      	add	r0, sp, #88	; 0x58
   d48d6:	f000 feb8 	bl	d564a <_ZN6StringC1Eih>
   d48da:	a916      	add	r1, sp, #88	; 0x58
   d48dc:	a812      	add	r0, sp, #72	; 0x48
   d48de:	f000 ff04 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d48e2:	4601      	mov	r1, r0
   d48e4:	a802      	add	r0, sp, #8
   d48e6:	f000 feed 	bl	d56c4 <_ZN6String6concatERKS_>
   d48ea:	a816      	add	r0, sp, #88	; 0x58
   d48ec:	f000 fdea 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d48f0:	a812      	add	r0, sp, #72	; 0x48
   d48f2:	f000 fde7 	bl	d54c4 <_ZN6StringD1Ev>
   d48f6:	4b15      	ldr	r3, [pc, #84]	; (d494c <_Z15responseMessagev+0x15c>)
   d48f8:	9a02      	ldr	r2, [sp, #8]
   d48fa:	781b      	ldrb	r3, [r3, #0]
   d48fc:	4914      	ldr	r1, [pc, #80]	; (d4950 <_Z15responseMessagev+0x160>)
   d48fe:	f88d 3000 	strb.w	r3, [sp]
   d4902:	a816      	add	r0, sp, #88	; 0x58
   d4904:	233c      	movs	r3, #60	; 0x3c
   d4906:	f001 fb33 	bl	d5f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d490a:	a817      	add	r0, sp, #92	; 0x5c
   d490c:	f7ff fe56 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("Counter", message, PRIVATE);
    disconnectConnection();
   d4910:	f7ff fe3c 	bl	d458c <_Z20disconnectConnectionv>
/****  validate response to status by sending back new parameters  ****/
void responseMessage()
{
  if (initConnection())
  {
    String message =  String(Time.now()) + ",Reply,";
   d4914:	a802      	add	r0, sp, #8
   d4916:	f000 fdd5 	bl	d54c4 <_ZN6StringD1Ev>
    message += "li:" + (String)logInterval + ",si:" + (String)sendInterval + ",sm:" + (String)statusInterval + ",tm:" + (String)transmitMode;
    message += ",to:" + (String)timeout;
    Particle.publish("Counter", message, PRIVATE);
    disconnectConnection();
  }
}
   d491a:	b01a      	add	sp, #104	; 0x68
   d491c:	bd10      	pop	{r4, pc}
   d491e:	bf00      	nop
   d4920:	000d7197 	.word	0x000d7197
   d4924:	000d7170 	.word	0x000d7170
   d4928:	2003e2b8 	.word	0x2003e2b8
   d492c:	000d7174 	.word	0x000d7174
   d4930:	2003e2c4 	.word	0x2003e2c4
   d4934:	000d7179 	.word	0x000d7179
   d4938:	2003e2c8 	.word	0x2003e2c8
   d493c:	000d717e 	.word	0x000d717e
   d4940:	2003e2bc 	.word	0x2003e2bc
   d4944:	000d7183 	.word	0x000d7183
   d4948:	2003e2ac 	.word	0x2003e2ac
   d494c:	2003e378 	.word	0x2003e378
   d4950:	000d719f 	.word	0x000d719f

000d4954 <_Z15responseHandlerPKcS0_>:
  initSyncTime();
  prevTime = Time.now();         
  Particle.subscribe(System.deviceID() + "/hook-response/Status", responseHandler, MY_DEVICES);
  Serial.println("Starting");
}
void responseHandler(const char *event, const char *data) {
   d4954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  parseString(data);
   d4956:	4668      	mov	r0, sp
   d4958:	f000 fdfb 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d495c:	4668      	mov	r0, sp
   d495e:	f7ff fcb3 	bl	d42c8 <_Z11parseString6String>
   d4962:	4668      	mov	r0, sp
   d4964:	f000 fdae 	bl	d54c4 <_ZN6StringD1Ev>
   responseMessage();
   d4968:	f7ff ff42 	bl	d47f0 <_Z15responseMessagev>
}
   d496c:	b005      	add	sp, #20
   d496e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4974 <_Z12debugMessage6String>:
    disconnectConnection();
  }
}

void debugMessage(String message)
{
   d4974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (debug) {
   d4976:	4b0c      	ldr	r3, [pc, #48]	; (d49a8 <_Z12debugMessage6String+0x34>)
   d4978:	781b      	ldrb	r3, [r3, #0]
    disconnectConnection();
  }
}

void debugMessage(String message)
{
   d497a:	4604      	mov	r4, r0
  if (debug) {
   d497c:	b18b      	cbz	r3, d49a2 <_Z12debugMessage6String+0x2e>
    if (initConnection())
   d497e:	f7ff fd57 	bl	d4430 <_Z14initConnectionv>
   d4982:	b170      	cbz	r0, d49a2 <_Z12debugMessage6String+0x2e>
   d4984:	4b09      	ldr	r3, [pc, #36]	; (d49ac <_Z12debugMessage6String+0x38>)
   d4986:	6822      	ldr	r2, [r4, #0]
   d4988:	781b      	ldrb	r3, [r3, #0]
   d498a:	f88d 3000 	strb.w	r3, [sp]
   d498e:	4908      	ldr	r1, [pc, #32]	; (d49b0 <_Z12debugMessage6String+0x3c>)
   d4990:	233c      	movs	r3, #60	; 0x3c
   d4992:	a802      	add	r0, sp, #8
   d4994:	f001 faec 	bl	d5f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4998:	a803      	add	r0, sp, #12
   d499a:	f7ff fe0f 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    {

      Particle.publish("Counter", message, PRIVATE);
      disconnectConnection();
   d499e:	f7ff fdf5 	bl	d458c <_Z20disconnectConnectionv>
    }
  }
}
   d49a2:	b004      	add	sp, #16
   d49a4:	bd10      	pop	{r4, pc}
   d49a6:	bf00      	nop
   d49a8:	2003e350 	.word	0x2003e350
   d49ac:	2003e378 	.word	0x2003e378
   d49b0:	000d719f 	.word	0x000d719f

000d49b4 <loop>:

void loop()
{
   d49b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d49b8:	b097      	sub	sp, #92	; 0x5c
  currentTime = Time.now();
   d49ba:	f001 f85b 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d49be:	4fa1      	ldr	r7, [pc, #644]	; (d4c44 <loop+0x290>)
  String wakeupFrom = "RTC";
   d49c0:	49a1      	ldr	r1, [pc, #644]	; (d4c48 <loop+0x294>)
  }
}

void loop()
{
  currentTime = Time.now();
   d49c2:	6038      	str	r0, [r7, #0]
  String wakeupFrom = "RTC";
   d49c4:	a806      	add	r0, sp, #24
   d49c6:	f000 fdc4 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
        //         // Woken up from standby mode
        //         sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
        //     }
        // });
        static bool f = false;
        if (!f) {
   d49ca:	4ba0      	ldr	r3, [pc, #640]	; (d4c4c <loop+0x298>)
   d49cc:	4ca0      	ldr	r4, [pc, #640]	; (d4c50 <loop+0x29c>)
   d49ce:	781d      	ldrb	r5, [r3, #0]
   d49d0:	b97d      	cbnz	r5, d49f2 <loop+0x3e>
            f = true;
   d49d2:	2201      	movs	r2, #1
   d49d4:	701a      	strb	r2, [r3, #0]
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d49d6:	4629      	mov	r1, r5
   d49d8:	462a      	mov	r2, r5
   d49da:	a812      	add	r0, sp, #72	; 0x48
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
   d49dc:	9512      	str	r5, [sp, #72]	; 0x48
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
   d49de:	f000 fa2f 	bl	d4e40 <HAL_Core_Get_Last_Reset_Info>
        return reason;
   d49e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
        //     }
        // });
        static bool f = false;
        if (!f) {
            f = true;
            if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
   d49e4:	2b1e      	cmp	r3, #30
   d49e6:	d104      	bne.n	d49f2 <loop+0x3e>
                // Woken up from standby mode
                sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
   d49e8:	2303      	movs	r3, #3
   d49ea:	7023      	strb	r3, [r4, #0]
   d49ec:	2308      	movs	r3, #8
   d49ee:	8065      	strh	r5, [r4, #2]
   d49f0:	80a3      	strh	r3, [r4, #4]
            }
        }
        return sleepResult_;
   d49f2:	6820      	ldr	r0, [r4, #0]
   d49f4:	88a3      	ldrh	r3, [r4, #4]
   d49f6:	9004      	str	r0, [sp, #16]
  SleepResult result = System.sleepResult();
  boolean sendingStatus = false;

  /*******  Check if wakeup pin has tripped by using wokenUpByRtc...  wokenByPin is unreliable *******/
  if (!result.wokenUpByRtc() && !booting) {
   d49f8:	a804      	add	r0, sp, #16
   d49fa:	f8ad 3014 	strh.w	r3, [sp, #20]
   d49fe:	f000 fcbf 	bl	d5380 <_ZNK11SleepResult12wokenUpByRtcEv>
   d4a02:	4c94      	ldr	r4, [pc, #592]	; (d4c54 <loop+0x2a0>)
   d4a04:	b918      	cbnz	r0, d4a0e <loop+0x5a>
   d4a06:	7823      	ldrb	r3, [r4, #0]
   d4a08:	2b00      	cmp	r3, #0
   d4a0a:	f000 810e 	beq.w	d4c2a <loop+0x276>
  }

  booting = false;

  /******* Check if status message is due  *****/
  if (lastStatusMessage + (60 * statusInterval) < Time.now() )
   d4a0e:	4b92      	ldr	r3, [pc, #584]	; (d4c58 <loop+0x2a4>)
   d4a10:	4a92      	ldr	r2, [pc, #584]	; (d4c5c <loop+0x2a8>)
   d4a12:	681b      	ldr	r3, [r3, #0]
   d4a14:	6812      	ldr	r2, [r2, #0]
    tripCount++;
    wakeupFrom = "PIN";
    delay(200);
  }

  booting = false;
   d4a16:	2600      	movs	r6, #0
   d4a18:	7026      	strb	r6, [r4, #0]

  /******* Check if status message is due  *****/
  if (lastStatusMessage + (60 * statusInterval) < Time.now() )
   d4a1a:	243c      	movs	r4, #60	; 0x3c
   d4a1c:	fb04 2403 	mla	r4, r4, r3, r2
   d4a20:	f001 f828 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d4a24:	4284      	cmp	r4, r0
   d4a26:	da02      	bge.n	d4a2e <loop+0x7a>
  {
    statusMessage();
   d4a28:	f7ff fdde 	bl	d45e8 <_Z13statusMessagev>
    sendingStatus = true;
   d4a2c:	2601      	movs	r6, #1
  }

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
   d4a2e:	f8df 9280 	ldr.w	r9, [pc, #640]	; d4cb0 <loop+0x2fc>
   d4a32:	4c8b      	ldr	r4, [pc, #556]	; (d4c60 <loop+0x2ac>)
   d4a34:	683b      	ldr	r3, [r7, #0]
   d4a36:	f8d9 2000 	ldr.w	r2, [r9]
   d4a3a:	6821      	ldr	r1, [r4, #0]
   d4a3c:	1a9a      	subs	r2, r3, r2
   d4a3e:	233c      	movs	r3, #60	; 0x3c
   d4a40:	434b      	muls	r3, r1
   d4a42:	429a      	cmp	r2, r3
   d4a44:	f2c0 8096 	blt.w	d4b74 <loop+0x1c0>
  {
    payload += "," + (String)tripCount;
   d4a48:	f8df 8260 	ldr.w	r8, [pc, #608]	; d4cac <loop+0x2f8>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4a4c:	4985      	ldr	r1, [pc, #532]	; (d4c64 <loop+0x2b0>)
    samplesLogged++;
   d4a4e:	4d86      	ldr	r5, [pc, #536]	; (d4c68 <loop+0x2b4>)
    prevTime = currentTime;

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1 && tripCount > 0 )) && !sendingStatus)
   d4a50:	4f86      	ldr	r7, [pc, #536]	; (d4c6c <loop+0x2b8>)
   d4a52:	a812      	add	r0, sp, #72	; 0x48
   d4a54:	f000 fd7d 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
  }

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    payload += "," + (String)tripCount;
   d4a58:	220a      	movs	r2, #10
   d4a5a:	f8d8 1000 	ldr.w	r1, [r8]
   d4a5e:	a80e      	add	r0, sp, #56	; 0x38
   d4a60:	f000 fdf3 	bl	d564a <_ZN6StringC1Eih>
   d4a64:	a90e      	add	r1, sp, #56	; 0x38
   d4a66:	a812      	add	r0, sp, #72	; 0x48
   d4a68:	f000 fe3f 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4a6c:	4601      	mov	r1, r0
   d4a6e:	4880      	ldr	r0, [pc, #512]	; (d4c70 <loop+0x2bc>)
   d4a70:	f000 fe28 	bl	d56c4 <_ZN6String6concatERKS_>
   d4a74:	a80e      	add	r0, sp, #56	; 0x38
   d4a76:	f000 fd25 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4a7a:	a812      	add	r0, sp, #72	; 0x48
   d4a7c:	f000 fd22 	bl	d54c4 <_ZN6StringD1Ev>
    samplesLogged++;
    prevTime = currentTime;
   d4a80:	4a70      	ldr	r2, [pc, #448]	; (d4c44 <loop+0x290>)

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    payload += "," + (String)tripCount;
    samplesLogged++;
   d4a82:	682b      	ldr	r3, [r5, #0]
    prevTime = currentTime;
   d4a84:	6812      	ldr	r2, [r2, #0]
   d4a86:	f8c9 2000 	str.w	r2, [r9]

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1 && tripCount > 0 )) && !sendingStatus)
   d4a8a:	4a7a      	ldr	r2, [pc, #488]	; (d4c74 <loop+0x2c0>)
   d4a8c:	6811      	ldr	r1, [r2, #0]
   d4a8e:	683a      	ldr	r2, [r7, #0]

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    payload += "," + (String)tripCount;
    samplesLogged++;
   d4a90:	3301      	adds	r3, #1
    prevTime = currentTime;

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1 && tripCount > 0 )) && !sendingStatus)
   d4a92:	434a      	muls	r2, r1
   d4a94:	4293      	cmp	r3, r2

  /*********   Take sample *************/
  if (currentTime - prevTime >= (logInterval * 60)) 
  {
    payload += "," + (String)tripCount;
    samplesLogged++;
   d4a96:	602b      	str	r3, [r5, #0]
    prevTime = currentTime;

    if (((samplesLogged >= (sendInterval * sendAttempts)) || (transmitMode == 1 && tripCount > 0 )) && !sendingStatus)
   d4a98:	da07      	bge.n	d4aaa <loop+0xf6>
   d4a9a:	4b77      	ldr	r3, [pc, #476]	; (d4c78 <loop+0x2c4>)
   d4a9c:	681b      	ldr	r3, [r3, #0]
   d4a9e:	2b01      	cmp	r3, #1
   d4aa0:	d165      	bne.n	d4b6e <loop+0x1ba>
   d4aa2:	f8d8 3000 	ldr.w	r3, [r8]
   d4aa6:	2b00      	cmp	r3, #0
   d4aa8:	dd61      	ble.n	d4b6e <loop+0x1ba>
   d4aaa:	2e00      	cmp	r6, #0
   d4aac:	d15f      	bne.n	d4b6e <loop+0x1ba>
    {
      if (initConnection())
   d4aae:	f7ff fcbf 	bl	d4430 <_Z14initConnectionv>
   d4ab2:	2800      	cmp	r0, #0
   d4ab4:	d058      	beq.n	d4b68 <loop+0x1b4>
      {
        totalPayload = String(Time.now()-(60*logInterval*(samplesLogged-1)));
   d4ab6:	f000 ffdd 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d4aba:	682a      	ldr	r2, [r5, #0]
   d4abc:	6821      	ldr	r1, [r4, #0]
   d4abe:	4f6f      	ldr	r7, [pc, #444]	; (d4c7c <loop+0x2c8>)
   d4ac0:	f04f 093c 	mov.w	r9, #60	; 0x3c
   d4ac4:	1e53      	subs	r3, r2, #1
   d4ac6:	fb09 f101 	mul.w	r1, r9, r1
   d4aca:	fb03 0111 	mls	r1, r3, r1, r0
   d4ace:	220a      	movs	r2, #10
   d4ad0:	a812      	add	r0, sp, #72	; 0x48
   d4ad2:	f000 fdcd 	bl	d5670 <_ZN6StringC1Elh>
   d4ad6:	a912      	add	r1, sp, #72	; 0x48
   d4ad8:	4638      	mov	r0, r7
   d4ada:	f000 fd84 	bl	d55e6 <_ZN6StringaSEOS_>
   d4ade:	a812      	add	r0, sp, #72	; 0x48
   d4ae0:	f000 fcf0 	bl	d54c4 <_ZN6StringD1Ev>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   d4ae4:	4966      	ldr	r1, [pc, #408]	; (d4c80 <loop+0x2cc>)
   d4ae6:	4638      	mov	r0, r7
   d4ae8:	f000 fdf0 	bl	d56cc <_ZN6String6concatEPKc>
        totalPayload += ",1043,";
        totalPayload += String(logInterval);
   d4aec:	220a      	movs	r2, #10
   d4aee:	6821      	ldr	r1, [r4, #0]
   d4af0:	a812      	add	r0, sp, #72	; 0x48
   d4af2:	f000 fdaa 	bl	d564a <_ZN6StringC1Eih>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4af6:	a912      	add	r1, sp, #72	; 0x48
   d4af8:	4638      	mov	r0, r7
   d4afa:	f000 fde3 	bl	d56c4 <_ZN6String6concatERKS_>
   d4afe:	a812      	add	r0, sp, #72	; 0x48
   d4b00:	f000 fce0 	bl	d54c4 <_ZN6StringD1Ev>
   d4b04:	495a      	ldr	r1, [pc, #360]	; (d4c70 <loop+0x2bc>)
   d4b06:	4638      	mov	r0, r7
   d4b08:	f000 fddc 	bl	d56c4 <_ZN6String6concatERKS_>
   d4b0c:	4b5d      	ldr	r3, [pc, #372]	; (d4c84 <loop+0x2d0>)
   d4b0e:	495e      	ldr	r1, [pc, #376]	; (d4c88 <loop+0x2d4>)
   d4b10:	781b      	ldrb	r3, [r3, #0]
   d4b12:	f88d 3000 	strb.w	r3, [sp]
   d4b16:	683a      	ldr	r2, [r7, #0]
   d4b18:	464b      	mov	r3, r9
   d4b1a:	a812      	add	r0, sp, #72	; 0x48
   d4b1c:	f001 fa28 	bl	d5f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4b20:	a813      	add	r0, sp, #76	; 0x4c
   d4b22:	f7ff fd4b 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        totalPayload += payload;
        Particle.publish("Counter", totalPayload, PRIVATE);
        Serial.println("totalPayload: " + (String)totalPayload);
   d4b26:	f001 fc79 	bl	d641c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4b2a:	4958      	ldr	r1, [pc, #352]	; (d4c8c <loop+0x2d8>)
   d4b2c:	4681      	mov	r9, r0
   d4b2e:	a812      	add	r0, sp, #72	; 0x48
   d4b30:	f000 fd0f 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4b34:	4639      	mov	r1, r7
   d4b36:	a80e      	add	r0, sp, #56	; 0x38
   d4b38:	f000 fd4a 	bl	d55d0 <_ZN6StringC1ERKS_>
   d4b3c:	a90e      	add	r1, sp, #56	; 0x38
   d4b3e:	a812      	add	r0, sp, #72	; 0x48
   d4b40:	f000 fdd3 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4b44:	6801      	ldr	r1, [r0, #0]
   d4b46:	4648      	mov	r0, r9
   d4b48:	f000 ff01 	bl	d594e <_ZN5Print7printlnEPKc>
   d4b4c:	a80e      	add	r0, sp, #56	; 0x38
   d4b4e:	f000 fcb9 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4b52:	a812      	add	r0, sp, #72	; 0x48
   d4b54:	f000 fcb6 	bl	d54c4 <_ZN6StringD1Ev>
        payload = "";
   d4b58:	494d      	ldr	r1, [pc, #308]	; (d4c90 <loop+0x2dc>)
   d4b5a:	4845      	ldr	r0, [pc, #276]	; (d4c70 <loop+0x2bc>)
   d4b5c:	f000 fd53 	bl	d5606 <_ZN6StringaSEPKc>
        samplesLogged = 0;
   d4b60:	602e      	str	r6, [r5, #0]
        disconnectConnection();
   d4b62:	f7ff fd13 	bl	d458c <_Z20disconnectConnectionv>
   d4b66:	e002      	b.n	d4b6e <loop+0x1ba>
      }
      else
      {
        sendAttempts++;
   d4b68:	683b      	ldr	r3, [r7, #0]
   d4b6a:	3301      	adds	r3, #1
   d4b6c:	603b      	str	r3, [r7, #0]
      }
    }    
    tripCount = 0;
   d4b6e:	2300      	movs	r3, #0
   d4b70:	f8c8 3000 	str.w	r3, [r8]
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4b74:	4947      	ldr	r1, [pc, #284]	; (d4c94 <loop+0x2e0>)
   d4b76:	4f48      	ldr	r7, [pc, #288]	; (d4c98 <loop+0x2e4>)
   d4b78:	4e48      	ldr	r6, [pc, #288]	; (d4c9c <loop+0x2e8>)
   d4b7a:	a806      	add	r0, sp, #24
   d4b7c:	f000 fdd3 	bl	d5726 <_ZNK6String6equalsEPKc>
  }

  /********  Good night!  ************/
      
     if (wakeupFrom == "PIN")
   d4b80:	2800      	cmp	r0, #0
   d4b82:	d02f      	beq.n	d4be4 <loop+0x230>
     {       // Back to sleep for remainder of normal log interval
      int sleepRemainder = (logInterval * 60) - (Time.now() - sleepTime);
   d4b84:	6824      	ldr	r4, [r4, #0]
   d4b86:	233c      	movs	r3, #60	; 0x3c
   d4b88:	fb03 f504 	mul.w	r5, r3, r4
   d4b8c:	f000 ff72 	bl	d5a74 <_ZN9TimeClass3nowEv>
   d4b90:	683c      	ldr	r4, [r7, #0]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4b92:	4943      	ldr	r1, [pc, #268]	; (d4ca0 <loop+0x2ec>)
   d4b94:	1b00      	subs	r0, r0, r4
   d4b96:	1a2c      	subs	r4, r5, r0
   d4b98:	a80e      	add	r0, sp, #56	; 0x38
   d4b9a:	f000 fcda 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
      debugMessage("Sleep from Pin Wake: " + (String)sleepRemainder);
   d4b9e:	220a      	movs	r2, #10
   d4ba0:	4621      	mov	r1, r4
   d4ba2:	a80a      	add	r0, sp, #40	; 0x28
   d4ba4:	f000 fd51 	bl	d564a <_ZN6StringC1Eih>
   d4ba8:	a90a      	add	r1, sp, #40	; 0x28
   d4baa:	a80e      	add	r0, sp, #56	; 0x38
   d4bac:	f000 fd9d 	bl	d56ea <_ZplRK15StringSumHelperRK6String>
   d4bb0:	4601      	mov	r1, r0
   d4bb2:	a812      	add	r0, sp, #72	; 0x48
   d4bb4:	f000 fd0c 	bl	d55d0 <_ZN6StringC1ERKS_>
   d4bb8:	a812      	add	r0, sp, #72	; 0x48
   d4bba:	f7ff fedb 	bl	d4974 <_Z12debugMessage6String>
   d4bbe:	a812      	add	r0, sp, #72	; 0x48
   d4bc0:	f000 fc80 	bl	d54c4 <_ZN6StringD1Ev>
   d4bc4:	a80a      	add	r0, sp, #40	; 0x28
   d4bc6:	f000 fc7d 	bl	d54c4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4bca:	a80e      	add	r0, sp, #56	; 0x38
   d4bcc:	f000 fc7a 	bl	d54c4 <_ZN6StringD1Ev>
   d4bd0:	2202      	movs	r2, #2
   d4bd2:	6833      	ldr	r3, [r6, #0]
   d4bd4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    /*
     * wakeup pins: pin_t* + size_t
     * trigger mode: single InterruptMode
     */
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, InterruptMode edgeTriggerMode, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) {
        return sleepPinImpl(pins, pinsSize, &edgeTriggerMode, 1, seconds, flag);
   d4bd8:	2201      	movs	r2, #1
   d4bda:	9302      	str	r3, [sp, #8]
   d4bdc:	9401      	str	r4, [sp, #4]
   d4bde:	9200      	str	r2, [sp, #0]
   d4be0:	ab0a      	add	r3, sp, #40	; 0x28
   d4be2:	e018      	b.n	d4c16 <loop+0x262>
      System.sleep(wakeUpPins,1,FALLING, sleepRemainder);
     }
     
    else
    {
      sleepTime = Time.now();
   d4be4:	f000 ff46 	bl	d5a74 <_ZN9TimeClass3nowEv>
      debugMessage("Normal sleep");
   d4be8:	492e      	ldr	r1, [pc, #184]	; (d4ca4 <loop+0x2f0>)
      System.sleep(wakeUpPins,1,FALLING, sleepRemainder);
     }
     
    else
    {
      sleepTime = Time.now();
   d4bea:	6038      	str	r0, [r7, #0]
      debugMessage("Normal sleep");
   d4bec:	a812      	add	r0, sp, #72	; 0x48
   d4bee:	f000 fcb0 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4bf2:	a812      	add	r0, sp, #72	; 0x48
   d4bf4:	f7ff febe 	bl	d4974 <_Z12debugMessage6String>
   d4bf8:	a812      	add	r0, sp, #72	; 0x48
   d4bfa:	f000 fc63 	bl	d54c4 <_ZN6StringD1Ev>
      System.sleep(wakeUpPins,1,FALLING,logInterval * 60);
   d4bfe:	6822      	ldr	r2, [r4, #0]
   d4c00:	233c      	movs	r3, #60	; 0x3c
   d4c02:	4353      	muls	r3, r2
   d4c04:	6832      	ldr	r2, [r6, #0]
   d4c06:	9202      	str	r2, [sp, #8]
   d4c08:	2102      	movs	r1, #2
   d4c0a:	2201      	movs	r2, #1
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   d4c12:	9200      	str	r2, [sp, #0]
   d4c14:	ab0e      	add	r3, sp, #56	; 0x38
   d4c16:	4924      	ldr	r1, [pc, #144]	; (d4ca8 <loop+0x2f4>)
   d4c18:	a812      	add	r0, sp, #72	; 0x48
   d4c1a:	f000 fb8b 	bl	d5334 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
}

void loop()
{
  currentTime = Time.now();
  String wakeupFrom = "RTC";
   d4c1e:	a806      	add	r0, sp, #24
   d4c20:	f000 fc50 	bl	d54c4 <_ZN6StringD1Ev>
      sleepTime = Time.now();
      debugMessage("Normal sleep");
      System.sleep(wakeUpPins,1,FALLING,logInterval * 60);
    }
    
}
   d4c24:	b017      	add	sp, #92	; 0x5c
   d4c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  SleepResult result = System.sleepResult();
  boolean sendingStatus = false;

  /*******  Check if wakeup pin has tripped by using wokenUpByRtc...  wokenByPin is unreliable *******/
  if (!result.wokenUpByRtc() && !booting) {
    tripCount++;
   d4c2a:	4a20      	ldr	r2, [pc, #128]	; (d4cac <loop+0x2f8>)
    wakeupFrom = "PIN";
   d4c2c:	4919      	ldr	r1, [pc, #100]	; (d4c94 <loop+0x2e0>)
  SleepResult result = System.sleepResult();
  boolean sendingStatus = false;

  /*******  Check if wakeup pin has tripped by using wokenUpByRtc...  wokenByPin is unreliable *******/
  if (!result.wokenUpByRtc() && !booting) {
    tripCount++;
   d4c2e:	6813      	ldr	r3, [r2, #0]
    wakeupFrom = "PIN";
   d4c30:	a806      	add	r0, sp, #24
  SleepResult result = System.sleepResult();
  boolean sendingStatus = false;

  /*******  Check if wakeup pin has tripped by using wokenUpByRtc...  wokenByPin is unreliable *******/
  if (!result.wokenUpByRtc() && !booting) {
    tripCount++;
   d4c32:	3301      	adds	r3, #1
   d4c34:	6013      	str	r3, [r2, #0]
    wakeupFrom = "PIN";
   d4c36:	f000 fce6 	bl	d5606 <_ZN6StringaSEPKc>
    delay(200);
   d4c3a:	20c8      	movs	r0, #200	; 0xc8
   d4c3c:	f000 ff2c 	bl	d5a98 <delay>
   d4c40:	e6e5      	b.n	d4a0e <loop+0x5a>
   d4c42:	bf00      	nop
   d4c44:	2003e39c 	.word	0x2003e39c
   d4c48:	000d71a7 	.word	0x000d71a7
   d4c4c:	2003e33c 	.word	0x2003e33c
   d4c50:	2003e3a8 	.word	0x2003e3a8
   d4c54:	2003e2b4 	.word	0x2003e2b4
   d4c58:	2003e2c8 	.word	0x2003e2c8
   d4c5c:	2003e354 	.word	0x2003e354
   d4c60:	2003e2b8 	.word	0x2003e2b8
   d4c64:	000d71b0 	.word	0x000d71b0
   d4c68:	2003e370 	.word	0x2003e370
   d4c6c:	2003e2c0 	.word	0x2003e2c0
   d4c70:	2003e340 	.word	0x2003e340
   d4c74:	2003e2c4 	.word	0x2003e2c4
   d4c78:	2003e2bc 	.word	0x2003e2bc
   d4c7c:	2003e360 	.word	0x2003e360
   d4c80:	000d71ab 	.word	0x000d71ab
   d4c84:	2003e378 	.word	0x2003e378
   d4c88:	000d719f 	.word	0x000d719f
   d4c8c:	000d71b2 	.word	0x000d71b2
   d4c90:	000d72db 	.word	0x000d72db
   d4c94:	000d71c1 	.word	0x000d71c1
   d4c98:	2003e394 	.word	0x2003e394
   d4c9c:	2003e380 	.word	0x2003e380
   d4ca0:	000d71c5 	.word	0x000d71c5
   d4ca4:	000d71db 	.word	0x000d71db
   d4ca8:	2003e2b6 	.word	0x2003e2b6
   d4cac:	2003e374 	.word	0x2003e374
   d4cb0:	2003e37c 	.word	0x2003e37c

000d4cb4 <_GLOBAL__sub_I_Version>:
void disconnectConnection()
{
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d4cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4cb8:	4b23      	ldr	r3, [pc, #140]	; (d4d48 <_GLOBAL__sub_I_Version+0x94>)
1.1.1- Change pin type from INPUT_PULLDOWN to INPUT to try and block invalid trips
1.1.2- Added timesync with each status message


*/
String Version = "1.1.2";
   d4cba:	f8df 80a4 	ldr.w	r8, [pc, #164]	; d4d60 <_GLOBAL__sub_I_Version+0xac>
   d4cbe:	4e23      	ldr	r6, [pc, #140]	; (d4d4c <_GLOBAL__sub_I_Version+0x98>)
   d4cc0:	4d23      	ldr	r5, [pc, #140]	; (d4d50 <_GLOBAL__sub_I_Version+0x9c>)
long int prevTime;
long int currentTime;
long int sleepTime;
int tripCount = 0;         
int samplesLogged = 0;
String payload;
   d4cc2:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d4d64 <_GLOBAL__sub_I_Version+0xb0>
   d4cc6:	2400      	movs	r4, #0
   d4cc8:	601c      	str	r4, [r3, #0]
   d4cca:	4b22      	ldr	r3, [pc, #136]	; (d4d54 <_GLOBAL__sub_I_Version+0xa0>)
   d4ccc:	2701      	movs	r7, #1
   d4cce:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4cd0:	f000 f85e 	bl	d4d90 <HAL_Pin_Map>
1.1.1- Change pin type from INPUT_PULLDOWN to INPUT to try and block invalid trips
1.1.2- Added timesync with each status message


*/
String Version = "1.1.2";
   d4cd4:	4920      	ldr	r1, [pc, #128]	; (d4d58 <_GLOBAL__sub_I_Version+0xa4>)
   d4cd6:	4640      	mov	r0, r8
   d4cd8:	f000 fc3b 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4cdc:	4640      	mov	r0, r8
long int prevTime;
long int currentTime;
long int sleepTime;
int tripCount = 0;         
int samplesLogged = 0;
String payload;
   d4cde:	f8df 8088 	ldr.w	r8, [pc, #136]	; d4d68 <_GLOBAL__sub_I_Version+0xb4>
1.1.1- Change pin type from INPUT_PULLDOWN to INPUT to try and block invalid trips
1.1.2- Added timesync with each status message


*/
String Version = "1.1.2";
   d4ce2:	4632      	mov	r2, r6
   d4ce4:	4629      	mov	r1, r5
   d4ce6:	f001 ff17 	bl	d6b18 <__aeabi_atexit>
long int prevTime;
long int currentTime;
long int sleepTime;
int tripCount = 0;         
int samplesLogged = 0;
String payload;
   d4cea:	4649      	mov	r1, r9
   d4cec:	4640      	mov	r0, r8
   d4cee:	f000 fc30 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4cf2:	4640      	mov	r0, r8
String totalPayload;
   d4cf4:	f8df 8074 	ldr.w	r8, [pc, #116]	; d4d6c <_GLOBAL__sub_I_Version+0xb8>
long int prevTime;
long int currentTime;
long int sleepTime;
int tripCount = 0;         
int samplesLogged = 0;
String payload;
   d4cf8:	4632      	mov	r2, r6
   d4cfa:	4629      	mov	r1, r5
   d4cfc:	f001 ff0c 	bl	d6b18 <__aeabi_atexit>
String totalPayload;
   d4d00:	4649      	mov	r1, r9
   d4d02:	4640      	mov	r0, r8
   d4d04:	f000 fc25 	bl	d5552 <_ZN6StringC1EPK19__FlashStringHelper>
   d4d08:	4632      	mov	r2, r6
   d4d0a:	4629      	mov	r1, r5
   d4d0c:	4640      	mov	r0, r8
   d4d0e:	f001 ff03 	bl	d6b18 <__aeabi_atexit>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4d12:	f001 fe59 	bl	d69c8 <spark_protocol_instance>
   d4d16:	4623      	mov	r3, r4
   d4d18:	4622      	mov	r2, r4
   d4d1a:	f642 117a 	movw	r1, #10618	; 0x297a
   d4d1e:	f001 fe5b 	bl	d69d8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4d22:	f001 fe51 	bl	d69c8 <spark_protocol_instance>
   d4d26:	4623      	mov	r3, r4
   d4d28:	4622      	mov	r2, r4
   d4d2a:	4639      	mov	r1, r7
   d4d2c:	f001 fe5c 	bl	d69e8 <spark_protocol_set_product_firmware_version>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4d30:	4b0a      	ldr	r3, [pc, #40]	; (d4d5c <_GLOBAL__sub_I_Version+0xa8>)
   d4d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4d36:	701c      	strb	r4, [r3, #0]
   d4d38:	805c      	strh	r4, [r3, #2]
   d4d3a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d3c:	2003      	movs	r0, #3
void disconnectConnection()
{
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d4d3e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4d42:	f000 b975 	b.w	d5030 <set_system_mode>
   d4d46:	bf00      	nop
   d4d48:	2003e380 	.word	0x2003e380
   d4d4c:	2003e338 	.word	0x2003e338
   d4d50:	000d54c5 	.word	0x000d54c5
   d4d54:	2003e378 	.word	0x2003e378
   d4d58:	000d71e8 	.word	0x000d71e8
   d4d5c:	2003e358 	.word	0x2003e358
   d4d60:	2003e384 	.word	0x2003e384
   d4d64:	000d72db 	.word	0x000d72db
   d4d68:	2003e340 	.word	0x2003e340
   d4d6c:	2003e360 	.word	0x2003e360

000d4d70 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <netdb_freeaddrinfo+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	689b      	ldr	r3, [r3, #8]
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030268 	.word	0x00030268

000d4d80 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <netdb_getaddrinfo+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	68db      	ldr	r3, [r3, #12]
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030268 	.word	0x00030268

000d4d90 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <HAL_Pin_Map+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	681b      	ldr	r3, [r3, #0]
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	0003022c 	.word	0x0003022c

000d4da0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <HAL_Pin_Mode+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	689b      	ldr	r3, [r3, #8]
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	0003022c 	.word	0x0003022c

000d4db0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <HAL_Get_Pin_Mode+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	68db      	ldr	r3, [r3, #12]
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	0003022c 	.word	0x0003022c

000d4dc0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <HAL_GPIO_Write+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	691b      	ldr	r3, [r3, #16]
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	0003022c 	.word	0x0003022c

000d4dd0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <HAL_SPI_Init+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	69db      	ldr	r3, [r3, #28]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	00030230 	.word	0x00030230

000d4de0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <HAL_SPI_Is_Enabled+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	6a1b      	ldr	r3, [r3, #32]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	00030230 	.word	0x00030230

000d4df0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <HAL_RNG_GetRandomNumber+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	685b      	ldr	r3, [r3, #4]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	00030218 	.word	0x00030218

000d4e00 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	695b      	ldr	r3, [r3, #20]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	00030218 	.word	0x00030218

000d4e10 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <HAL_RTC_Get_UnixTime+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	69db      	ldr	r3, [r3, #28]
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	00030218 	.word	0x00030218

000d4e20 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <HAL_RTC_Time_Is_Valid+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	00030218 	.word	0x00030218

000d4e30 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <hal_timer_millis+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	00030218 	.word	0x00030218

000d4e40 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <HAL_Core_Get_Last_Reset_Info+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	00030234 	.word	0x00030234

000d4e50 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <os_thread_is_current+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	689b      	ldr	r3, [r3, #8]
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	00030248 	.word	0x00030248

000d4e60 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <os_thread_join+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	691b      	ldr	r3, [r3, #16]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	00030248 	.word	0x00030248

000d4e70 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <os_thread_cleanup+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	695b      	ldr	r3, [r3, #20]
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	00030248 	.word	0x00030248

000d4e80 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <os_mutex_create+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	00030248 	.word	0x00030248

000d4e90 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <os_mutex_recursive_create+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	00030248 	.word	0x00030248

000d4ea0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <inet_inet_ntop+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	695b      	ldr	r3, [r3, #20]
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	00030264 	.word	0x00030264

000d4eb0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <HAL_USART_Init+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	681b      	ldr	r3, [r3, #0]
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	0003023c 	.word	0x0003023c

000d4ec0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <HAL_USART_Write_Data+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	68db      	ldr	r3, [r3, #12]
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	0003023c 	.word	0x0003023c

000d4ed0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <HAL_USART_Available_Data+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	691b      	ldr	r3, [r3, #16]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	0003023c 	.word	0x0003023c

000d4ee0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <HAL_USART_Read_Data+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	695b      	ldr	r3, [r3, #20]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	0003023c 	.word	0x0003023c

000d4ef0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <HAL_USART_Peek_Data+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	699b      	ldr	r3, [r3, #24]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	0003023c 	.word	0x0003023c

000d4f00 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <HAL_USART_Flush_Data+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	69db      	ldr	r3, [r3, #28]
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	0003023c 	.word	0x0003023c

000d4f10 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <HAL_USART_Is_Enabled+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	6a1b      	ldr	r3, [r3, #32]
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	0003023c 	.word	0x0003023c

000d4f20 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <HAL_USART_Available_Data_For_Write+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	0003023c 	.word	0x0003023c

000d4f30 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <HAL_I2C_Write_Data+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	6a1b      	ldr	r3, [r3, #32]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030228 	.word	0x00030228

000d4f40 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <HAL_I2C_Available_Data+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030228 	.word	0x00030228

000d4f50 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <HAL_I2C_Read_Data+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	00030228 	.word	0x00030228

000d4f60 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <HAL_I2C_Peek_Data+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	00030228 	.word	0x00030228

000d4f70 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_I2C_Flush_Data+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	00030228 	.word	0x00030228

000d4f80 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <HAL_I2C_Is_Enabled+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030228 	.word	0x00030228

000d4f90 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <HAL_I2C_Init+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030228 	.word	0x00030228

000d4fa0 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <cellular_signal+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030274 	.word	0x00030274

000d4fb0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <HAL_USB_USART_Init+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	681b      	ldr	r3, [r3, #0]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003024c 	.word	0x0003024c

000d4fc0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <HAL_USB_USART_Begin+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	685b      	ldr	r3, [r3, #4]
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	0003024c 	.word	0x0003024c

000d4fd0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <HAL_USB_USART_Available_Data+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	691b      	ldr	r3, [r3, #16]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	0003024c 	.word	0x0003024c

000d4fe0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	695b      	ldr	r3, [r3, #20]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	0003024c 	.word	0x0003024c

000d4ff0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b02      	ldr	r3, [pc, #8]	; (d4ffc <HAL_USB_USART_Receive_Data+0xc>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	699b      	ldr	r3, [r3, #24]
   d4ff8:	9301      	str	r3, [sp, #4]
   d4ffa:	bd08      	pop	{r3, pc}
   d4ffc:	0003024c 	.word	0x0003024c

000d5000 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b02      	ldr	r3, [pc, #8]	; (d500c <HAL_USB_USART_Send_Data+0xc>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	69db      	ldr	r3, [r3, #28]
   d5008:	9301      	str	r3, [sp, #4]
   d500a:	bd08      	pop	{r3, pc}
   d500c:	0003024c 	.word	0x0003024c

000d5010 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5010:	b508      	push	{r3, lr}
   d5012:	4b02      	ldr	r3, [pc, #8]	; (d501c <HAL_USB_USART_Flush_Data+0xc>)
   d5014:	681b      	ldr	r3, [r3, #0]
   d5016:	6a1b      	ldr	r3, [r3, #32]
   d5018:	9301      	str	r3, [sp, #4]
   d501a:	bd08      	pop	{r3, pc}
   d501c:	0003024c 	.word	0x0003024c

000d5020 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5020:	b508      	push	{r3, lr}
   d5022:	4b02      	ldr	r3, [pc, #8]	; (d502c <system_mode+0xc>)
   d5024:	681b      	ldr	r3, [r3, #0]
   d5026:	681b      	ldr	r3, [r3, #0]
   d5028:	9301      	str	r3, [sp, #4]
   d502a:	bd08      	pop	{r3, pc}
   d502c:	00030220 	.word	0x00030220

000d5030 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <set_system_mode+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	685b      	ldr	r3, [r3, #4]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030220 	.word	0x00030220

000d5040 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <system_delay_ms+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	695b      	ldr	r3, [r3, #20]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030220 	.word	0x00030220

000d5050 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <application_thread_current+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030220 	.word	0x00030220

000d5060 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <application_thread_invoke+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030220 	.word	0x00030220

000d5070 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <system_thread_get_state+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030220 	.word	0x00030220

000d5080 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b03      	ldr	r3, [pc, #12]	; (d5090 <system_ctrl_set_app_request_handler+0x10>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d508a:	9301      	str	r3, [sp, #4]
   d508c:	bd08      	pop	{r3, pc}
   d508e:	0000      	.short	0x0000
   d5090:	00030220 	.word	0x00030220

000d5094 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b03      	ldr	r3, [pc, #12]	; (d50a4 <system_ctrl_set_result+0x10>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d509e:	9301      	str	r3, [sp, #4]
   d50a0:	bd08      	pop	{r3, pc}
   d50a2:	0000      	.short	0x0000
   d50a4:	00030220 	.word	0x00030220

000d50a8 <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b03      	ldr	r3, [pc, #12]	; (d50b8 <system_sleep_pins+0x10>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   d50b2:	9301      	str	r3, [sp, #4]
   d50b4:	bd08      	pop	{r3, pc}
   d50b6:	0000      	.short	0x0000
   d50b8:	00030220 	.word	0x00030220

000d50bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <network_connect+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	685b      	ldr	r3, [r3, #4]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030240 	.word	0x00030240

000d50cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <network_connecting+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	689b      	ldr	r3, [r3, #8]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030240 	.word	0x00030240

000d50dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <network_disconnect+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	68db      	ldr	r3, [r3, #12]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030240 	.word	0x00030240

000d50ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <network_ready+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	691b      	ldr	r3, [r3, #16]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030240 	.word	0x00030240

000d50fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <network_on+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	695b      	ldr	r3, [r3, #20]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030240 	.word	0x00030240

000d510c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <network_off+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	699b      	ldr	r3, [r3, #24]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030240 	.word	0x00030240

000d511c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <network_listen+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	69db      	ldr	r3, [r3, #28]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030240 	.word	0x00030240

000d512c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <network_listening+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	6a1b      	ldr	r3, [r3, #32]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030240 	.word	0x00030240

000d513c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <network_set_listen_timeout+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030240 	.word	0x00030240

000d514c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <network_get_listen_timeout+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030240 	.word	0x00030240

000d515c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <spark_process+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	689b      	ldr	r3, [r3, #8]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030244 	.word	0x00030244

000d516c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <spark_cloud_flag_connect+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	68db      	ldr	r3, [r3, #12]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030244 	.word	0x00030244

000d517c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <spark_cloud_flag_disconnect+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	691b      	ldr	r3, [r3, #16]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030244 	.word	0x00030244

000d518c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <spark_cloud_flag_connected+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	695b      	ldr	r3, [r3, #20]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030244 	.word	0x00030244

000d519c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <spark_deviceID+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	69db      	ldr	r3, [r3, #28]
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030244 	.word	0x00030244

000d51ac <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <spark_send_event+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6a1b      	ldr	r3, [r3, #32]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030244 	.word	0x00030244

000d51bc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <spark_subscribe+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030244 	.word	0x00030244

000d51cc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <spark_sync_time+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030244 	.word	0x00030244

000d51dc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <spark_sync_time_pending+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030244 	.word	0x00030244

000d51ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030244 	.word	0x00030244

000d51fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <malloc+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	681b      	ldr	r3, [r3, #0]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003021c 	.word	0x0003021c

000d520c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <free+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	685b      	ldr	r3, [r3, #4]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003021c 	.word	0x0003021c

000d521c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <realloc+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	689b      	ldr	r3, [r3, #8]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003021c 	.word	0x0003021c

000d522c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <abort+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003021c 	.word	0x0003021c

000d523c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <_malloc_r+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	0003021c 	.word	0x0003021c

000d524c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d524c:	2200      	movs	r2, #0
   d524e:	4611      	mov	r1, r2
   d5250:	6840      	ldr	r0, [r0, #4]
   d5252:	f7ff bf6b 	b.w	d512c <network_listening>

000d5256 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5256:	2200      	movs	r2, #0
   d5258:	4611      	mov	r1, r2
   d525a:	6840      	ldr	r0, [r0, #4]
   d525c:	f7ff bf76 	b.w	d514c <network_get_listen_timeout>

000d5260 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5260:	2200      	movs	r2, #0
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	f7ff bf6a 	b.w	d513c <network_set_listen_timeout>

000d5268 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5268:	2200      	movs	r2, #0
   d526a:	f081 0101 	eor.w	r1, r1, #1
   d526e:	6840      	ldr	r0, [r0, #4]
   d5270:	f7ff bf54 	b.w	d511c <network_listen>

000d5274 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5274:	2300      	movs	r3, #0
   d5276:	461a      	mov	r2, r3
   d5278:	4619      	mov	r1, r3
   d527a:	6840      	ldr	r0, [r0, #4]
   d527c:	f7ff bf46 	b.w	d510c <network_off>

000d5280 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5280:	2300      	movs	r3, #0
   d5282:	461a      	mov	r2, r3
   d5284:	4619      	mov	r1, r3
   d5286:	6840      	ldr	r0, [r0, #4]
   d5288:	f7ff bf38 	b.w	d50fc <network_on>

000d528c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d528c:	2200      	movs	r2, #0
   d528e:	4611      	mov	r1, r2
   d5290:	6840      	ldr	r0, [r0, #4]
   d5292:	f7ff bf2b 	b.w	d50ec <network_ready>

000d5296 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5296:	2200      	movs	r2, #0
   d5298:	4611      	mov	r1, r2
   d529a:	6840      	ldr	r0, [r0, #4]
   d529c:	f7ff bf16 	b.w	d50cc <network_connecting>

000d52a0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52a0:	2200      	movs	r2, #0
   d52a2:	2102      	movs	r1, #2
   d52a4:	6840      	ldr	r0, [r0, #4]
   d52a6:	f7ff bf19 	b.w	d50dc <network_disconnect>

000d52aa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52aa:	2300      	movs	r3, #0
   d52ac:	461a      	mov	r2, r3
   d52ae:	6840      	ldr	r0, [r0, #4]
   d52b0:	f7ff bf04 	b.w	d50bc <network_connect>

000d52b4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d52b4:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d52b6:	2203      	movs	r2, #3
   d52b8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d52ba:	4a02      	ldr	r2, [pc, #8]	; (d52c4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d52bc:	601a      	str	r2, [r3, #0]
   d52be:	4770      	bx	lr
   d52c0:	2003e3a0 	.word	0x2003e3a0
   d52c4:	000d71f8 	.word	0x000d71f8

000d52c8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d52c8:	4770      	bx	lr

000d52ca <_ZN8SPIClassD0Ev>:
   d52ca:	b510      	push	{r4, lr}
   d52cc:	2110      	movs	r1, #16
   d52ce:	4604      	mov	r4, r0
   d52d0:	f001 fc27 	bl	d6b22 <_ZdlPvj>
   d52d4:	4620      	mov	r0, r4
   d52d6:	bd10      	pop	{r4, pc}

000d52d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d52d8:	b570      	push	{r4, r5, r6, lr}
   d52da:	4b08      	ldr	r3, [pc, #32]	; (d52fc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d52dc:	6003      	str	r3, [r0, #0]
   d52de:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d52e0:	2500      	movs	r5, #0
   d52e2:	460e      	mov	r6, r1
   d52e4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d52e8:	f7ff fdca 	bl	d4e80 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d52ec:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d52ee:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d52f0:	f7ff fd6e 	bl	d4dd0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d52f4:	60a5      	str	r5, [r4, #8]
}
   d52f6:	4620      	mov	r0, r4
   d52f8:	bd70      	pop	{r4, r5, r6, pc}
   d52fa:	bf00      	nop
   d52fc:	000d722c 	.word	0x000d722c

000d5300 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5300:	7900      	ldrb	r0, [r0, #4]
   d5302:	f7ff bd6d 	b.w	d4de0 <HAL_SPI_Is_Enabled>

000d5306 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5306:	b510      	push	{r4, lr}
   d5308:	2400      	movs	r4, #0
   d530a:	7004      	strb	r4, [r0, #0]
   d530c:	8044      	strh	r4, [r0, #2]
    if (ret > 0) {
   d530e:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
   d5310:	f64f 74ff 	movw	r4, #65535	; 0xffff
   d5314:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
   d5316:	dd07      	ble.n	d5328 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
   d5318:	3901      	subs	r1, #1
   d531a:	4299      	cmp	r1, r3
   d531c:	d209      	bcs.n	d5332 <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
   d531e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   d5322:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
   d5324:	2301      	movs	r3, #1
   d5326:	e001      	b.n	d532c <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
   d5328:	d102      	bne.n	d5330 <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
   d532a:	2302      	movs	r3, #2
   d532c:	7003      	strb	r3, [r0, #0]
   d532e:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
   d5330:	8041      	strh	r1, [r0, #2]
    }
}
   d5332:	bd10      	pop	{r4, pc}

000d5334 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5334:	b570      	push	{r4, r5, r6, lr}
   d5336:	b086      	sub	sp, #24
   d5338:	4616      	mov	r6, r2
   d533a:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d533c:	2300      	movs	r3, #0
   d533e:	9302      	str	r3, [sp, #8]
   d5340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5342:	9301      	str	r3, [sp, #4]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d5344:	460d      	mov	r5, r1
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d5346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d5348:	9300      	str	r3, [sp, #0]
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
   d534a:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
   d534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d534e:	4631      	mov	r1, r6
   d5350:	4628      	mov	r0, r5
   d5352:	f7ff fea9 	bl	d50a8 <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
   d5356:	4633      	mov	r3, r6
   d5358:	462a      	mov	r2, r5
   d535a:	4601      	mov	r1, r0
   d535c:	a804      	add	r0, sp, #16
   d535e:	f7ff ffd2 	bl	d5306 <_ZN11SleepResultC1EiPKtj>
   d5362:	4b06      	ldr	r3, [pc, #24]	; (d537c <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
   d5364:	9804      	ldr	r0, [sp, #16]
   d5366:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   d536a:	6018      	str	r0, [r3, #0]
   d536c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	889b      	ldrh	r3, [r3, #4]
   d5372:	6022      	str	r2, [r4, #0]
}
   d5374:	4620      	mov	r0, r4
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
    return System.sleepResult_;
   d5376:	80a3      	strh	r3, [r4, #4]
}
   d5378:	b006      	add	sp, #24
   d537a:	bd70      	pop	{r4, r5, r6, pc}
   d537c:	2003e3a8 	.word	0x2003e3a8

000d5380 <_ZNK11SleepResult12wokenUpByRtcEv>:
   d5380:	7800      	ldrb	r0, [r0, #0]
   d5382:	3802      	subs	r0, #2
   d5384:	2801      	cmp	r0, #1
   d5386:	bf8c      	ite	hi
   d5388:	2000      	movhi	r0, #0
   d538a:	2001      	movls	r0, #1
   d538c:	4770      	bx	lr
	...

000d5390 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5390:	4b04      	ldr	r3, [pc, #16]	; (d53a4 <_GLOBAL__sub_I_System+0x14>)
   d5392:	2000      	movs	r0, #0
   d5394:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5398:	7018      	strb	r0, [r3, #0]
   d539a:	8058      	strh	r0, [r3, #2]
   d539c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d539e:	f7ff be47 	b.w	d5030 <set_system_mode>
   d53a2:	bf00      	nop
   d53a4:	2003e3a8 	.word	0x2003e3a8

000d53a8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d53a8:	b510      	push	{r4, lr}
   d53aa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d53ac:	f001 fdaf 	bl	d6f0e <strlen>
   d53b0:	3801      	subs	r0, #1
   d53b2:	1823      	adds	r3, r4, r0
   d53b4:	4620      	mov	r0, r4
	while(i<j){
   d53b6:	4298      	cmp	r0, r3
   d53b8:	d206      	bcs.n	d53c8 <_Z11str_reversePc+0x20>
		c = *i;
   d53ba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d53bc:	7819      	ldrb	r1, [r3, #0]
   d53be:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d53c2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d53c6:	e7f6      	b.n	d53b6 <_Z11str_reversePc+0xe>
   d53c8:	bd10      	pop	{r4, pc}

000d53ca <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d53ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d53ce:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d53d0:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d53d2:	4615      	mov	r5, r2
   d53d4:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d53d6:	bf34      	ite	cc
   d53d8:	4615      	movcc	r5, r2
   d53da:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d53dc:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d53de:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d53e0:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d53e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d53e6:	d107      	bne.n	d53f8 <ltoa+0x2e>
   d53e8:	4298      	cmp	r0, r3
   d53ea:	da05      	bge.n	d53f8 <ltoa+0x2e>
      {
            *head++ = '-';
   d53ec:	232d      	movs	r3, #45	; 0x2d
   d53ee:	f101 0801 	add.w	r8, r1, #1
   d53f2:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d53f4:	4240      	negs	r0, r0
   d53f6:	e001      	b.n	d53fc <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d53f8:	b1b0      	cbz	r0, d5428 <ltoa+0x5e>
   d53fa:	46a0      	mov	r8, r4
   d53fc:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d5400:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5402:	462a      	mov	r2, r5
   d5404:	4601      	mov	r1, r0
   d5406:	a801      	add	r0, sp, #4
   d5408:	f001 fcea 	bl	d6de0 <ldiv>
   d540c:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d540e:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d5410:	2b09      	cmp	r3, #9
   d5412:	bfcc      	ite	gt
   d5414:	2237      	movgt	r2, #55	; 0x37
   d5416:	2230      	movle	r2, #48	; 0x30
   d5418:	fa52 f383 	uxtab	r3, r2, r3
   d541c:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5420:	3701      	adds	r7, #1
   d5422:	2800      	cmp	r0, #0
   d5424:	d1ed      	bne.n	d5402 <ltoa+0x38>
   d5426:	e006      	b.n	d5436 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5428:	2330      	movs	r3, #48	; 0x30
   d542a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d542e:	46a0      	mov	r8, r4
   d5430:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5434:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5436:	463a      	mov	r2, r7
   d5438:	1c71      	adds	r1, r6, #1
   d543a:	4640      	mov	r0, r8
   d543c:	f001 fce4 	bl	d6e08 <memcpy>
      return str;
}
   d5440:	4620      	mov	r0, r4
   d5442:	b00c      	add	sp, #48	; 0x30
   d5444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5448 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5448:	b570      	push	{r4, r5, r6, lr}
   d544a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d544c:	1e91      	subs	r1, r2, #2
   d544e:	2922      	cmp	r1, #34	; 0x22
   d5450:	d820      	bhi.n	d5494 <ultoa+0x4c>
   d5452:	4625      	mov	r5, r4
   d5454:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d5456:	b910      	cbnz	r0, d545e <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5458:	4423      	add	r3, r4
            *ptr++ = '0';
   d545a:	2230      	movs	r2, #48	; 0x30
   d545c:	e00e      	b.n	d547c <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d545e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d5462:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d5466:	b2c1      	uxtb	r1, r0
   d5468:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d546c:	2809      	cmp	r0, #9
                *ptr += '0';
   d546e:	bf94      	ite	ls
   d5470:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5472:	3157      	addhi	r1, #87	; 0x57
   d5474:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d5478:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d547a:	e7eb      	b.n	d5454 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d547c:	4299      	cmp	r1, r3
   d547e:	d202      	bcs.n	d5486 <ultoa+0x3e>
            *ptr++ = '0';
   d5480:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d5484:	e7fa      	b.n	d547c <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d5486:	2300      	movs	r3, #0
	str_reverse(buffer);
   d5488:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d548a:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d548c:	f7ff ff8c 	bl	d53a8 <_Z11str_reversePc>
	return buffer;
   d5490:	4620      	mov	r0, r4
   d5492:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d5494:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d5496:	bd70      	pop	{r4, r5, r6, pc}

000d5498 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5498:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d549a:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d549c:	460c      	mov	r4, r1
   d549e:	4615      	mov	r5, r2
	if(a<0){
   d54a0:	da0b      	bge.n	d54ba <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d54a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d54a6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d54aa:	bf14      	ite	ne
   d54ac:	4258      	negne	r0, r3
   d54ae:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d54b0:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d54b2:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d54b4:	462a      	mov	r2, r5
   d54b6:	4419      	add	r1, r3
   d54b8:	e000      	b.n	d54bc <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d54ba:	2301      	movs	r3, #1
   d54bc:	f7ff ffc4 	bl	d5448 <ultoa>
	}
	return buffer;
}
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd38      	pop	{r3, r4, r5, pc}

000d54c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d54c4:	b510      	push	{r4, lr}
   d54c6:	4604      	mov	r4, r0
{
	free(buffer);
   d54c8:	6800      	ldr	r0, [r0, #0]
   d54ca:	f7ff fe9f 	bl	d520c <free>
}
   d54ce:	4620      	mov	r0, r4
   d54d0:	bd10      	pop	{r4, pc}

000d54d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d54d2:	b510      	push	{r4, lr}
   d54d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d54d6:	6800      	ldr	r0, [r0, #0]
   d54d8:	b108      	cbz	r0, d54de <_ZN6String10invalidateEv+0xc>
   d54da:	f7ff fe97 	bl	d520c <free>
	buffer = NULL;
   d54de:	2300      	movs	r3, #0
   d54e0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d54e2:	60a3      	str	r3, [r4, #8]
   d54e4:	6063      	str	r3, [r4, #4]
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d54e8:	b538      	push	{r3, r4, r5, lr}
   d54ea:	4604      	mov	r4, r0
   d54ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d54ee:	6800      	ldr	r0, [r0, #0]
   d54f0:	3101      	adds	r1, #1
   d54f2:	f7ff fe93 	bl	d521c <realloc>
	if (newbuffer) {
   d54f6:	b110      	cbz	r0, d54fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d54f8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d54fc:	2001      	movs	r0, #1
	}
	return 0;
}
   d54fe:	bd38      	pop	{r3, r4, r5, pc}

000d5500 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5500:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5502:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5504:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5506:	b113      	cbz	r3, d550e <_ZN6String7reserveEj+0xe>
   d5508:	6843      	ldr	r3, [r0, #4]
   d550a:	428b      	cmp	r3, r1
   d550c:	d207      	bcs.n	d551e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d550e:	4620      	mov	r0, r4
   d5510:	f7ff ffea 	bl	d54e8 <_ZN6String12changeBufferEj>
   d5514:	b120      	cbz	r0, d5520 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5516:	68a3      	ldr	r3, [r4, #8]
   d5518:	b90b      	cbnz	r3, d551e <_ZN6String7reserveEj+0x1e>
   d551a:	6822      	ldr	r2, [r4, #0]
   d551c:	7013      	strb	r3, [r2, #0]
   d551e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5520:	bd10      	pop	{r4, pc}

000d5522 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5522:	b570      	push	{r4, r5, r6, lr}
   d5524:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5526:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5528:	4604      	mov	r4, r0
   d552a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d552c:	f7ff ffe8 	bl	d5500 <_ZN6String7reserveEj>
   d5530:	b918      	cbnz	r0, d553a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5532:	4620      	mov	r0, r4
   d5534:	f7ff ffcd 	bl	d54d2 <_ZN6String10invalidateEv>
		return *this;
   d5538:	e009      	b.n	d554e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d553a:	462a      	mov	r2, r5
   d553c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d553e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5540:	6820      	ldr	r0, [r4, #0]
   d5542:	f001 fc61 	bl	d6e08 <memcpy>
	buffer[len] = 0;
   d5546:	6822      	ldr	r2, [r4, #0]
   d5548:	68a3      	ldr	r3, [r4, #8]
   d554a:	2100      	movs	r1, #0
   d554c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d554e:	4620      	mov	r0, r4
   d5550:	bd70      	pop	{r4, r5, r6, pc}

000d5552 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5552:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5554:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5556:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5558:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d555a:	6043      	str	r3, [r0, #4]
	len = 0;
   d555c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d555e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5560:	460d      	mov	r5, r1
   d5562:	b139      	cbz	r1, d5574 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5564:	4608      	mov	r0, r1
   d5566:	f001 fcd2 	bl	d6f0e <strlen>
   d556a:	4629      	mov	r1, r5
   d556c:	4602      	mov	r2, r0
   d556e:	4620      	mov	r0, r4
   d5570:	f7ff ffd7 	bl	d5522 <_ZN6String4copyEPKcj>
}
   d5574:	4620      	mov	r0, r4
   d5576:	bd38      	pop	{r3, r4, r5, pc}

000d5578 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5578:	b538      	push	{r3, r4, r5, lr}
   d557a:	4605      	mov	r5, r0
	if (buffer) {
   d557c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d557e:	460c      	mov	r4, r1
	if (buffer) {
   d5580:	b160      	cbz	r0, d559c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d5582:	686a      	ldr	r2, [r5, #4]
   d5584:	688b      	ldr	r3, [r1, #8]
   d5586:	429a      	cmp	r2, r3
   d5588:	d306      	bcc.n	d5598 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d558a:	6809      	ldr	r1, [r1, #0]
   d558c:	f001 fc9c 	bl	d6ec8 <strcpy>
			len = rhs.len;
   d5590:	68a3      	ldr	r3, [r4, #8]
   d5592:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d5594:	2300      	movs	r3, #0
   d5596:	e00a      	b.n	d55ae <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d5598:	f7ff fe38 	bl	d520c <free>
		}
	}
	buffer = rhs.buffer;
   d559c:	6823      	ldr	r3, [r4, #0]
   d559e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d55a0:	6863      	ldr	r3, [r4, #4]
   d55a2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d55a4:	68a3      	ldr	r3, [r4, #8]
   d55a6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d55a8:	2300      	movs	r3, #0
   d55aa:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d55ac:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d55ae:	60a3      	str	r3, [r4, #8]
   d55b0:	bd38      	pop	{r3, r4, r5, pc}

000d55b2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d55b2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d55b4:	b510      	push	{r4, lr}
   d55b6:	460b      	mov	r3, r1
   d55b8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d55ba:	d007      	beq.n	d55cc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d55bc:	6809      	ldr	r1, [r1, #0]
   d55be:	b119      	cbz	r1, d55c8 <_ZN6StringaSERKS_+0x16>
   d55c0:	689a      	ldr	r2, [r3, #8]
   d55c2:	f7ff ffae 	bl	d5522 <_ZN6String4copyEPKcj>
   d55c6:	e001      	b.n	d55cc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d55c8:	f7ff ff83 	bl	d54d2 <_ZN6String10invalidateEv>

	return *this;
}
   d55cc:	4620      	mov	r0, r4
   d55ce:	bd10      	pop	{r4, pc}

000d55d0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d55d0:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55d2:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d55d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55d6:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d55d8:	6043      	str	r3, [r0, #4]
	len = 0;
   d55da:	6083      	str	r3, [r0, #8]
	flags = 0;
   d55dc:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d55de:	f7ff ffe8 	bl	d55b2 <_ZN6StringaSERKS_>
}
   d55e2:	4620      	mov	r0, r4
   d55e4:	bd10      	pop	{r4, pc}

000d55e6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d55e6:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d55e8:	b510      	push	{r4, lr}
   d55ea:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d55ec:	d001      	beq.n	d55f2 <_ZN6StringaSEOS_+0xc>
   d55ee:	f7ff ffc3 	bl	d5578 <_ZN6String4moveERS_>
	return *this;
}
   d55f2:	4620      	mov	r0, r4
   d55f4:	bd10      	pop	{r4, pc}

000d55f6 <_ZN6StringaSEO15StringSumHelper>:

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d55f6:	4288      	cmp	r0, r1
	if (this != &rval) move(rval);
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
   d55f8:	b510      	push	{r4, lr}
   d55fa:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d55fc:	d001      	beq.n	d5602 <_ZN6StringaSEO15StringSumHelper+0xc>
   d55fe:	f7ff ffbb 	bl	d5578 <_ZN6String4moveERS_>
	return *this;
}
   d5602:	4620      	mov	r0, r4
   d5604:	bd10      	pop	{r4, pc}

000d5606 <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d5606:	b538      	push	{r3, r4, r5, lr}
   d5608:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d560a:	460c      	mov	r4, r1
   d560c:	b141      	cbz	r1, d5620 <_ZN6StringaSEPKc+0x1a>
   d560e:	4608      	mov	r0, r1
   d5610:	f001 fc7d 	bl	d6f0e <strlen>
   d5614:	4621      	mov	r1, r4
   d5616:	4602      	mov	r2, r0
   d5618:	4628      	mov	r0, r5
   d561a:	f7ff ff82 	bl	d5522 <_ZN6String4copyEPKcj>
   d561e:	e001      	b.n	d5624 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5620:	f7ff ff57 	bl	d54d2 <_ZN6String10invalidateEv>

	return *this;
}
   d5624:	4628      	mov	r0, r5
   d5626:	bd38      	pop	{r3, r4, r5, pc}

000d5628 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   d5628:	b513      	push	{r0, r1, r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d562a:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
   d562c:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5630:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5632:	6043      	str	r3, [r0, #4]
	len = 0;
   d5634:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5636:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
   d5638:	a901      	add	r1, sp, #4
	init();
	move(rval);
}
#endif

String::String(char c)
   d563a:	4604      	mov	r4, r0
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d563c:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
   d5640:	f7ff ffe1 	bl	d5606 <_ZN6StringaSEPKc>
}
   d5644:	4620      	mov	r0, r4
   d5646:	b002      	add	sp, #8
   d5648:	bd10      	pop	{r4, pc}

000d564a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d564a:	b510      	push	{r4, lr}
   d564c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d564e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d5650:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5652:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d5654:	6063      	str	r3, [r4, #4]
	len = 0;
   d5656:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d5658:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d565a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d565c:	a901      	add	r1, sp, #4
   d565e:	f7ff ff1b 	bl	d5498 <itoa>
	*this = buf;
   d5662:	a901      	add	r1, sp, #4
   d5664:	4620      	mov	r0, r4
   d5666:	f7ff ffce 	bl	d5606 <_ZN6StringaSEPKc>
}
   d566a:	4620      	mov	r0, r4
   d566c:	b00a      	add	sp, #40	; 0x28
   d566e:	bd10      	pop	{r4, pc}

000d5670 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5670:	b510      	push	{r4, lr}
   d5672:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5674:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5676:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5678:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d567a:	6063      	str	r3, [r4, #4]
	len = 0;
   d567c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d567e:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   d5680:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   d5682:	a901      	add	r1, sp, #4
   d5684:	f7ff fea1 	bl	d53ca <ltoa>
	*this = buf;
   d5688:	a901      	add	r1, sp, #4
   d568a:	4620      	mov	r0, r4
   d568c:	f7ff ffbb 	bl	d5606 <_ZN6StringaSEPKc>
}
   d5690:	4620      	mov	r0, r4
   d5692:	b00a      	add	sp, #40	; 0x28
   d5694:	bd10      	pop	{r4, pc}

000d5696 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5696:	b570      	push	{r4, r5, r6, lr}
   d5698:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d569a:	460e      	mov	r6, r1
   d569c:	b909      	cbnz	r1, d56a2 <_ZN6String6concatEPKcj+0xc>
   d569e:	2000      	movs	r0, #0
   d56a0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d56a2:	b16a      	cbz	r2, d56c0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d56a4:	6883      	ldr	r3, [r0, #8]
   d56a6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d56a8:	4629      	mov	r1, r5
   d56aa:	f7ff ff29 	bl	d5500 <_ZN6String7reserveEj>
   d56ae:	2800      	cmp	r0, #0
   d56b0:	d0f5      	beq.n	d569e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d56b2:	6820      	ldr	r0, [r4, #0]
   d56b4:	68a3      	ldr	r3, [r4, #8]
   d56b6:	4631      	mov	r1, r6
   d56b8:	4418      	add	r0, r3
   d56ba:	f001 fc05 	bl	d6ec8 <strcpy>
	len = newlen;
   d56be:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d56c0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d56c2:	bd70      	pop	{r4, r5, r6, pc}

000d56c4 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d56c4:	688a      	ldr	r2, [r1, #8]
   d56c6:	6809      	ldr	r1, [r1, #0]
   d56c8:	f7ff bfe5 	b.w	d5696 <_ZN6String6concatEPKcj>

000d56cc <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
   d56cc:	b538      	push	{r3, r4, r5, lr}
   d56ce:	4605      	mov	r5, r0
	if (!cstr) return 0;
   d56d0:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
   d56d2:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
   d56d4:	b141      	cbz	r1, d56e8 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
   d56d6:	f001 fc1a 	bl	d6f0e <strlen>
   d56da:	4621      	mov	r1, r4
   d56dc:	4602      	mov	r2, r0
   d56de:	4628      	mov	r0, r5
}
   d56e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   d56e4:	f7ff bfd7 	b.w	d5696 <_ZN6String6concatEPKcj>
}
   d56e8:	bd38      	pop	{r3, r4, r5, pc}

000d56ea <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d56ea:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d56ec:	688a      	ldr	r2, [r1, #8]
   d56ee:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d56f0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d56f2:	f7ff ffd0 	bl	d5696 <_ZN6String6concatEPKcj>
   d56f6:	b910      	cbnz	r0, d56fe <_ZplRK15StringSumHelperRK6String+0x14>
   d56f8:	4620      	mov	r0, r4
   d56fa:	f7ff feea 	bl	d54d2 <_ZN6String10invalidateEv>
	return a;
}
   d56fe:	4620      	mov	r0, r4
   d5700:	bd10      	pop	{r4, pc}

000d5702 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d5702:	b538      	push	{r3, r4, r5, lr}
   d5704:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d5706:	460d      	mov	r5, r1
   d5708:	b141      	cbz	r1, d571c <_ZplRK15StringSumHelperPKc+0x1a>
   d570a:	4608      	mov	r0, r1
   d570c:	f001 fbff 	bl	d6f0e <strlen>
   d5710:	4629      	mov	r1, r5
   d5712:	4602      	mov	r2, r0
   d5714:	4620      	mov	r0, r4
   d5716:	f7ff ffbe 	bl	d5696 <_ZN6String6concatEPKcj>
   d571a:	b910      	cbnz	r0, d5722 <_ZplRK15StringSumHelperPKc+0x20>
   d571c:	4620      	mov	r0, r4
   d571e:	f7ff fed8 	bl	d54d2 <_ZN6String10invalidateEv>
	return a;
}
   d5722:	4620      	mov	r0, r4
   d5724:	bd38      	pop	{r3, r4, r5, pc}

000d5726 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5726:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5728:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d572a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d572c:	b912      	cbnz	r2, d5734 <_ZNK6String6equalsEPKc+0xe>
   d572e:	b919      	cbnz	r1, d5738 <_ZNK6String6equalsEPKc+0x12>
   d5730:	2001      	movs	r0, #1
   d5732:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5734:	b911      	cbnz	r1, d573c <_ZNK6String6equalsEPKc+0x16>
   d5736:	6803      	ldr	r3, [r0, #0]
   d5738:	7818      	ldrb	r0, [r3, #0]
   d573a:	e002      	b.n	d5742 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d573c:	6800      	ldr	r0, [r0, #0]
   d573e:	f001 fbb9 	bl	d6eb4 <strcmp>
   d5742:	fab0 f080 	clz	r0, r0
   d5746:	0940      	lsrs	r0, r0, #5
}
   d5748:	bd08      	pop	{r3, pc}

000d574a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d574a:	6883      	ldr	r3, [r0, #8]
   d574c:	428b      	cmp	r3, r1
   d574e:	d903      	bls.n	d5758 <_ZNK6StringixEj+0xe>
   d5750:	6800      	ldr	r0, [r0, #0]
   d5752:	b110      	cbz	r0, d575a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d5754:	5c40      	ldrb	r0, [r0, r1]
   d5756:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d5758:	2000      	movs	r0, #0
	return buffer[index];
}
   d575a:	4770      	bx	lr

000d575c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d575c:	f7ff bff5 	b.w	d574a <_ZNK6StringixEj>

000d5760 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d5760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5764:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d5766:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
   d5768:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d576a:	b1ca      	cbz	r2, d57a0 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d576c:	6883      	ldr	r3, [r0, #8]
   d576e:	b1bb      	cbz	r3, d57a0 <_ZNK6String11lastIndexOfERKS_j+0x40>
   d5770:	429a      	cmp	r2, r3
   d5772:	d815      	bhi.n	d57a0 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d5774:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
   d5776:	42ab      	cmp	r3, r5
   d5778:	bf98      	it	ls
   d577a:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d577e:	4630      	mov	r0, r6

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
   d5780:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d5784:	eb06 0805 	add.w	r8, r6, r5
   d5788:	4540      	cmp	r0, r8
   d578a:	d80d      	bhi.n	d57a8 <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
   d578c:	6839      	ldr	r1, [r7, #0]
   d578e:	f001 fbc6 	bl	d6f1e <strstr>
		if (!p) break;
   d5792:	b148      	cbz	r0, d57a8 <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
   d5794:	1b83      	subs	r3, r0, r6
   d5796:	429d      	cmp	r5, r3
   d5798:	bf28      	it	cs
   d579a:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
   d579c:	3001      	adds	r0, #1
   d579e:	e7f3      	b.n	d5788 <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
   d57a0:	f04f 30ff 	mov.w	r0, #4294967295
   d57a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d57a8:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
   d57aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d57ae <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
   d57ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
   d57b2:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
   d57b6:	4605      	mov	r5, r0
   d57b8:	4688      	mov	r8, r1
   d57ba:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
   d57bc:	f1ba 0f00 	cmp.w	sl, #0
   d57c0:	d078      	beq.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
   d57c2:	f8d1 b008 	ldr.w	fp, [r1, #8]
   d57c6:	f1bb 0f00 	cmp.w	fp, #0
   d57ca:	d073      	beq.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
   d57cc:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
   d57ce:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
   d57d0:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
   d57d4:	2f00      	cmp	r7, #0
   d57d6:	d10e      	bne.n	d57f6 <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d57d8:	4620      	mov	r0, r4
   d57da:	f8d8 1000 	ldr.w	r1, [r8]
   d57de:	f001 fb9e 	bl	d6f1e <strstr>
   d57e2:	4604      	mov	r4, r0
   d57e4:	2800      	cmp	r0, #0
   d57e6:	d065      	beq.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
   d57e8:	68b2      	ldr	r2, [r6, #8]
   d57ea:	6831      	ldr	r1, [r6, #0]
   d57ec:	f001 fb0c 	bl	d6e08 <memcpy>
			readFrom = foundAt + replace.len;
   d57f0:	68b0      	ldr	r0, [r6, #8]
   d57f2:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d57f4:	e7f0      	b.n	d57d8 <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
   d57f6:	da22      	bge.n	d583e <_ZN6String7replaceERKS_S1_+0x90>
   d57f8:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d57fa:	f8d8 1000 	ldr.w	r1, [r8]
   d57fe:	4620      	mov	r0, r4
   d5800:	f001 fb8d 	bl	d6f1e <strstr>
   d5804:	4683      	mov	fp, r0
   d5806:	b1a8      	cbz	r0, d5834 <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
   d5808:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
   d580c:	4621      	mov	r1, r4
   d580e:	4652      	mov	r2, sl
   d5810:	4648      	mov	r0, r9
			writeTo += n;
   d5812:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
   d5814:	f001 faf8 	bl	d6e08 <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
   d5818:	4648      	mov	r0, r9
   d581a:	68b2      	ldr	r2, [r6, #8]
   d581c:	6831      	ldr	r1, [r6, #0]
   d581e:	f001 faf3 	bl	d6e08 <memcpy>
			writeTo += replace.len;
   d5822:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
   d5824:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
   d5828:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
   d582a:	68ab      	ldr	r3, [r5, #8]
   d582c:	443b      	add	r3, r7
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
   d582e:	445c      	add	r4, fp
			len += diff;
   d5830:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d5832:	e7e2      	b.n	d57fa <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
   d5834:	4621      	mov	r1, r4
   d5836:	4648      	mov	r0, r9
   d5838:	f001 fb46 	bl	d6ec8 <strcpy>
   d583c:	e03a      	b.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d583e:	680b      	ldr	r3, [r1, #0]
   d5840:	46d1      	mov	r9, sl
   d5842:	4619      	mov	r1, r3
   d5844:	4620      	mov	r0, r4
   d5846:	9301      	str	r3, [sp, #4]
   d5848:	f001 fb69 	bl	d6f1e <strstr>
   d584c:	b120      	cbz	r0, d5858 <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
   d584e:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
   d5852:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
   d5854:	9b01      	ldr	r3, [sp, #4]
   d5856:	e7f4      	b.n	d5842 <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
   d5858:	45d1      	cmp	r9, sl
   d585a:	d02b      	beq.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
   d585c:	686b      	ldr	r3, [r5, #4]
   d585e:	4599      	cmp	r9, r3
   d5860:	d904      	bls.n	d586c <_ZN6String7replaceERKS_S1_+0xbe>
   d5862:	4649      	mov	r1, r9
   d5864:	4628      	mov	r0, r5
   d5866:	f7ff fe3f 	bl	d54e8 <_ZN6String12changeBufferEj>
   d586a:	b318      	cbz	r0, d58b4 <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
   d586c:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
   d586e:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
   d5872:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
   d5874:	2a00      	cmp	r2, #0
   d5876:	db1d      	blt.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
   d5878:	4641      	mov	r1, r8
   d587a:	4628      	mov	r0, r5
   d587c:	f7ff ff70 	bl	d5760 <_ZNK6String11lastIndexOfERKS_j>
   d5880:	1e04      	subs	r4, r0, #0
   d5882:	db17      	blt.n	d58b4 <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
   d5884:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d5888:	6829      	ldr	r1, [r5, #0]
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   d588a:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
   d588c:	4423      	add	r3, r4
   d588e:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
   d5890:	1ad2      	subs	r2, r2, r3
   d5892:	19c8      	adds	r0, r1, r7
   d5894:	f001 fac3 	bl	d6e1e <memmove>
			len += diff;
   d5898:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
   d589a:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
   d589c:	443b      	add	r3, r7
   d589e:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
   d58a0:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
   d58a4:	6828      	ldr	r0, [r5, #0]
   d58a6:	68b2      	ldr	r2, [r6, #8]
   d58a8:	6831      	ldr	r1, [r6, #0]
   d58aa:	4420      	add	r0, r4
   d58ac:	f001 faac 	bl	d6e08 <memcpy>
			index--;
   d58b0:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
   d58b2:	e7df      	b.n	d5874 <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
   d58b4:	4628      	mov	r0, r5
   d58b6:	b003      	add	sp, #12
   d58b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d58bc <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d58bc:	6800      	ldr	r0, [r0, #0]
   d58be:	b108      	cbz	r0, d58c4 <_ZNK6String5toIntEv+0x8>
   d58c0:	f001 ba7c 	b.w	d6dbc <atol>
	return 0;
}
   d58c4:	4770      	bx	lr

000d58c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d58c6:	680b      	ldr	r3, [r1, #0]
   d58c8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d58ca:	b113      	cbz	r3, d58d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d58cc:	685a      	ldr	r2, [r3, #4]
   d58ce:	3201      	adds	r2, #1
   d58d0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d58d2:	4770      	bx	lr

000d58d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d58d4:	4802      	ldr	r0, [pc, #8]	; (d58e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d58d6:	2300      	movs	r3, #0
   d58d8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d58da:	f7ff bad9 	b.w	d4e90 <os_mutex_recursive_create>
   d58de:	bf00      	nop
   d58e0:	2003e3b0 	.word	0x2003e3b0

000d58e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d58e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58e6:	4606      	mov	r6, r0
   d58e8:	460d      	mov	r5, r1
   d58ea:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d58ec:	2400      	movs	r4, #0
  while (size--) {
   d58ee:	42bd      	cmp	r5, r7
   d58f0:	d00c      	beq.n	d590c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d58f2:	6833      	ldr	r3, [r6, #0]
   d58f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d58f8:	689b      	ldr	r3, [r3, #8]
   d58fa:	4630      	mov	r0, r6
   d58fc:	4798      	blx	r3
     if (chunk>=0)
   d58fe:	2800      	cmp	r0, #0
   d5900:	db01      	blt.n	d5906 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5902:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5904:	e7f3      	b.n	d58ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5906:	2c00      	cmp	r4, #0
   d5908:	bf08      	it	eq
   d590a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d590c:	4620      	mov	r0, r4
   d590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5910 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5910:	b570      	push	{r4, r5, r6, lr}
   d5912:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5914:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5916:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5918:	b149      	cbz	r1, d592e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d591a:	f001 faf8 	bl	d6f0e <strlen>
   d591e:	682b      	ldr	r3, [r5, #0]
   d5920:	4602      	mov	r2, r0
   d5922:	4621      	mov	r1, r4
   d5924:	4628      	mov	r0, r5
   d5926:	68db      	ldr	r3, [r3, #12]
    }
   d5928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d592c:	4718      	bx	r3
    }
   d592e:	bd70      	pop	{r4, r5, r6, pc}

000d5930 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5930:	6803      	ldr	r3, [r0, #0]
   d5932:	689b      	ldr	r3, [r3, #8]
   d5934:	4718      	bx	r3

000d5936 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5936:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5938:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d593a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d593c:	f7ff fff8 	bl	d5930 <_ZN5Print5printEc>
  n += print('\n');
   d5940:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5942:	4604      	mov	r4, r0
  n += print('\n');
   d5944:	4628      	mov	r0, r5
   d5946:	f7ff fff3 	bl	d5930 <_ZN5Print5printEc>
  return n;
}
   d594a:	4420      	add	r0, r4
   d594c:	bd38      	pop	{r3, r4, r5, pc}

000d594e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d594e:	b538      	push	{r3, r4, r5, lr}
   d5950:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5952:	f7ff ffdd 	bl	d5910 <_ZN5Print5writeEPKc>
   d5956:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5958:	4628      	mov	r0, r5
   d595a:	f7ff ffec 	bl	d5936 <_ZN5Print7printlnEv>
  return n;
}
   d595e:	4420      	add	r0, r4
   d5960:	bd38      	pop	{r3, r4, r5, pc}

000d5962 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5962:	b530      	push	{r4, r5, lr}
   d5964:	b08b      	sub	sp, #44	; 0x2c
   d5966:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5968:	2100      	movs	r1, #0
   d596a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d596e:	2a01      	cmp	r2, #1
   d5970:	bf98      	it	ls
   d5972:	220a      	movls	r2, #10
   d5974:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5978:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d597c:	fb05 3312 	mls	r3, r5, r2, r3
   d5980:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5984:	2b09      	cmp	r3, #9
   d5986:	bf94      	ite	ls
   d5988:	3330      	addls	r3, #48	; 0x30
   d598a:	3337      	addhi	r3, #55	; 0x37
   d598c:	b2db      	uxtb	r3, r3
   d598e:	4621      	mov	r1, r4
   d5990:	f804 3901 	strb.w	r3, [r4], #-1
   d5994:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5996:	2d00      	cmp	r5, #0
   d5998:	d1ee      	bne.n	d5978 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d599a:	f7ff ffb9 	bl	d5910 <_ZN5Print5writeEPKc>
}
   d599e:	b00b      	add	sp, #44	; 0x2c
   d59a0:	bd30      	pop	{r4, r5, pc}

000d59a2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d59a2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d59a4:	b92a      	cbnz	r2, d59b2 <_ZN5Print5printEmi+0x10>
   d59a6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d59a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d59ac:	689b      	ldr	r3, [r3, #8]
   d59ae:	b2c9      	uxtb	r1, r1
   d59b0:	4718      	bx	r3
  else return printNumber(n, base);
   d59b2:	b2d2      	uxtb	r2, r2
}
   d59b4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d59b8:	f7ff bfd3 	b.w	d5962 <_ZN5Print11printNumberEmh>

000d59bc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d59bc:	f7ff bff1 	b.w	d59a2 <_ZN5Print5printEmi>

000d59c0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d59c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59c4:	4607      	mov	r7, r0
   d59c6:	460e      	mov	r6, r1
  if (base == 0) {
   d59c8:	4615      	mov	r5, r2
   d59ca:	b92a      	cbnz	r2, d59d8 <_ZN5Print5printEli+0x18>
    return write(n);
   d59cc:	6803      	ldr	r3, [r0, #0]
   d59ce:	b2c9      	uxtb	r1, r1
   d59d0:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d59d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d59d6:	4718      	bx	r3
  } else if (base == 10) {
   d59d8:	2a0a      	cmp	r2, #10
   d59da:	d102      	bne.n	d59e2 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d59dc:	2900      	cmp	r1, #0
   d59de:	da01      	bge.n	d59e4 <_ZN5Print5printEli+0x24>
   d59e0:	e004      	b.n	d59ec <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d59e2:	b2d2      	uxtb	r2, r2
  }
}
   d59e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d59e8:	f7ff bfbb 	b.w	d5962 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d59ec:	212d      	movs	r1, #45	; 0x2d
   d59ee:	f7ff ff9f 	bl	d5930 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d59f2:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d59f4:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d59f6:	4271      	negs	r1, r6
   d59f8:	4638      	mov	r0, r7
   d59fa:	f7ff ffb2 	bl	d5962 <_ZN5Print11printNumberEmh>
   d59fe:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a04 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5a04:	f7ff bfdc 	b.w	d59c0 <_ZN5Print5printEli>

000d5a08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5a08:	4b01      	ldr	r3, [pc, #4]	; (d5a10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a0a:	4a02      	ldr	r2, [pc, #8]	; (d5a14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a0c:	601a      	str	r2, [r3, #0]
   d5a0e:	4770      	bx	lr
   d5a10:	2003e3b4 	.word	0x2003e3b4
   d5a14:	000d72a7 	.word	0x000d72a7

000d5a18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d5a18:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5a1a:	2000      	movs	r0, #0
   d5a1c:	f7ff fbde 	bl	d51dc <spark_sync_time_pending>
   d5a20:	b128      	cbz	r0, d5a2e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5a22:	f7ff fbb3 	bl	d518c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d5a26:	f080 0001 	eor.w	r0, r0, #1
   d5a2a:	b2c0      	uxtb	r0, r0
   d5a2c:	bd08      	pop	{r3, pc}
   d5a2e:	2001      	movs	r0, #1
    }
   d5a30:	bd08      	pop	{r3, pc}

000d5a32 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d5a32:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d5a34:	2000      	movs	r0, #0
   d5a36:	f7ff f9f3 	bl	d4e20 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	b968      	cbnz	r0, d5a5a <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d5a3e:	f7ff faef 	bl	d5020 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d5a42:	2801      	cmp	r0, #1
   d5a44:	d10b      	bne.n	d5a5e <_ZN9TimeClass7isValidEv+0x2c>
   d5a46:	4620      	mov	r0, r4
   d5a48:	f7ff fb12 	bl	d5070 <system_thread_get_state>
   d5a4c:	b938      	cbnz	r0, d5a5e <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d5a4e:	f7ff ffe3 	bl	d5a18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d5a52:	b930      	cbnz	r0, d5a62 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d5a54:	f7ff fb82 	bl	d515c <spark_process>
   d5a58:	e7f9      	b.n	d5a4e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d5a5a:	2001      	movs	r0, #1
   d5a5c:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d5a5e:	2000      	movs	r0, #0
   d5a60:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d5a62:	f7ff ffd9 	bl	d5a18 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d5a66:	2000      	movs	r0, #0
   d5a68:	f7ff f9da 	bl	d4e20 <HAL_RTC_Time_Is_Valid>
   d5a6c:	3000      	adds	r0, #0
   d5a6e:	bf18      	it	ne
   d5a70:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d5a72:	bd10      	pop	{r4, pc}

000d5a74 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d5a74:	b508      	push	{r3, lr}
    (void)isValid();
   d5a76:	f7ff ffdc 	bl	d5a32 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d5a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d5a7e:	f7ff b9c7 	b.w	d4e10 <HAL_RTC_Get_UnixTime>
	...

000d5a84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a84:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a86:	681a      	ldr	r2, [r3, #0]
   d5a88:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a8a:	601a      	str	r2, [r3, #0]
   d5a8c:	4770      	bx	lr
   d5a8e:	bf00      	nop
   d5a90:	2003e2cc 	.word	0x2003e2cc
   d5a94:	2003e3b8 	.word	0x2003e3b8

000d5a98 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5a98:	2100      	movs	r1, #0
   d5a9a:	f7ff bad1 	b.w	d5040 <system_delay_ms>

000d5a9e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a9e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5aa0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5aa2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5aa4:	b113      	cbz	r3, d5aac <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5aa6:	2203      	movs	r2, #3
   d5aa8:	4601      	mov	r1, r0
   d5aaa:	4798      	blx	r3
    }
   d5aac:	4620      	mov	r0, r4
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5ab0:	b510      	push	{r4, lr}
   d5ab2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5ab4:	f7ff fff3 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bd10      	pop	{r4, pc}

000d5abc <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5abc:	b513      	push	{r0, r1, r4, lr}
   d5abe:	460b      	mov	r3, r1
   d5ac0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ac2:	c803      	ldmia	r0, {r0, r1}
   d5ac4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5ac8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5acc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5ad0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5ad4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5ad8:	b002      	add	sp, #8
   d5ada:	bd10      	pop	{r4, pc}

000d5adc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5adc:	4803      	ldr	r0, [pc, #12]	; (d5aec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5ade:	4a04      	ldr	r2, [pc, #16]	; (d5af0 <_GLOBAL__sub_I_RGB+0x14>)
   d5ae0:	4904      	ldr	r1, [pc, #16]	; (d5af4 <_GLOBAL__sub_I_RGB+0x18>)
   d5ae2:	2300      	movs	r3, #0
   d5ae4:	6083      	str	r3, [r0, #8]
   d5ae6:	f001 b817 	b.w	d6b18 <__aeabi_atexit>
   d5aea:	bf00      	nop
   d5aec:	2003e3bc 	.word	0x2003e3bc
   d5af0:	2003e338 	.word	0x2003e338
   d5af4:	000d5ab1 	.word	0x000d5ab1

000d5af8 <_ZN14CellularSignalD1Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5af8:	4770      	bx	lr

000d5afa <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   d5afa:	7d00      	ldrb	r0, [r0, #20]
   d5afc:	4770      	bx	lr
	...

000d5b00 <_ZNK14CellularSignal16getStrengthValueEv>:
    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   d5b00:	7d03      	ldrb	r3, [r0, #20]
   d5b02:	b11b      	cbz	r3, d5b0c <_ZNK14CellularSignal16getStrengthValueEv+0xc>
   d5b04:	6983      	ldr	r3, [r0, #24]
   d5b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5b0a:	d102      	bne.n	d5b12 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
   d5b0c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5b24 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   d5b10:	4770      	bx	lr
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
   d5b12:	ee07 3a90 	vmov	s15, r3
   d5b16:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5b28 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
   d5b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b1e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5b22:	4770      	bx	lr
   d5b24:	00000000 	.word	0x00000000
   d5b28:	42c80000 	.word	0x42c80000

000d5b2c <_ZNK14CellularSignal15getQualityValueEv>:
    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   d5b2c:	7d03      	ldrb	r3, [r0, #20]
   d5b2e:	b11b      	cbz	r3, d5b38 <_ZNK14CellularSignal15getQualityValueEv+0xc>
   d5b30:	6a03      	ldr	r3, [r0, #32]
   d5b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   d5b36:	d102      	bne.n	d5b3e <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
   d5b38:	ed9f 0a05 	vldr	s0, [pc, #20]	; d5b50 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   d5b3c:	4770      	bx	lr
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
   d5b3e:	ee07 3a90 	vmov	s15, r3
   d5b42:	ed9f 7a04 	vldr	s14, [pc, #16]	; d5b54 <_ZNK14CellularSignal15getQualityValueEv+0x28>
   d5b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d5b4a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }

    return 0.0f;
}
   d5b4e:	4770      	bx	lr
   d5b50:	00000000 	.word	0x00000000
   d5b54:	42c80000 	.word	0x42c80000

000d5b58 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
   d5b58:	b570      	push	{r4, r5, r6, lr}
   d5b5a:	460d      	mov	r5, r1
   d5b5c:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5b5e:	220a      	movs	r2, #10
   d5b60:	6881      	ldr	r1, [r0, #8]
   d5b62:	4628      	mov	r0, r5
   d5b64:	f7ff ff4e 	bl	d5a04 <_ZN5Print5printEii>
    n += p.print(',');
   d5b68:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
   d5b6a:	4604      	mov	r4, r0
    n += p.print(',');
   d5b6c:	4628      	mov	r0, r5
   d5b6e:	f7ff fedf 	bl	d5930 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
   d5b72:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
   d5b74:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
   d5b76:	68f1      	ldr	r1, [r6, #12]
   d5b78:	4628      	mov	r0, r5
   d5b7a:	f7ff ff43 	bl	d5a04 <_ZN5Print5printEii>
    return n;
}
   d5b7e:	4420      	add	r0, r4
   d5b80:	bd70      	pop	{r4, r5, r6, pc}

000d5b82 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   d5b82:	f1a0 0004 	sub.w	r0, r0, #4
   d5b86:	f7ff bfe7 	b.w	d5b58 <_ZNK14CellularSignal7printToER5Print>

000d5b8a <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   d5b8a:	b510      	push	{r4, lr}
   d5b8c:	2128      	movs	r1, #40	; 0x28
   d5b8e:	4604      	mov	r4, r0
   d5b90:	f000 ffc7 	bl	d6b22 <_ZdlPvj>
   d5b94:	4620      	mov	r0, r4
   d5b96:	bd10      	pop	{r4, pc}

000d5b98 <_ZNK14CellularSignal10getQualityEv>:
    return 0.0f;
}

float CellularSignal::getQuality() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   d5b98:	7d03      	ldrb	r3, [r0, #20]
   d5b9a:	b17b      	cbz	r3, d5bbc <_ZNK14CellularSignal10getQualityEv+0x24>
   d5b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5b9e:	2b00      	cmp	r3, #0
   d5ba0:	db0c      	blt.n	d5bbc <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   d5ba2:	ee07 3a90 	vmov	s15, r3
   d5ba6:	eddf 6a07 	vldr	s13, [pc, #28]	; d5bc4 <_ZNK14CellularSignal10getQualityEv+0x2c>
   d5baa:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5bc8 <_ZNK14CellularSignal10getQualityEv+0x30>
   d5bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5bb6:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5bba:	4770      	bx	lr
    }

    return -1.0f;
   d5bbc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5bc0:	4770      	bx	lr
   d5bc2:	bf00      	nop
   d5bc4:	477fff00 	.word	0x477fff00
   d5bc8:	42c80000 	.word	0x42c80000

000d5bcc <_ZNK14CellularSignal11getStrengthEv>:
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   d5bcc:	7d03      	ldrb	r3, [r0, #20]
   d5bce:	b17b      	cbz	r3, d5bf0 <_ZNK14CellularSignal11getStrengthEv+0x24>
   d5bd0:	69c3      	ldr	r3, [r0, #28]
   d5bd2:	2b00      	cmp	r3, #0
   d5bd4:	db0c      	blt.n	d5bf0 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   d5bd6:	ee07 3a90 	vmov	s15, r3
   d5bda:	eddf 6a07 	vldr	s13, [pc, #28]	; d5bf8 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   d5bde:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5bfc <_ZNK14CellularSignal11getStrengthEv+0x30>
   d5be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   d5be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
   d5bea:	ee27 0a80 	vmul.f32	s0, s15, s0
   d5bee:	4770      	bx	lr
    }

    return -1.0f;
   d5bf0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   d5bf4:	4770      	bx	lr
   d5bf6:	bf00      	nop
   d5bf8:	477fff00 	.word	0x477fff00
   d5bfc:	42c80000 	.word	0x42c80000

000d5c00 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
   d5c00:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   d5c02:	460d      	mov	r5, r1
   d5c04:	f100 0410 	add.w	r4, r0, #16
   d5c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c0c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5c10:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
   d5c14:	2001      	movs	r0, #1
   d5c16:	bd30      	pop	{r4, r5, pc}

000d5c18 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5c18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c1a:	4b0c      	ldr	r3, [pc, #48]	; (d5c4c <serialEventRun+0x34>)
   d5c1c:	b133      	cbz	r3, d5c2c <serialEventRun+0x14>
   d5c1e:	f000 fbfd 	bl	d641c <_Z16_fetch_usbserialv>
   d5c22:	6803      	ldr	r3, [r0, #0]
   d5c24:	691b      	ldr	r3, [r3, #16]
   d5c26:	4798      	blx	r3
   d5c28:	2800      	cmp	r0, #0
   d5c2a:	dc09      	bgt.n	d5c40 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5c2c:	4b08      	ldr	r3, [pc, #32]	; (d5c50 <serialEventRun+0x38>)
   d5c2e:	b163      	cbz	r3, d5c4a <serialEventRun+0x32>
   d5c30:	f000 fcf8 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d5c34:	6803      	ldr	r3, [r0, #0]
   d5c36:	691b      	ldr	r3, [r3, #16]
   d5c38:	4798      	blx	r3
   d5c3a:	2800      	cmp	r0, #0
   d5c3c:	dc03      	bgt.n	d5c46 <serialEventRun+0x2e>
   d5c3e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5c40:	f3af 8000 	nop.w
   d5c44:	e7f2      	b.n	d5c2c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5c46:	f3af 8000 	nop.w
   d5c4a:	bd08      	pop	{r3, pc}
	...

000d5c54 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5c54:	b508      	push	{r3, lr}
	serialEventRun();
   d5c56:	f7ff ffdf 	bl	d5c18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5c5a:	f7ff f8d1 	bl	d4e00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5c5e:	4b01      	ldr	r3, [pc, #4]	; (d5c64 <_post_loop+0x10>)
   d5c60:	6018      	str	r0, [r3, #0]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	2003e734 	.word	0x2003e734

000d5c68 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5c68:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5c6a:	2300      	movs	r3, #0
   d5c6c:	9300      	str	r3, [sp, #0]
   d5c6e:	461a      	mov	r2, r3
   d5c70:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5c74:	f7ff fa0e 	bl	d5094 <system_ctrl_set_result>
}
   d5c78:	b003      	add	sp, #12
   d5c7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5c80 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5c80:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5c82:	8843      	ldrh	r3, [r0, #2]
   d5c84:	2b0a      	cmp	r3, #10
   d5c86:	d008      	beq.n	d5c9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5c88:	2b50      	cmp	r3, #80	; 0x50
   d5c8a:	d109      	bne.n	d5ca0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5c8c:	4b09      	ldr	r3, [pc, #36]	; (d5cb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5c8e:	681b      	ldr	r3, [r3, #0]
   d5c90:	b13b      	cbz	r3, d5ca2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5c92:	b003      	add	sp, #12
   d5c94:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5c98:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5c9a:	f7ff ffe5 	bl	d5c68 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5c9e:	e006      	b.n	d5cae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5ca0:	2300      	movs	r3, #0
   d5ca2:	9300      	str	r3, [sp, #0]
   d5ca4:	461a      	mov	r2, r3
   d5ca6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5caa:	f7ff f9f3 	bl	d5094 <system_ctrl_set_result>
        break;
    }
}
   d5cae:	b003      	add	sp, #12
   d5cb0:	f85d fb04 	ldr.w	pc, [sp], #4
   d5cb4:	2003e3cc 	.word	0x2003e3cc

000d5cb8 <module_user_init_hook>:

void module_user_init_hook()
{
   d5cb8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5cba:	f7ff f899 	bl	d4df0 <HAL_RNG_GetRandomNumber>
   d5cbe:	4604      	mov	r4, r0
    srand(seed);
   d5cc0:	f001 f8d0 	bl	d6e64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5cc4:	4b07      	ldr	r3, [pc, #28]	; (d5ce4 <module_user_init_hook+0x2c>)
   d5cc6:	b113      	cbz	r3, d5cce <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5cc8:	4620      	mov	r0, r4
   d5cca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5cce:	2100      	movs	r1, #0
   d5cd0:	4804      	ldr	r0, [pc, #16]	; (d5ce4 <module_user_init_hook+0x2c>)
   d5cd2:	f7ff fa8b 	bl	d51ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5cd6:	2100      	movs	r1, #0
   d5cd8:	4803      	ldr	r0, [pc, #12]	; (d5ce8 <module_user_init_hook+0x30>)
}
   d5cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5cde:	f7ff b9cf 	b.w	d5080 <system_ctrl_set_app_request_handler>
   d5ce2:	bf00      	nop
   d5ce4:	00000000 	.word	0x00000000
   d5ce8:	000d5c81 	.word	0x000d5c81

000d5cec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cec:	4770      	bx	lr

000d5cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5cee:	2000      	movs	r0, #0
   d5cf0:	4770      	bx	lr

000d5cf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cf2:	b510      	push	{r4, lr}
   d5cf4:	2110      	movs	r1, #16
   d5cf6:	4604      	mov	r4, r0
   d5cf8:	f000 ff13 	bl	d6b22 <_ZdlPvj>
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	bd10      	pop	{r4, pc}

000d5d00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5d00:	b508      	push	{r3, lr}
      { delete this; }
   d5d02:	b108      	cbz	r0, d5d08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5d04:	f7ff fff5 	bl	d5cf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5d08:	bd08      	pop	{r3, pc}

000d5d0a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d0a:	2200      	movs	r2, #0
   d5d0c:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5d0e:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5d10:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5d14:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d16:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5d1a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d1c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d1e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5d20:	680c      	ldr	r4, [r1, #0]
   d5d22:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d24:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5d26:	bd10      	pop	{r4, pc}

000d5d28 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d28:	b510      	push	{r4, lr}
   d5d2a:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d2c:	6800      	ldr	r0, [r0, #0]
   d5d2e:	f7ff fa6d 	bl	d520c <free>
}
   d5d32:	4620      	mov	r0, r4
   d5d34:	bd10      	pop	{r4, pc}

000d5d36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5d36:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d38:	68c4      	ldr	r4, [r0, #12]
   d5d3a:	b1f4      	cbz	r4, d5d7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5d3c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d3e:	2b02      	cmp	r3, #2
   d5d40:	d103      	bne.n	d5d4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5d42:	f104 000c 	add.w	r0, r4, #12
   d5d46:	f7ff ffef 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5d4a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5d4c:	b135      	cbz	r5, d5d5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d4e:	4628      	mov	r0, r5
   d5d50:	f7ff fea5 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
   d5d54:	2110      	movs	r1, #16
   d5d56:	4628      	mov	r0, r5
   d5d58:	f000 fee3 	bl	d6b22 <_ZdlPvj>
   d5d5c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5d5e:	b135      	cbz	r5, d5d6e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5d60:	4628      	mov	r0, r5
   d5d62:	f7ff fe9c 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
   d5d66:	2110      	movs	r1, #16
   d5d68:	4628      	mov	r0, r5
   d5d6a:	f000 feda 	bl	d6b22 <_ZdlPvj>
   d5d6e:	4620      	mov	r0, r4
   d5d70:	2114      	movs	r1, #20
   d5d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5d76:	f000 bed4 	b.w	d6b22 <_ZdlPvj>
   d5d7a:	bd38      	pop	{r3, r4, r5, pc}

000d5d7c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5d7c:	b513      	push	{r0, r1, r4, lr}
   d5d7e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5d80:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5d84:	2300      	movs	r3, #0
   d5d86:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5d88:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5d8a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5d8c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d8e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5d90:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5d92:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d94:	f7fe fc12 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d98:	4620      	mov	r0, r4
   d5d9a:	b002      	add	sp, #8
   d5d9c:	bd10      	pop	{r4, pc}

000d5d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5da0:	460c      	mov	r4, r1
   d5da2:	ad02      	add	r5, sp, #8
   d5da4:	f854 3b04 	ldr.w	r3, [r4], #4
   d5da8:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5dac:	4606      	mov	r6, r0
   d5dae:	460f      	mov	r7, r1
   d5db0:	a801      	add	r0, sp, #4
   d5db2:	4621      	mov	r1, r4
   d5db4:	f7ff fd87 	bl	d58c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5db8:	4629      	mov	r1, r5
   d5dba:	4630      	mov	r0, r6
   d5dbc:	f7ff ffde 	bl	d5d7c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dc0:	a801      	add	r0, sp, #4
   d5dc2:	f7fe fbfb 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dc6:	4620      	mov	r0, r4
   d5dc8:	f7fe fbf8 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5dcc:	4638      	mov	r0, r7
   d5dce:	2108      	movs	r1, #8
   d5dd0:	f000 fea7 	bl	d6b22 <_ZdlPvj>
        return p;
    }
   d5dd4:	4630      	mov	r0, r6
   d5dd6:	b003      	add	sp, #12
   d5dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5ddc:	b538      	push	{r3, r4, r5, lr}
   d5dde:	2300      	movs	r3, #0
   d5de0:	4604      	mov	r4, r0
   d5de2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5de4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5de6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5de8:	f7fe f955 	bl	d4096 <_Znwj>
   d5dec:	b128      	cbz	r0, d5dfa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5dee:	2301      	movs	r3, #1
   d5df0:	6043      	str	r3, [r0, #4]
   d5df2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5df4:	4b02      	ldr	r3, [pc, #8]	; (d5e00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5df6:	6003      	str	r3, [r0, #0]
   d5df8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5dfa:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5dfc:	4620      	mov	r0, r4
   d5dfe:	bd38      	pop	{r3, r4, r5, pc}
   d5e00:	000d737c 	.word	0x000d737c

000d5e04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e04:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e06:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e08:	b90a      	cbnz	r2, d5e0e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e0a:	f000 fe8c 	bl	d6b26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e0e:	68c3      	ldr	r3, [r0, #12]
    }
   d5e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e14:	4718      	bx	r3

000d5e16 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e16:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e18:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e1a:	f100 0110 	add.w	r1, r0, #16
   d5e1e:	f7ff fff1 	bl	d5e04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5e22:	bd08      	pop	{r3, pc}

000d5e24 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e24:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5e26:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5e28:	b90a      	cbnz	r2, d5e2e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e2a:	f000 fe7c 	bl	d6b26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e2e:	68c3      	ldr	r3, [r0, #12]
    }
   d5e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e34:	4718      	bx	r3

000d5e36 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e36:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5e38:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5e3a:	f100 0110 	add.w	r1, r0, #16
   d5e3e:	f7ff fff1 	bl	d5e24 <_ZNKSt8functionIFvRKbEEclES1_>
   d5e42:	bd08      	pop	{r3, pc}

000d5e44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e44:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5e46:	2300      	movs	r3, #0
   d5e48:	6083      	str	r3, [r0, #8]
   d5e4a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5e4c:	4604      	mov	r4, r0
   d5e4e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5e50:	b12b      	cbz	r3, d5e5e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e52:	2202      	movs	r2, #2
   d5e54:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e56:	68eb      	ldr	r3, [r5, #12]
   d5e58:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e5a:	68ab      	ldr	r3, [r5, #8]
   d5e5c:	60a3      	str	r3, [r4, #8]
	}
    }
   d5e5e:	4620      	mov	r0, r4
   d5e60:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5e66:	b089      	sub	sp, #36	; 0x24
   d5e68:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5e6a:	4668      	mov	r0, sp
   d5e6c:	f7ff ff4d 	bl	d5d0a <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5e70:	2300      	movs	r3, #0
   d5e72:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5e76:	f04f 0202 	mov.w	r2, #2
   d5e7a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d5e7e:	2b00      	cmp	r3, #0
   d5e80:	d103      	bne.n	d5e8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5e82:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5e86:	2900      	cmp	r1, #0
   d5e88:	d1f7      	bne.n	d5e7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5e8a:	d002      	beq.n	d5e92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5e8c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5e90:	e063      	b.n	d5f5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5e92:	f114 050c 	adds.w	r5, r4, #12
   d5e96:	d003      	beq.n	d5ea0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5e98:	4669      	mov	r1, sp
   d5e9a:	4628      	mov	r0, r5
   d5e9c:	f7ff ff35 	bl	d5d0a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5ea0:	f3bf 8f5f 	dmb	sy
   d5ea4:	2301      	movs	r3, #1
   d5ea6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5ea8:	2000      	movs	r0, #0
   d5eaa:	f104 0308 	add.w	r3, r4, #8
   d5eae:	f3bf 8f5f 	dmb	sy
   d5eb2:	e853 6f00 	ldrex	r6, [r3]
   d5eb6:	e843 0200 	strex	r2, r0, [r3]
   d5eba:	2a00      	cmp	r2, #0
   d5ebc:	d1f9      	bne.n	d5eb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5ebe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5ec2:	2e00      	cmp	r6, #0
   d5ec4:	d049      	beq.n	d5f5a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ec6:	f7ff f8c3 	bl	d5050 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5eca:	b120      	cbz	r0, d5ed6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5ecc:	4629      	mov	r1, r5
   d5ece:	4630      	mov	r0, r6
   d5ed0:	f7ff ff98 	bl	d5e04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5ed4:	e03a      	b.n	d5f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5ed6:	4631      	mov	r1, r6
   d5ed8:	a802      	add	r0, sp, #8
   d5eda:	f7ff ffb3 	bl	d5e44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5ede:	68e0      	ldr	r0, [r4, #12]
   d5ee0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5ee4:	b108      	cbz	r0, d5eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d5ee6:	f000 fff7 	bl	d6ed8 <strdup>
   d5eea:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5eec:	2010      	movs	r0, #16
   d5eee:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5ef2:	f7fe f8d0 	bl	d4096 <_Znwj>
   d5ef6:	4605      	mov	r5, r0
   d5ef8:	b1e8      	cbz	r0, d5f36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5efa:	2700      	movs	r7, #0
   d5efc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5efe:	2018      	movs	r0, #24
   d5f00:	f7fe f8c9 	bl	d4096 <_Znwj>
   d5f04:	4604      	mov	r4, r0
   d5f06:	b188      	cbz	r0, d5f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f08:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5f0a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5f0c:	a802      	add	r0, sp, #8
   d5f0e:	f7ff fdd5 	bl	d5abc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f12:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f14:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f16:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f18:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5f1a:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f1c:	a906      	add	r1, sp, #24
   d5f1e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f20:	60e3      	str	r3, [r4, #12]
   d5f22:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f26:	9205      	str	r2, [sp, #20]
   d5f28:	f7ff feef 	bl	d5d0a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5f2c:	4b0d      	ldr	r3, [pc, #52]	; (d5f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5f2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f30:	4b0d      	ldr	r3, [pc, #52]	; (d5f68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f32:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5f34:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5f36:	a806      	add	r0, sp, #24
   d5f38:	f7ff fef6 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f3c:	a802      	add	r0, sp, #8
   d5f3e:	f7ff fdae 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f42:	2200      	movs	r2, #0
   d5f44:	4629      	mov	r1, r5
   d5f46:	4809      	ldr	r0, [pc, #36]	; (d5f6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5f48:	f7ff f88a 	bl	d5060 <application_thread_invoke>
   d5f4c:	4630      	mov	r0, r6
   d5f4e:	f7ff fda6 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5f52:	2110      	movs	r1, #16
   d5f54:	4630      	mov	r0, r6
   d5f56:	f000 fde4 	bl	d6b22 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5f5a:	4668      	mov	r0, sp
   d5f5c:	f7ff fee4 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
    }
   d5f60:	b009      	add	sp, #36	; 0x24
   d5f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f64:	000d5e17 	.word	0x000d5e17
   d5f68:	000d608d 	.word	0x000d608d
   d5f6c:	000d6671 	.word	0x000d6671

000d5f70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f74:	b08b      	sub	sp, #44	; 0x2c
   d5f76:	4606      	mov	r6, r0
   d5f78:	460f      	mov	r7, r1
   d5f7a:	4690      	mov	r8, r2
   d5f7c:	4699      	mov	r9, r3
   d5f7e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5f82:	f7ff f903 	bl	d518c <spark_cloud_flag_connected>
   d5f86:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d5f88:	4683      	mov	fp, r0
   d5f8a:	bb30      	cbnz	r0, d5fda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5f8c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5f90:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5f92:	a905      	add	r1, sp, #20
   d5f94:	4628      	mov	r0, r5
   d5f96:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5f9a:	f7ff feb6 	bl	d5d0a <_ZN8particle5ErrorC1EOS0_>
   d5f9e:	2014      	movs	r0, #20
   d5fa0:	f7fe f879 	bl	d4096 <_Znwj>
   d5fa4:	4604      	mov	r4, r0
   d5fa6:	b158      	cbz	r0, d5fc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5fa8:	2302      	movs	r3, #2
   d5faa:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fac:	2301      	movs	r3, #1
   d5fae:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5fb0:	f8c0 b004 	str.w	fp, [r0, #4]
   d5fb4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5fb8:	4629      	mov	r1, r5
   d5fba:	300c      	adds	r0, #12
   d5fbc:	f7ff fea5 	bl	d5d0a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5fc0:	4630      	mov	r0, r6
   d5fc2:	4621      	mov	r1, r4
   d5fc4:	f840 4b04 	str.w	r4, [r0], #4
   d5fc8:	f7ff ff08 	bl	d5ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5fcc:	4628      	mov	r0, r5
   d5fce:	f7ff feab 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5fd2:	a805      	add	r0, sp, #20
   d5fd4:	f7ff fea8 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
   d5fd8:	e052      	b.n	d6080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5fda:	2400      	movs	r4, #0
   d5fdc:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5fde:	2014      	movs	r0, #20
   d5fe0:	606c      	str	r4, [r5, #4]
   d5fe2:	60ac      	str	r4, [r5, #8]
   d5fe4:	9307      	str	r3, [sp, #28]
   d5fe6:	f7fe f856 	bl	d4096 <_Znwj>
   d5fea:	4601      	mov	r1, r0
   d5fec:	b118      	cbz	r0, d5ff6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5fee:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ff0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5ff2:	6044      	str	r4, [r0, #4]
   d5ff4:	6084      	str	r4, [r0, #8]
   d5ff6:	a804      	add	r0, sp, #16
   d5ff8:	9103      	str	r1, [sp, #12]
   d5ffa:	f7ff feef 	bl	d5ddc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5ffe:	4b22      	ldr	r3, [pc, #136]	; (d6088 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6000:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6002:	2008      	movs	r0, #8
   d6004:	f7fe f847 	bl	d4096 <_Znwj>
   d6008:	4604      	mov	r4, r0
   d600a:	b128      	cbz	r0, d6018 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d600c:	9b03      	ldr	r3, [sp, #12]
   d600e:	f840 3b04 	str.w	r3, [r0], #4
   d6012:	a904      	add	r1, sp, #16
   d6014:	f7ff fc57 	bl	d58c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6018:	9500      	str	r5, [sp, #0]
   d601a:	fa5f f38a 	uxtb.w	r3, sl
   d601e:	464a      	mov	r2, r9
   d6020:	4641      	mov	r1, r8
   d6022:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6024:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6026:	f7ff f8c1 	bl	d51ac <spark_send_event>
   d602a:	b920      	cbnz	r0, d6036 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d602c:	9b03      	ldr	r3, [sp, #12]
   d602e:	785b      	ldrb	r3, [r3, #1]
   d6030:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6034:	b183      	cbz	r3, d6058 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6036:	9b03      	ldr	r3, [sp, #12]
   d6038:	9305      	str	r3, [sp, #20]
   d603a:	a904      	add	r1, sp, #16
   d603c:	a806      	add	r0, sp, #24
   d603e:	f7ff fc42 	bl	d58c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6042:	a905      	add	r1, sp, #20
   d6044:	4630      	mov	r0, r6
   d6046:	f7ff fe99 	bl	d5d7c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d604a:	a806      	add	r0, sp, #24
   d604c:	f7fe fab6 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6050:	a804      	add	r0, sp, #16
   d6052:	f7fe fab3 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6056:	e013      	b.n	d6080 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6058:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d605c:	a905      	add	r1, sp, #20
   d605e:	a803      	add	r0, sp, #12
   d6060:	9205      	str	r2, [sp, #20]
   d6062:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6066:	f7ff fefd 	bl	d5e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d606a:	a805      	add	r0, sp, #20
   d606c:	f7ff fe5c 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6070:	a805      	add	r0, sp, #20
   d6072:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6074:	f7ff fe93 	bl	d5d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6078:	a806      	add	r0, sp, #24
   d607a:	f7fe fa9f 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d607e:	e7da      	b.n	d6036 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6080:	4630      	mov	r0, r6
   d6082:	b00b      	add	sp, #44	; 0x2c
   d6084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6088:	000d61fd 	.word	0x000d61fd

000d608c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d608c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d608e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6090:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6092:	d006      	beq.n	d60a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6094:	2a03      	cmp	r2, #3
   d6096:	d017      	beq.n	d60c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6098:	2a01      	cmp	r2, #1
   d609a:	d122      	bne.n	d60e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d609c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d609e:	6003      	str	r3, [r0, #0]
	      break;
   d60a0:	e01f      	b.n	d60e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60a2:	2018      	movs	r0, #24
   d60a4:	680e      	ldr	r6, [r1, #0]
   d60a6:	f7fd fff6 	bl	d4096 <_Znwj>
   d60aa:	4605      	mov	r5, r0
   d60ac:	b150      	cbz	r0, d60c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d60ae:	4631      	mov	r1, r6
   d60b0:	f7ff fec8 	bl	d5e44 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d60b4:	6930      	ldr	r0, [r6, #16]
   d60b6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d60ba:	b108      	cbz	r0, d60c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d60bc:	f000 ff0c 	bl	d6ed8 <strdup>
   d60c0:	6128      	str	r0, [r5, #16]
   d60c2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d60c4:	6025      	str	r5, [r4, #0]
   d60c6:	e00c      	b.n	d60e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d60c8:	6804      	ldr	r4, [r0, #0]
   d60ca:	b154      	cbz	r4, d60e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d60cc:	f104 0010 	add.w	r0, r4, #16
   d60d0:	f7ff fe2a 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d60d4:	4620      	mov	r0, r4
   d60d6:	f7ff fce2 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d60da:	2118      	movs	r1, #24
   d60dc:	4620      	mov	r0, r4
   d60de:	f000 fd20 	bl	d6b22 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d60e2:	2000      	movs	r0, #0
   d60e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d60e6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d60e6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d60e8:	2300      	movs	r3, #0
   d60ea:	6083      	str	r3, [r0, #8]
   d60ec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d60ee:	4604      	mov	r4, r0
   d60f0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d60f2:	b12b      	cbz	r3, d6100 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d60f4:	2202      	movs	r2, #2
   d60f6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d60f8:	68eb      	ldr	r3, [r5, #12]
   d60fa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d60fc:	68ab      	ldr	r3, [r5, #8]
   d60fe:	60a3      	str	r3, [r4, #8]
	}
    }
   d6100:	4620      	mov	r0, r4
   d6102:	bd38      	pop	{r3, r4, r5, pc}

000d6104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6104:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6106:	b570      	push	{r4, r5, r6, lr}
   d6108:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d610a:	d006      	beq.n	d611a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d610c:	2a03      	cmp	r2, #3
   d610e:	d011      	beq.n	d6134 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6110:	2a01      	cmp	r2, #1
   d6112:	d118      	bne.n	d6146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6114:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6116:	6003      	str	r3, [r0, #0]
	      break;
   d6118:	e015      	b.n	d6146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d611a:	2014      	movs	r0, #20
   d611c:	680e      	ldr	r6, [r1, #0]
   d611e:	f7fd ffba 	bl	d4096 <_Znwj>
   d6122:	4605      	mov	r5, r0
   d6124:	b120      	cbz	r0, d6130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6126:	4631      	mov	r1, r6
   d6128:	f7ff ffdd 	bl	d60e6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d612c:	7c33      	ldrb	r3, [r6, #16]
   d612e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6130:	6025      	str	r5, [r4, #0]
   d6132:	e008      	b.n	d6146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6134:	6804      	ldr	r4, [r0, #0]
   d6136:	b134      	cbz	r4, d6146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6138:	4620      	mov	r0, r4
   d613a:	f7ff fcb0 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d613e:	2114      	movs	r1, #20
   d6140:	4620      	mov	r0, r4
   d6142:	f000 fcee 	bl	d6b22 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6146:	2000      	movs	r0, #0
   d6148:	bd70      	pop	{r4, r5, r6, pc}
	...

000d614c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d614c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d614e:	2300      	movs	r3, #0
   d6150:	b087      	sub	sp, #28
   d6152:	460c      	mov	r4, r1
   d6154:	f3bf 8f5f 	dmb	sy
   d6158:	e850 6f00 	ldrex	r6, [r0]
   d615c:	e840 3200 	strex	r2, r3, [r0]
   d6160:	2a00      	cmp	r2, #0
   d6162:	d1f9      	bne.n	d6158 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6164:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6168:	2e00      	cmp	r6, #0
   d616a:	d03f      	beq.n	d61ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d616c:	4618      	mov	r0, r3
   d616e:	f7fe ff6f 	bl	d5050 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6172:	4607      	mov	r7, r0
   d6174:	b120      	cbz	r0, d6180 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6176:	4621      	mov	r1, r4
   d6178:	4630      	mov	r0, r6
   d617a:	f7ff fe53 	bl	d5e24 <_ZNKSt8functionIFvRKbEEclES1_>
   d617e:	e02e      	b.n	d61de <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6180:	4631      	mov	r1, r6
   d6182:	a801      	add	r0, sp, #4
   d6184:	f7ff ffaf 	bl	d60e6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6188:	7823      	ldrb	r3, [r4, #0]
   d618a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d618e:	2010      	movs	r0, #16
   d6190:	f7fd ff81 	bl	d4096 <_Znwj>
   d6194:	4605      	mov	r5, r0
   d6196:	b1d0      	cbz	r0, d61ce <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6198:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d619a:	2014      	movs	r0, #20
   d619c:	f7fd ff7b 	bl	d4096 <_Znwj>
   d61a0:	4604      	mov	r4, r0
   d61a2:	b178      	cbz	r0, d61c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61a4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d61a6:	4601      	mov	r1, r0
   d61a8:	a801      	add	r0, sp, #4
   d61aa:	f7ff fc87 	bl	d5abc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ae:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d61b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61b2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61b4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d61b6:	9203      	str	r2, [sp, #12]
   d61b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d61ba:	60e3      	str	r3, [r4, #12]
   d61bc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d61c0:	9204      	str	r2, [sp, #16]
   d61c2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d61c4:	4b0a      	ldr	r3, [pc, #40]	; (d61f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d61c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d61c8:	4b0a      	ldr	r3, [pc, #40]	; (d61f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d61ca:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d61cc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61ce:	a801      	add	r0, sp, #4
   d61d0:	f7ff fc65 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d61d4:	2200      	movs	r2, #0
   d61d6:	4629      	mov	r1, r5
   d61d8:	4807      	ldr	r0, [pc, #28]	; (d61f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d61da:	f7fe ff41 	bl	d5060 <application_thread_invoke>
   d61de:	4630      	mov	r0, r6
   d61e0:	f7ff fc5d 	bl	d5a9e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d61e4:	2110      	movs	r1, #16
   d61e6:	4630      	mov	r0, r6
   d61e8:	f000 fc9b 	bl	d6b22 <_ZdlPvj>
        }
    }
   d61ec:	b007      	add	sp, #28
   d61ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d61f0:	000d5e37 	.word	0x000d5e37
   d61f4:	000d6105 	.word	0x000d6105
   d61f8:	000d6671 	.word	0x000d6671

000d61fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d61fc:	b530      	push	{r4, r5, lr}
   d61fe:	b085      	sub	sp, #20
   d6200:	4604      	mov	r4, r0
   d6202:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6204:	4668      	mov	r0, sp
   d6206:	4611      	mov	r1, r2
   d6208:	f7ff fdc9 	bl	d5d9e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d620c:	b17c      	cbz	r4, d622e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d620e:	b224      	sxth	r4, r4
   d6210:	4628      	mov	r0, r5
   d6212:	b10d      	cbz	r5, d6218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6214:	f000 fe60 	bl	d6ed8 <strdup>
   d6218:	9002      	str	r0, [sp, #8]
   d621a:	a902      	add	r1, sp, #8
   d621c:	4668      	mov	r0, sp
   d621e:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6222:	f7ff fe1f 	bl	d5e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6226:	a802      	add	r0, sp, #8
   d6228:	f7ff fd7e 	bl	d5d28 <_ZN8particle5ErrorD1Ev>
   d622c:	e01d      	b.n	d626a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d622e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6230:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6234:	f04f 0201 	mov.w	r2, #1
   d6238:	e8d0 3f4f 	ldrexb	r3, [r0]
   d623c:	42a3      	cmp	r3, r4
   d623e:	d103      	bne.n	d6248 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6240:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6244:	2900      	cmp	r1, #0
   d6246:	d1f7      	bne.n	d6238 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6248:	d002      	beq.n	d6250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d624a:	f88d 3008 	strb.w	r3, [sp, #8]
   d624e:	e00c      	b.n	d626a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6250:	f110 010c 	adds.w	r1, r0, #12
   d6254:	f04f 0301 	mov.w	r3, #1
   d6258:	bf18      	it	ne
   d625a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d625c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6260:	3004      	adds	r0, #4
   d6262:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6266:	f7ff ff71 	bl	d614c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d626a:	a801      	add	r0, sp, #4
   d626c:	f7fe f9a6 	bl	d45bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6270:	b005      	add	sp, #20
   d6272:	bd30      	pop	{r4, r5, pc}

000d6274 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6274:	4770      	bx	lr

000d6276 <_ZN9IPAddressD0Ev>:
   d6276:	b510      	push	{r4, lr}
   d6278:	2118      	movs	r1, #24
   d627a:	4604      	mov	r4, r0
   d627c:	f000 fc51 	bl	d6b22 <_ZdlPvj>
   d6280:	4620      	mov	r0, r4
   d6282:	bd10      	pop	{r4, pc}

000d6284 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6284:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6286:	7d03      	ldrb	r3, [r0, #20]
   d6288:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d628a:	b08d      	sub	sp, #52	; 0x34
   d628c:	460e      	mov	r6, r1
   d628e:	f100 0704 	add.w	r7, r0, #4
   d6292:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6296:	d002      	beq.n	d629e <_ZNK9IPAddress7printToER5Print+0x1a>
   d6298:	f100 0508 	add.w	r5, r0, #8
   d629c:	e018      	b.n	d62d0 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d629e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62a0:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d62a2:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d62a6:	232f      	movs	r3, #47	; 0x2f
   d62a8:	462a      	mov	r2, r5
   d62aa:	200a      	movs	r0, #10
   d62ac:	f7fe fdf8 	bl	d4ea0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d62b0:	4628      	mov	r0, r5
   d62b2:	f000 fe2c 	bl	d6f0e <strlen>
   d62b6:	6833      	ldr	r3, [r6, #0]
   d62b8:	4602      	mov	r2, r0
   d62ba:	68db      	ldr	r3, [r3, #12]
   d62bc:	4629      	mov	r1, r5
   d62be:	4630      	mov	r0, r6
   d62c0:	4798      	blx	r3
   d62c2:	e00f      	b.n	d62e4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d62c4:	b124      	cbz	r4, d62d0 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d62c6:	212e      	movs	r1, #46	; 0x2e
   d62c8:	4630      	mov	r0, r6
   d62ca:	f7ff fb31 	bl	d5930 <_ZN5Print5printEc>
   d62ce:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d62d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d62d4:	220a      	movs	r2, #10
   d62d6:	4630      	mov	r0, r6
   d62d8:	f7ff fb70 	bl	d59bc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d62dc:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d62de:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d62e0:	d1f0      	bne.n	d62c4 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d62e2:	4620      	mov	r0, r4
    }
    return n;
}
   d62e4:	b00d      	add	sp, #52	; 0x34
   d62e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d62e8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d62e8:	b510      	push	{r4, lr}
   d62ea:	4b05      	ldr	r3, [pc, #20]	; (d6300 <_ZN9IPAddressC1Ev+0x18>)
   d62ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d62ee:	2211      	movs	r2, #17
   d62f0:	f840 3b04 	str.w	r3, [r0], #4
   d62f4:	2100      	movs	r1, #0
   d62f6:	f000 fdad 	bl	d6e54 <memset>
{
    clear();
}
   d62fa:	4620      	mov	r0, r4
   d62fc:	bd10      	pop	{r4, pc}
   d62fe:	bf00      	nop
   d6300:	000d7398 	.word	0x000d7398

000d6304 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6304:	4603      	mov	r3, r0
   d6306:	4a07      	ldr	r2, [pc, #28]	; (d6324 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6308:	b510      	push	{r4, lr}
   d630a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d630e:	f101 0210 	add.w	r2, r1, #16
   d6312:	f851 4b04 	ldr.w	r4, [r1], #4
   d6316:	f843 4b04 	str.w	r4, [r3], #4
   d631a:	4291      	cmp	r1, r2
   d631c:	d1f9      	bne.n	d6312 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d631e:	780a      	ldrb	r2, [r1, #0]
   d6320:	701a      	strb	r2, [r3, #0]
}
   d6322:	bd10      	pop	{r4, pc}
   d6324:	000d7398 	.word	0x000d7398

000d6328 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6328:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d632a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d632e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6332:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6336:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d633a:	2304      	movs	r3, #4
   d633c:	6041      	str	r1, [r0, #4]
   d633e:	7503      	strb	r3, [r0, #20]
   d6340:	bd10      	pop	{r4, pc}

000d6342 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6342:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6344:	780d      	ldrb	r5, [r1, #0]
   d6346:	788b      	ldrb	r3, [r1, #2]
   d6348:	784a      	ldrb	r2, [r1, #1]
   d634a:	78c9      	ldrb	r1, [r1, #3]
   d634c:	9100      	str	r1, [sp, #0]
   d634e:	4629      	mov	r1, r5
   d6350:	f7ff ffea 	bl	d6328 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6354:	b003      	add	sp, #12
   d6356:	bd30      	pop	{r4, r5, pc}

000d6358 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6358:	7441      	strb	r1, [r0, #17]
   d635a:	4770      	bx	lr

000d635c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d635c:	4770      	bx	lr

000d635e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d635e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6360:	2100      	movs	r1, #0
   d6362:	7c00      	ldrb	r0, [r0, #16]
   d6364:	f7fe fe44 	bl	d4ff0 <HAL_USB_USART_Receive_Data>
}
   d6368:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d636c:	bf28      	it	cs
   d636e:	f04f 30ff 	movcs.w	r0, #4294967295
   d6372:	bd08      	pop	{r3, pc}

000d6374 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6374:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6376:	2101      	movs	r1, #1
   d6378:	7c00      	ldrb	r0, [r0, #16]
   d637a:	f7fe fe39 	bl	d4ff0 <HAL_USB_USART_Receive_Data>
}
   d637e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6382:	bf28      	it	cs
   d6384:	f04f 30ff 	movcs.w	r0, #4294967295
   d6388:	bd08      	pop	{r3, pc}

000d638a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d638a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d638c:	7c00      	ldrb	r0, [r0, #16]
   d638e:	f7fe fe27 	bl	d4fe0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6392:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6396:	bd08      	pop	{r3, pc}

000d6398 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6398:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d639a:	7c00      	ldrb	r0, [r0, #16]
   d639c:	f7fe fe18 	bl	d4fd0 <HAL_USB_USART_Available_Data>
}
   d63a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d63a4:	bd08      	pop	{r3, pc}

000d63a6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d63a6:	7c00      	ldrb	r0, [r0, #16]
   d63a8:	f7fe be32 	b.w	d5010 <HAL_USB_USART_Flush_Data>

000d63ac <_ZN9USBSerialD0Ev>:
   d63ac:	b510      	push	{r4, lr}
   d63ae:	2114      	movs	r1, #20
   d63b0:	4604      	mov	r4, r0
   d63b2:	f000 fbb6 	bl	d6b22 <_ZdlPvj>
   d63b6:	4620      	mov	r0, r4
   d63b8:	bd10      	pop	{r4, pc}

000d63ba <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d63ba:	b538      	push	{r3, r4, r5, lr}
   d63bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d63be:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d63c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d63c2:	f7fe fe0d 	bl	d4fe0 <HAL_USB_USART_Available_Data_For_Write>
   d63c6:	2800      	cmp	r0, #0
   d63c8:	dc01      	bgt.n	d63ce <_ZN9USBSerial5writeEh+0x14>
   d63ca:	7c60      	ldrb	r0, [r4, #17]
   d63cc:	b128      	cbz	r0, d63da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d63ce:	4629      	mov	r1, r5
   d63d0:	7c20      	ldrb	r0, [r4, #16]
   d63d2:	f7fe fe15 	bl	d5000 <HAL_USB_USART_Send_Data>
   d63d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d63da:	bd38      	pop	{r3, r4, r5, pc}

000d63dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d63dc:	b510      	push	{r4, lr}
   d63de:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d63e0:	2300      	movs	r3, #0
   d63e2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d63e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d63e8:	60a3      	str	r3, [r4, #8]
   d63ea:	4b05      	ldr	r3, [pc, #20]	; (d6400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d63ec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d63ee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d63f0:	4608      	mov	r0, r1
{
  _serial = serial;
   d63f2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d63f4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d63f6:	4611      	mov	r1, r2
   d63f8:	f7fe fdda 	bl	d4fb0 <HAL_USB_USART_Init>
}
   d63fc:	4620      	mov	r0, r4
   d63fe:	bd10      	pop	{r4, pc}
   d6400:	000d73ac 	.word	0x000d73ac

000d6404 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6404:	2200      	movs	r2, #0
   d6406:	7c00      	ldrb	r0, [r0, #16]
   d6408:	f7fe bdda 	b.w	d4fc0 <HAL_USB_USART_Begin>

000d640c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d640c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d640e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6410:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6412:	2100      	movs	r1, #0
   d6414:	f000 fd1e 	bl	d6e54 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6418:	4620      	mov	r0, r4
   d641a:	bd10      	pop	{r4, pc}

000d641c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d641c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d641e:	4d0e      	ldr	r5, [pc, #56]	; (d6458 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6420:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6422:	a801      	add	r0, sp, #4
   d6424:	f7ff fff2 	bl	d640c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6428:	6829      	ldr	r1, [r5, #0]
   d642a:	f011 0401 	ands.w	r4, r1, #1
   d642e:	d110      	bne.n	d6452 <_Z16_fetch_usbserialv+0x36>
   d6430:	4628      	mov	r0, r5
   d6432:	f7fd fe36 	bl	d40a2 <__cxa_guard_acquire>
   d6436:	b160      	cbz	r0, d6452 <_Z16_fetch_usbserialv+0x36>
   d6438:	aa01      	add	r2, sp, #4
   d643a:	4621      	mov	r1, r4
   d643c:	4807      	ldr	r0, [pc, #28]	; (d645c <_Z16_fetch_usbserialv+0x40>)
   d643e:	f7ff ffcd 	bl	d63dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6442:	4628      	mov	r0, r5
   d6444:	f7fd fe32 	bl	d40ac <__cxa_guard_release>
   d6448:	4a05      	ldr	r2, [pc, #20]	; (d6460 <_Z16_fetch_usbserialv+0x44>)
   d644a:	4906      	ldr	r1, [pc, #24]	; (d6464 <_Z16_fetch_usbserialv+0x48>)
   d644c:	4803      	ldr	r0, [pc, #12]	; (d645c <_Z16_fetch_usbserialv+0x40>)
   d644e:	f000 fb63 	bl	d6b18 <__aeabi_atexit>
	return _usbserial;
}
   d6452:	4802      	ldr	r0, [pc, #8]	; (d645c <_Z16_fetch_usbserialv+0x40>)
   d6454:	b007      	add	sp, #28
   d6456:	bd30      	pop	{r4, r5, pc}
   d6458:	2003e3d0 	.word	0x2003e3d0
   d645c:	2003e3d4 	.word	0x2003e3d4
   d6460:	2003e338 	.word	0x2003e338
   d6464:	000d635d 	.word	0x000d635d

000d6468 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6468:	2200      	movs	r2, #0
   d646a:	4611      	mov	r1, r2
   d646c:	6840      	ldr	r0, [r0, #4]
   d646e:	f7fe be5d 	b.w	d512c <network_listening>

000d6472 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6472:	2200      	movs	r2, #0
   d6474:	4611      	mov	r1, r2
   d6476:	6840      	ldr	r0, [r0, #4]
   d6478:	f7fe be68 	b.w	d514c <network_get_listen_timeout>

000d647c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d647c:	2200      	movs	r2, #0
   d647e:	6840      	ldr	r0, [r0, #4]
   d6480:	f7fe be5c 	b.w	d513c <network_set_listen_timeout>

000d6484 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6484:	2200      	movs	r2, #0
   d6486:	f081 0101 	eor.w	r1, r1, #1
   d648a:	6840      	ldr	r0, [r0, #4]
   d648c:	f7fe be46 	b.w	d511c <network_listen>

000d6490 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6490:	2300      	movs	r3, #0
   d6492:	461a      	mov	r2, r3
   d6494:	4619      	mov	r1, r3
   d6496:	6840      	ldr	r0, [r0, #4]
   d6498:	f7fe be38 	b.w	d510c <network_off>

000d649c <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d649c:	2300      	movs	r3, #0
   d649e:	461a      	mov	r2, r3
   d64a0:	4619      	mov	r1, r3
   d64a2:	6840      	ldr	r0, [r0, #4]
   d64a4:	f7fe be2a 	b.w	d50fc <network_on>

000d64a8 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d64a8:	2200      	movs	r2, #0
   d64aa:	4611      	mov	r1, r2
   d64ac:	6840      	ldr	r0, [r0, #4]
   d64ae:	f7fe be0d 	b.w	d50cc <network_connecting>

000d64b2 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64b2:	2200      	movs	r2, #0
   d64b4:	2102      	movs	r1, #2
   d64b6:	6840      	ldr	r0, [r0, #4]
   d64b8:	f7fe be10 	b.w	d50dc <network_disconnect>

000d64bc <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d64bc:	2300      	movs	r3, #0
   d64be:	461a      	mov	r2, r3
   d64c0:	6840      	ldr	r0, [r0, #4]
   d64c2:	f7fe bdfb 	b.w	d50bc <network_connect>
	...

000d64c8 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   d64c8:	b5f0      	push	{r4, r5, r6, r7, lr}
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
   d64ca:	4b1b      	ldr	r3, [pc, #108]	; (d6538 <_ZN5spark13CellularClass4RSSIEv+0x70>)
   d64cc:	6003      	str	r3, [r0, #0]
   d64ce:	2500      	movs	r5, #0
   d64d0:	460f      	mov	r7, r1
   d64d2:	3328      	adds	r3, #40	; 0x28
   d64d4:	2618      	movs	r6, #24
   d64d6:	b089      	sub	sp, #36	; 0x24
   d64d8:	6043      	str	r3, [r0, #4]
   d64da:	6085      	str	r5, [r0, #8]
   d64dc:	60c5      	str	r5, [r0, #12]
   d64de:	4632      	mov	r2, r6
   d64e0:	4629      	mov	r1, r5
   d64e2:	4604      	mov	r4, r0
   d64e4:	3010      	adds	r0, #16
   d64e6:	f000 fcb5 	bl	d6e54 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   d64ea:	462a      	mov	r2, r5
   d64ec:	4629      	mov	r1, r5
   d64ee:	6878      	ldr	r0, [r7, #4]
   d64f0:	f7fe fdfc 	bl	d50ec <network_ready>
   d64f4:	b908      	cbnz	r0, d64fa <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
   d64f6:	60a0      	str	r0, [r4, #8]
            return sig;
   d64f8:	e01b      	b.n	d6532 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
   d64fa:	4629      	mov	r1, r5
   d64fc:	4632      	mov	r2, r6
   d64fe:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
   d6500:	9500      	str	r5, [sp, #0]
   d6502:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
   d6504:	f000 fca6 	bl	d6e54 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6508:	a902      	add	r1, sp, #8
   d650a:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
   d650c:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
   d6510:	f7fe fd46 	bl	d4fa0 <cellular_signal>
   d6514:	b110      	cbz	r0, d651c <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
   d6516:	2301      	movs	r3, #1
   d6518:	60a3      	str	r3, [r4, #8]
            return sig;
   d651a:	e00a      	b.n	d6532 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
   d651c:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
   d651e:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
   d6520:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
   d6522:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
   d6524:	b90b      	cbnz	r3, d652a <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
   d6526:	2302      	movs	r3, #2
   d6528:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
   d652a:	a902      	add	r1, sp, #8
   d652c:	4620      	mov	r0, r4
   d652e:	f7ff fb67 	bl	d5c00 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   d6532:	4620      	mov	r0, r4
   d6534:	b009      	add	sp, #36	; 0x24
   d6536:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6538:	000d7348 	.word	0x000d7348

000d653c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d653c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d653e:	4c08      	ldr	r4, [pc, #32]	; (d6560 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d6540:	2528      	movs	r5, #40	; 0x28
   d6542:	462a      	mov	r2, r5
   d6544:	2100      	movs	r1, #0
   d6546:	4620      	mov	r0, r4
   d6548:	f000 fc84 	bl	d6e54 <memset>
        cid = -1;
   d654c:	f04f 33ff 	mov.w	r3, #4294967295
   d6550:	6063      	str	r3, [r4, #4]
   d6552:	4b04      	ldr	r3, [pc, #16]	; (d6564 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d6554:	8025      	strh	r5, [r4, #0]
   d6556:	2204      	movs	r2, #4
   d6558:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d655a:	4a03      	ldr	r2, [pc, #12]	; (d6568 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d655c:	601a      	str	r2, [r3, #0]
   d655e:	bd38      	pop	{r3, r4, r5, pc}
   d6560:	2003e3f0 	.word	0x2003e3f0
   d6564:	2003e3e8 	.word	0x2003e3e8
   d6568:	000d73dc 	.word	0x000d73dc

000d656c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d656c:	4770      	bx	lr

000d656e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d656e:	7441      	strb	r1, [r0, #17]
   d6570:	4770      	bx	lr

000d6572 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6572:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6574:	7c00      	ldrb	r0, [r0, #16]
   d6576:	f7fe fcd3 	bl	d4f20 <HAL_USART_Available_Data_For_Write>
}
   d657a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d657e:	bd08      	pop	{r3, pc}

000d6580 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6580:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6582:	7c00      	ldrb	r0, [r0, #16]
   d6584:	f7fe fca4 	bl	d4ed0 <HAL_USART_Available_Data>
}
   d6588:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d658c:	bd08      	pop	{r3, pc}

000d658e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d658e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6590:	7c00      	ldrb	r0, [r0, #16]
   d6592:	f7fe fcad 	bl	d4ef0 <HAL_USART_Peek_Data>
}
   d6596:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d659a:	bf28      	it	cs
   d659c:	f04f 30ff 	movcs.w	r0, #4294967295
   d65a0:	bd08      	pop	{r3, pc}

000d65a2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d65a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d65a4:	7c00      	ldrb	r0, [r0, #16]
   d65a6:	f7fe fc9b 	bl	d4ee0 <HAL_USART_Read_Data>
}
   d65aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65ae:	bf28      	it	cs
   d65b0:	f04f 30ff 	movcs.w	r0, #4294967295
   d65b4:	bd08      	pop	{r3, pc}

000d65b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d65b6:	7c00      	ldrb	r0, [r0, #16]
   d65b8:	f7fe bca2 	b.w	d4f00 <HAL_USART_Flush_Data>

000d65bc <_ZN11USARTSerialD0Ev>:
   d65bc:	b510      	push	{r4, lr}
   d65be:	2114      	movs	r1, #20
   d65c0:	4604      	mov	r4, r0
   d65c2:	f000 faae 	bl	d6b22 <_ZdlPvj>
   d65c6:	4620      	mov	r0, r4
   d65c8:	bd10      	pop	{r4, pc}

000d65ca <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d65ca:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d65cc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d65ce:	4604      	mov	r4, r0
   d65d0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d65d2:	b925      	cbnz	r5, d65de <_ZN11USARTSerial5writeEh+0x14>
   d65d4:	7c00      	ldrb	r0, [r0, #16]
   d65d6:	f7fe fca3 	bl	d4f20 <HAL_USART_Available_Data_For_Write>
   d65da:	2800      	cmp	r0, #0
   d65dc:	dd05      	ble.n	d65ea <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d65de:	4631      	mov	r1, r6
   d65e0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d65e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d65e6:	f7fe bc6b 	b.w	d4ec0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d65ea:	4628      	mov	r0, r5
   d65ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d65f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d65f0:	b510      	push	{r4, lr}
   d65f2:	4604      	mov	r4, r0
   d65f4:	4608      	mov	r0, r1
   d65f6:	4611      	mov	r1, r2
   d65f8:	2200      	movs	r2, #0
   d65fa:	6062      	str	r2, [r4, #4]
   d65fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6600:	60a2      	str	r2, [r4, #8]
   d6602:	4a05      	ldr	r2, [pc, #20]	; (d6618 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6604:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6606:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6608:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d660a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d660c:	461a      	mov	r2, r3
   d660e:	f7fe fc4f 	bl	d4eb0 <HAL_USART_Init>
}
   d6612:	4620      	mov	r0, r4
   d6614:	bd10      	pop	{r4, pc}
   d6616:	bf00      	nop
   d6618:	000d7410 	.word	0x000d7410

000d661c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d661c:	7c00      	ldrb	r0, [r0, #16]
   d661e:	f7fe bc77 	b.w	d4f10 <HAL_USART_Is_Enabled>
	...

000d6624 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6624:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6626:	4d0c      	ldr	r5, [pc, #48]	; (d6658 <_Z22__fetch_global_Serial1v+0x34>)
   d6628:	6829      	ldr	r1, [r5, #0]
   d662a:	f011 0401 	ands.w	r4, r1, #1
   d662e:	d111      	bne.n	d6654 <_Z22__fetch_global_Serial1v+0x30>
   d6630:	4628      	mov	r0, r5
   d6632:	f7fd fd36 	bl	d40a2 <__cxa_guard_acquire>
   d6636:	b168      	cbz	r0, d6654 <_Z22__fetch_global_Serial1v+0x30>
   d6638:	4a08      	ldr	r2, [pc, #32]	; (d665c <_Z22__fetch_global_Serial1v+0x38>)
   d663a:	4b09      	ldr	r3, [pc, #36]	; (d6660 <_Z22__fetch_global_Serial1v+0x3c>)
   d663c:	4809      	ldr	r0, [pc, #36]	; (d6664 <_Z22__fetch_global_Serial1v+0x40>)
   d663e:	4621      	mov	r1, r4
   d6640:	f7ff ffd6 	bl	d65f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6644:	4628      	mov	r0, r5
   d6646:	f7fd fd31 	bl	d40ac <__cxa_guard_release>
   d664a:	4a07      	ldr	r2, [pc, #28]	; (d6668 <_Z22__fetch_global_Serial1v+0x44>)
   d664c:	4907      	ldr	r1, [pc, #28]	; (d666c <_Z22__fetch_global_Serial1v+0x48>)
   d664e:	4805      	ldr	r0, [pc, #20]	; (d6664 <_Z22__fetch_global_Serial1v+0x40>)
   d6650:	f000 fa62 	bl	d6b18 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6654:	4803      	ldr	r0, [pc, #12]	; (d6664 <_Z22__fetch_global_Serial1v+0x40>)
   d6656:	bd38      	pop	{r3, r4, r5, pc}
   d6658:	2003e4b0 	.word	0x2003e4b0
   d665c:	2003e4b4 	.word	0x2003e4b4
   d6660:	2003e42c 	.word	0x2003e42c
   d6664:	2003e418 	.word	0x2003e418
   d6668:	2003e338 	.word	0x2003e338
   d666c:	000d656d 	.word	0x000d656d

000d6670 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6670:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6672:	6883      	ldr	r3, [r0, #8]
   d6674:	4604      	mov	r4, r0
   d6676:	b90b      	cbnz	r3, d667c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6678:	f000 fa55 	bl	d6b26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d667c:	68c3      	ldr	r3, [r0, #12]
   d667e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6680:	68a3      	ldr	r3, [r4, #8]
   d6682:	b11b      	cbz	r3, d668c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6684:	2203      	movs	r2, #3
   d6686:	4621      	mov	r1, r4
   d6688:	4620      	mov	r0, r4
   d668a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d668c:	4620      	mov	r0, r4
   d668e:	2110      	movs	r1, #16
}
   d6690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6694:	f000 ba45 	b.w	d6b22 <_ZdlPvj>

000d6698 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6698:	4770      	bx	lr

000d669a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d669a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d669c:	4606      	mov	r6, r0
   d669e:	4615      	mov	r5, r2
   d66a0:	460c      	mov	r4, r1
   d66a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d66a4:	42bc      	cmp	r4, r7
   d66a6:	d006      	beq.n	d66b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d66a8:	6833      	ldr	r3, [r6, #0]
   d66aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d66ae:	689b      	ldr	r3, [r3, #8]
   d66b0:	4630      	mov	r0, r6
   d66b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d66b4:	e7f6      	b.n	d66a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d66b6:	4628      	mov	r0, r5
   d66b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d66ba:	2200      	movs	r2, #0
   d66bc:	7c00      	ldrb	r0, [r0, #16]
   d66be:	f7fe bc37 	b.w	d4f30 <HAL_I2C_Write_Data>

000d66c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d66c2:	2100      	movs	r1, #0
   d66c4:	7c00      	ldrb	r0, [r0, #16]
   d66c6:	f7fe bc3b 	b.w	d4f40 <HAL_I2C_Available_Data>

000d66ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d66ca:	2100      	movs	r1, #0
   d66cc:	7c00      	ldrb	r0, [r0, #16]
   d66ce:	f7fe bc3f 	b.w	d4f50 <HAL_I2C_Read_Data>

000d66d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d66d2:	2100      	movs	r1, #0
   d66d4:	7c00      	ldrb	r0, [r0, #16]
   d66d6:	f7fe bc43 	b.w	d4f60 <HAL_I2C_Peek_Data>

000d66da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d66da:	2100      	movs	r1, #0
   d66dc:	7c00      	ldrb	r0, [r0, #16]
   d66de:	f7fe bc47 	b.w	d4f70 <HAL_I2C_Flush_Data>

000d66e2 <_ZN7TwoWireD0Ev>:
   d66e2:	b510      	push	{r4, lr}
   d66e4:	2114      	movs	r1, #20
   d66e6:	4604      	mov	r4, r0
   d66e8:	f000 fa1b 	bl	d6b22 <_ZdlPvj>
   d66ec:	4620      	mov	r0, r4
   d66ee:	bd10      	pop	{r4, pc}

000d66f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d66f0:	b510      	push	{r4, lr}
   d66f2:	4604      	mov	r4, r0
   d66f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66f8:	4608      	mov	r0, r1
   d66fa:	60a3      	str	r3, [r4, #8]
   d66fc:	2100      	movs	r1, #0
   d66fe:	4b04      	ldr	r3, [pc, #16]	; (d6710 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6700:	7420      	strb	r0, [r4, #16]
   d6702:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6704:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6706:	f7fe fc43 	bl	d4f90 <HAL_I2C_Init>

}
   d670a:	4620      	mov	r0, r4
   d670c:	bd10      	pop	{r4, pc}
   d670e:	bf00      	nop
   d6710:	000d7440 	.word	0x000d7440

000d6714 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6714:	2100      	movs	r1, #0
   d6716:	7c00      	ldrb	r0, [r0, #16]
   d6718:	f7fe bc32 	b.w	d4f80 <HAL_I2C_Is_Enabled>

000d671c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d671c:	2200      	movs	r2, #0
   d671e:	4611      	mov	r1, r2
   d6720:	6840      	ldr	r0, [r0, #4]
   d6722:	f7fe bd03 	b.w	d512c <network_listening>

000d6726 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6726:	2200      	movs	r2, #0
   d6728:	4611      	mov	r1, r2
   d672a:	6840      	ldr	r0, [r0, #4]
   d672c:	f7fe bd0e 	b.w	d514c <network_get_listen_timeout>

000d6730 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6730:	2200      	movs	r2, #0
   d6732:	6840      	ldr	r0, [r0, #4]
   d6734:	f7fe bd02 	b.w	d513c <network_set_listen_timeout>

000d6738 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6738:	2200      	movs	r2, #0
   d673a:	f081 0101 	eor.w	r1, r1, #1
   d673e:	6840      	ldr	r0, [r0, #4]
   d6740:	f7fe bcec 	b.w	d511c <network_listen>

000d6744 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6744:	2300      	movs	r3, #0
   d6746:	461a      	mov	r2, r3
   d6748:	2101      	movs	r1, #1
   d674a:	6840      	ldr	r0, [r0, #4]
   d674c:	f7fe bcde 	b.w	d510c <network_off>

000d6750 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6750:	2300      	movs	r3, #0
   d6752:	461a      	mov	r2, r3
   d6754:	4619      	mov	r1, r3
   d6756:	6840      	ldr	r0, [r0, #4]
   d6758:	f7fe bcd0 	b.w	d50fc <network_on>

000d675c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d675c:	2200      	movs	r2, #0
   d675e:	4611      	mov	r1, r2
   d6760:	6840      	ldr	r0, [r0, #4]
   d6762:	f7fe bcc3 	b.w	d50ec <network_ready>

000d6766 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6766:	2200      	movs	r2, #0
   d6768:	4611      	mov	r1, r2
   d676a:	6840      	ldr	r0, [r0, #4]
   d676c:	f7fe bcae 	b.w	d50cc <network_connecting>

000d6770 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6770:	2200      	movs	r2, #0
   d6772:	2102      	movs	r1, #2
   d6774:	6840      	ldr	r0, [r0, #4]
   d6776:	f7fe bcb1 	b.w	d50dc <network_disconnect>

000d677a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d677a:	2300      	movs	r3, #0
   d677c:	461a      	mov	r2, r3
   d677e:	6840      	ldr	r0, [r0, #4]
   d6780:	f7fe bc9c 	b.w	d50bc <network_connect>

000d6784 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6784:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6786:	4605      	mov	r5, r0
   d6788:	b188      	cbz	r0, d67ae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d678a:	6804      	ldr	r4, [r0, #0]
   d678c:	b14c      	cbz	r4, d67a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d678e:	68a3      	ldr	r3, [r4, #8]
   d6790:	b11b      	cbz	r3, d679a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6792:	2203      	movs	r2, #3
   d6794:	4621      	mov	r1, r4
   d6796:	4620      	mov	r0, r4
   d6798:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d679a:	2110      	movs	r1, #16
   d679c:	4620      	mov	r0, r4
   d679e:	f000 f9c0 	bl	d6b22 <_ZdlPvj>
   d67a2:	4628      	mov	r0, r5
   d67a4:	2114      	movs	r1, #20
      }
   d67a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d67aa:	f000 b9ba 	b.w	d6b22 <_ZdlPvj>
   d67ae:	bd38      	pop	{r3, r4, r5, pc}

000d67b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d67b0:	b110      	cbz	r0, d67b8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d67b2:	6803      	ldr	r3, [r0, #0]
   d67b4:	685b      	ldr	r3, [r3, #4]
   d67b6:	4718      	bx	r3
   d67b8:	4770      	bx	lr

000d67ba <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d67ba:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d67bc:	6803      	ldr	r3, [r0, #0]
   d67be:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d67c0:	b1bb      	cbz	r3, d67f2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d67c2:	6858      	ldr	r0, [r3, #4]
   d67c4:	f7fe fb44 	bl	d4e50 <os_thread_is_current>
   d67c8:	b978      	cbnz	r0, d67ea <_ZN6ThreadD1Ev+0x30>
   d67ca:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d67cc:	7c5a      	ldrb	r2, [r3, #17]
   d67ce:	b912      	cbnz	r2, d67d6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d67d0:	6858      	ldr	r0, [r3, #4]
   d67d2:	f7fe fb45 	bl	d4e60 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d67d6:	6823      	ldr	r3, [r4, #0]
   d67d8:	6858      	ldr	r0, [r3, #4]
   d67da:	f7fe fb49 	bl	d4e70 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67de:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d67e0:	2300      	movs	r3, #0
   d67e2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d67e4:	b128      	cbz	r0, d67f2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d67e6:	f7ff ffcd 	bl	d6784 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d67ea:	6820      	ldr	r0, [r4, #0]
   d67ec:	b108      	cbz	r0, d67f2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d67ee:	f7ff ffc9 	bl	d6784 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d67f2:	4620      	mov	r0, r4
   d67f4:	bd10      	pop	{r4, pc}
	...

000d67f8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d67f8:	b538      	push	{r3, r4, r5, lr}
   d67fa:	4b0c      	ldr	r3, [pc, #48]	; (d682c <_ZN5spark9MeshClassD1Ev+0x34>)
   d67fc:	6003      	str	r3, [r0, #0]
   d67fe:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6800:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6804:	b108      	cbz	r0, d680a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6806:	f7fd fc4a 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d680a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d680e:	b135      	cbz	r5, d681e <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6810:	4628      	mov	r0, r5
   d6812:	f7ff ffd2 	bl	d67ba <_ZN6ThreadD1Ev>
   d6816:	2104      	movs	r1, #4
   d6818:	4628      	mov	r0, r5
   d681a:	f000 f982 	bl	d6b22 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d681e:	68a0      	ldr	r0, [r4, #8]
   d6820:	b108      	cbz	r0, d6826 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6822:	f7ff ffc5 	bl	d67b0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6826:	4620      	mov	r0, r4
   d6828:	bd38      	pop	{r3, r4, r5, pc}
   d682a:	bf00      	nop
   d682c:	000d7468 	.word	0x000d7468

000d6830 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6830:	b538      	push	{r3, r4, r5, lr}
   d6832:	4c0e      	ldr	r4, [pc, #56]	; (d686c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6834:	4b0e      	ldr	r3, [pc, #56]	; (d6870 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6836:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6838:	2500      	movs	r5, #0
   d683a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d683c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6840:	6063      	str	r3, [r4, #4]
   d6842:	60a5      	str	r5, [r4, #8]
   d6844:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6848:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d684c:	f7fe fb20 	bl	d4e90 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6850:	4b08      	ldr	r3, [pc, #32]	; (d6874 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6852:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6856:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d685a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d685c:	4620      	mov	r0, r4
   d685e:	4a06      	ldr	r2, [pc, #24]	; (d6878 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6860:	4906      	ldr	r1, [pc, #24]	; (d687c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6866:	f000 b957 	b.w	d6b18 <__aeabi_atexit>
   d686a:	bf00      	nop
   d686c:	2003e538 	.word	0x2003e538
   d6870:	000d749c 	.word	0x000d749c
   d6874:	000d7468 	.word	0x000d7468
   d6878:	2003e338 	.word	0x2003e338
   d687c:	000d67f9 	.word	0x000d67f9

000d6880 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6880:	2300      	movs	r3, #0
   d6882:	461a      	mov	r2, r3
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	f7fe bc19 	b.w	d50bc <network_connect>

000d688a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d688a:	2200      	movs	r2, #0
   d688c:	2102      	movs	r1, #2
   d688e:	6840      	ldr	r0, [r0, #4]
   d6890:	f7fe bc24 	b.w	d50dc <network_disconnect>

000d6894 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6894:	2200      	movs	r2, #0
   d6896:	4611      	mov	r1, r2
   d6898:	6840      	ldr	r0, [r0, #4]
   d689a:	f7fe bc17 	b.w	d50cc <network_connecting>

000d689e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d689e:	2200      	movs	r2, #0
   d68a0:	4611      	mov	r1, r2
   d68a2:	6840      	ldr	r0, [r0, #4]
   d68a4:	f7fe bc22 	b.w	d50ec <network_ready>

000d68a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d68a8:	2300      	movs	r3, #0
   d68aa:	461a      	mov	r2, r3
   d68ac:	4619      	mov	r1, r3
   d68ae:	6840      	ldr	r0, [r0, #4]
   d68b0:	f7fe bc24 	b.w	d50fc <network_on>

000d68b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d68b4:	2300      	movs	r3, #0
   d68b6:	461a      	mov	r2, r3
   d68b8:	4619      	mov	r1, r3
   d68ba:	6840      	ldr	r0, [r0, #4]
   d68bc:	f7fe bc26 	b.w	d510c <network_off>

000d68c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d68c0:	2200      	movs	r2, #0
   d68c2:	f081 0101 	eor.w	r1, r1, #1
   d68c6:	6840      	ldr	r0, [r0, #4]
   d68c8:	f7fe bc28 	b.w	d511c <network_listen>

000d68cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d68cc:	2200      	movs	r2, #0
   d68ce:	6840      	ldr	r0, [r0, #4]
   d68d0:	f7fe bc34 	b.w	d513c <network_set_listen_timeout>

000d68d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d68d4:	2200      	movs	r2, #0
   d68d6:	4611      	mov	r1, r2
   d68d8:	6840      	ldr	r0, [r0, #4]
   d68da:	f7fe bc37 	b.w	d514c <network_get_listen_timeout>

000d68de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d68de:	2200      	movs	r2, #0
   d68e0:	4611      	mov	r1, r2
   d68e2:	6840      	ldr	r0, [r0, #4]
   d68e4:	f7fe bc22 	b.w	d512c <network_listening>

000d68e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d68e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d68ec:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d68ee:	b095      	sub	sp, #84	; 0x54
   d68f0:	4616      	mov	r6, r2
   d68f2:	460d      	mov	r5, r1
   d68f4:	4607      	mov	r7, r0
    IPAddress addr;
   d68f6:	f7ff fcf7 	bl	d62e8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d68fa:	4621      	mov	r1, r4
   d68fc:	2220      	movs	r2, #32
   d68fe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6900:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6902:	f000 faa7 	bl	d6e54 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6906:	2340      	movs	r3, #64	; 0x40
   d6908:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d690a:	4621      	mov	r1, r4
   d690c:	466b      	mov	r3, sp
   d690e:	aa0c      	add	r2, sp, #48	; 0x30
   d6910:	4630      	mov	r0, r6
   d6912:	f7fe fa35 	bl	d4d80 <netdb_getaddrinfo>
    if (!r) {
   d6916:	4604      	mov	r4, r0
   d6918:	2800      	cmp	r0, #0
   d691a:	d144      	bne.n	d69a6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d691c:	4602      	mov	r2, r0
   d691e:	2101      	movs	r1, #1
   d6920:	6868      	ldr	r0, [r5, #4]
   d6922:	f7fe fbe3 	bl	d50ec <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6926:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6928:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d692a:	4622      	mov	r2, r4
   d692c:	6868      	ldr	r0, [r5, #4]
   d692e:	f7fe fbdd 	bl	d50ec <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6932:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6934:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6936:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6938:	2e00      	cmp	r6, #0
   d693a:	d034      	beq.n	d69a6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d693c:	2900      	cmp	r1, #0
   d693e:	d132      	bne.n	d69a6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6940:	6873      	ldr	r3, [r6, #4]
   d6942:	2b02      	cmp	r3, #2
   d6944:	d002      	beq.n	d694c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6946:	2b0a      	cmp	r3, #10
   d6948:	d009      	beq.n	d695e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d694a:	e02a      	b.n	d69a2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d694c:	f1b8 0f00 	cmp.w	r8, #0
   d6950:	d027      	beq.n	d69a2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6952:	6971      	ldr	r1, [r6, #20]
   d6954:	4638      	mov	r0, r7
   d6956:	3104      	adds	r1, #4
   d6958:	f7ff fcf3 	bl	d6342 <_ZN9IPAddressaSEPKh>
   d695c:	e020      	b.n	d69a0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d695e:	f1b9 0f00 	cmp.w	r9, #0
   d6962:	d01e      	beq.n	d69a2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6964:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6966:	2211      	movs	r2, #17
   d6968:	a801      	add	r0, sp, #4
   d696a:	f000 fa73 	bl	d6e54 <memset>
                    a.v = 6;
   d696e:	2306      	movs	r3, #6
   d6970:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6974:	ad01      	add	r5, sp, #4
   d6976:	f104 0308 	add.w	r3, r4, #8
   d697a:	3418      	adds	r4, #24
   d697c:	6818      	ldr	r0, [r3, #0]
   d697e:	6859      	ldr	r1, [r3, #4]
   d6980:	462a      	mov	r2, r5
   d6982:	c203      	stmia	r2!, {r0, r1}
   d6984:	3308      	adds	r3, #8
   d6986:	42a3      	cmp	r3, r4
   d6988:	4615      	mov	r5, r2
   d698a:	d1f7      	bne.n	d697c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d698c:	a901      	add	r1, sp, #4
   d698e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6990:	ad07      	add	r5, sp, #28
   d6992:	f7ff fcb7 	bl	d6304 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6998:	1d3c      	adds	r4, r7, #4
   d699a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d699c:	682b      	ldr	r3, [r5, #0]
   d699e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d69a0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69a2:	69f6      	ldr	r6, [r6, #28]
   d69a4:	e7c8      	b.n	d6938 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d69a6:	9800      	ldr	r0, [sp, #0]
   d69a8:	f7fe f9e2 	bl	d4d70 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d69ac:	4638      	mov	r0, r7
   d69ae:	b015      	add	sp, #84	; 0x54
   d69b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d69b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d69b4:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d69b6:	4a03      	ldr	r2, [pc, #12]	; (d69c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d69b8:	601a      	str	r2, [r3, #0]
   d69ba:	2200      	movs	r2, #0
   d69bc:	605a      	str	r2, [r3, #4]
   d69be:	4770      	bx	lr
   d69c0:	2003e70c 	.word	0x2003e70c
   d69c4:	000d749c 	.word	0x000d749c

000d69c8 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d69c8:	b508      	push	{r3, lr}
   d69ca:	4b02      	ldr	r3, [pc, #8]	; (d69d4 <spark_protocol_instance+0xc>)
   d69cc:	681b      	ldr	r3, [r3, #0]
   d69ce:	681b      	ldr	r3, [r3, #0]
   d69d0:	9301      	str	r3, [sp, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	0003025c 	.word	0x0003025c

000d69d8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d69d8:	b508      	push	{r3, lr}
   d69da:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <spark_protocol_set_product_id+0xc>)
   d69dc:	681b      	ldr	r3, [r3, #0]
   d69de:	685b      	ldr	r3, [r3, #4]
   d69e0:	9301      	str	r3, [sp, #4]
   d69e2:	bd08      	pop	{r3, pc}
   d69e4:	0003025c 	.word	0x0003025c

000d69e8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d69e8:	b508      	push	{r3, lr}
   d69ea:	4b02      	ldr	r3, [pc, #8]	; (d69f4 <spark_protocol_set_product_firmware_version+0xc>)
   d69ec:	681b      	ldr	r3, [r3, #0]
   d69ee:	689b      	ldr	r3, [r3, #8]
   d69f0:	9301      	str	r3, [sp, #4]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	0003025c 	.word	0x0003025c

000d69f8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d69f8:	b510      	push	{r4, lr}
   d69fa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d69fc:	480f      	ldr	r0, [pc, #60]	; (d6a3c <pinAvailable+0x44>)
   d69fe:	f7fe fc7f 	bl	d5300 <_ZN8SPIClass9isEnabledEv>
   d6a02:	b128      	cbz	r0, d6a10 <pinAvailable+0x18>
   d6a04:	f1a4 030b 	sub.w	r3, r4, #11
   d6a08:	2b02      	cmp	r3, #2
   d6a0a:	d801      	bhi.n	d6a10 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6a0c:	2000      	movs	r0, #0
   d6a0e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6a10:	f000 f862 	bl	d6ad8 <_Z19__fetch_global_Wirev>
   d6a14:	f7ff fe7e 	bl	d6714 <_ZN7TwoWire9isEnabledEv>
   d6a18:	b108      	cbz	r0, d6a1e <pinAvailable+0x26>
   d6a1a:	2c01      	cmp	r4, #1
   d6a1c:	d9f6      	bls.n	d6a0c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6a1e:	f7ff fe01 	bl	d6624 <_Z22__fetch_global_Serial1v>
   d6a22:	f7ff fdfb 	bl	d661c <_ZN11USARTSerial9isEnabledEv>
   d6a26:	b118      	cbz	r0, d6a30 <pinAvailable+0x38>
   d6a28:	f1a4 0309 	sub.w	r3, r4, #9
   d6a2c:	2b01      	cmp	r3, #1
   d6a2e:	d9ed      	bls.n	d6a0c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6a30:	2c23      	cmp	r4, #35	; 0x23
   d6a32:	bf8c      	ite	hi
   d6a34:	2000      	movhi	r0, #0
   d6a36:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6a38:	bd10      	pop	{r4, pc}
   d6a3a:	bf00      	nop
   d6a3c:	2003e714 	.word	0x2003e714

000d6a40 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a40:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6a42:	b538      	push	{r3, r4, r5, lr}
   d6a44:	4604      	mov	r4, r0
   d6a46:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a48:	d80a      	bhi.n	d6a60 <pinMode+0x20>
   d6a4a:	29ff      	cmp	r1, #255	; 0xff
   d6a4c:	d008      	beq.n	d6a60 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6a4e:	f7ff ffd3 	bl	d69f8 <pinAvailable>
   d6a52:	b128      	cbz	r0, d6a60 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6a54:	4629      	mov	r1, r5
   d6a56:	4620      	mov	r0, r4
}
   d6a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6a5c:	f7fe b9a0 	b.w	d4da0 <HAL_Pin_Mode>
   d6a60:	bd38      	pop	{r3, r4, r5, pc}

000d6a62 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6a62:	b538      	push	{r3, r4, r5, lr}
   d6a64:	4604      	mov	r4, r0
   d6a66:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6a68:	f7fe f9a2 	bl	d4db0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6a6c:	28ff      	cmp	r0, #255	; 0xff
   d6a6e:	d010      	beq.n	d6a92 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6a70:	2806      	cmp	r0, #6
   d6a72:	d804      	bhi.n	d6a7e <digitalWrite+0x1c>
   d6a74:	234d      	movs	r3, #77	; 0x4d
   d6a76:	fa23 f000 	lsr.w	r0, r3, r0
   d6a7a:	07c3      	lsls	r3, r0, #31
   d6a7c:	d409      	bmi.n	d6a92 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6a7e:	4620      	mov	r0, r4
   d6a80:	f7ff ffba 	bl	d69f8 <pinAvailable>
   d6a84:	b128      	cbz	r0, d6a92 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6a86:	4629      	mov	r1, r5
   d6a88:	4620      	mov	r0, r4
}
   d6a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6a8e:	f7fe b997 	b.w	d4dc0 <HAL_GPIO_Write>
   d6a92:	bd38      	pop	{r3, r4, r5, pc}

000d6a94 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6a94:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6a96:	4c0c      	ldr	r4, [pc, #48]	; (d6ac8 <_GLOBAL__sub_I_SPI+0x34>)
   d6a98:	4e0c      	ldr	r6, [pc, #48]	; (d6acc <_GLOBAL__sub_I_SPI+0x38>)
   d6a9a:	4d0d      	ldr	r5, [pc, #52]	; (d6ad0 <_GLOBAL__sub_I_SPI+0x3c>)
   d6a9c:	2100      	movs	r1, #0
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	f7fe fc1a 	bl	d52d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6aa4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6aa6:	4c0b      	ldr	r4, [pc, #44]	; (d6ad4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6aa8:	4632      	mov	r2, r6
   d6aaa:	4629      	mov	r1, r5
   d6aac:	f000 f834 	bl	d6b18 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6ab0:	2101      	movs	r1, #1
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	f7fe fc10 	bl	d52d8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6ab8:	4632      	mov	r2, r6
   d6aba:	4629      	mov	r1, r5
   d6abc:	4620      	mov	r0, r4
   d6abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6ac2:	f000 b829 	b.w	d6b18 <__aeabi_atexit>
   d6ac6:	bf00      	nop
   d6ac8:	2003e714 	.word	0x2003e714
   d6acc:	2003e338 	.word	0x2003e338
   d6ad0:	000d52c9 	.word	0x000d52c9
   d6ad4:	2003e724 	.word	0x2003e724

000d6ad8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6ad8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6ada:	4d0b      	ldr	r5, [pc, #44]	; (d6b08 <_Z19__fetch_global_Wirev+0x30>)
   d6adc:	6829      	ldr	r1, [r5, #0]
   d6ade:	f011 0401 	ands.w	r4, r1, #1
   d6ae2:	d10f      	bne.n	d6b04 <_Z19__fetch_global_Wirev+0x2c>
   d6ae4:	4628      	mov	r0, r5
   d6ae6:	f7fd fadc 	bl	d40a2 <__cxa_guard_acquire>
   d6aea:	b158      	cbz	r0, d6b04 <_Z19__fetch_global_Wirev+0x2c>
   d6aec:	4621      	mov	r1, r4
   d6aee:	4807      	ldr	r0, [pc, #28]	; (d6b0c <_Z19__fetch_global_Wirev+0x34>)
   d6af0:	f7ff fdfe 	bl	d66f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6af4:	4628      	mov	r0, r5
   d6af6:	f7fd fad9 	bl	d40ac <__cxa_guard_release>
   d6afa:	4a05      	ldr	r2, [pc, #20]	; (d6b10 <_Z19__fetch_global_Wirev+0x38>)
   d6afc:	4905      	ldr	r1, [pc, #20]	; (d6b14 <_Z19__fetch_global_Wirev+0x3c>)
   d6afe:	4803      	ldr	r0, [pc, #12]	; (d6b0c <_Z19__fetch_global_Wirev+0x34>)
   d6b00:	f000 f80a 	bl	d6b18 <__aeabi_atexit>
	return wire;
}
   d6b04:	4801      	ldr	r0, [pc, #4]	; (d6b0c <_Z19__fetch_global_Wirev+0x34>)
   d6b06:	bd38      	pop	{r3, r4, r5, pc}
   d6b08:	2003e738 	.word	0x2003e738
   d6b0c:	2003e73c 	.word	0x2003e73c
   d6b10:	2003e338 	.word	0x2003e338
   d6b14:	000d6699 	.word	0x000d6699

000d6b18 <__aeabi_atexit>:
   d6b18:	460b      	mov	r3, r1
   d6b1a:	4601      	mov	r1, r0
   d6b1c:	4618      	mov	r0, r3
   d6b1e:	f000 b951 	b.w	d6dc4 <__cxa_atexit>

000d6b22 <_ZdlPvj>:
   d6b22:	f7fd baba 	b.w	d409a <_ZdlPv>

000d6b26 <_ZSt25__throw_bad_function_callv>:
   d6b26:	b508      	push	{r3, lr}
   d6b28:	f7fe fb80 	bl	d522c <abort>

000d6b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6b2c:	4b18      	ldr	r3, [pc, #96]	; (d6b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6b2e:	681a      	ldr	r2, [r3, #0]
   d6b30:	07d1      	lsls	r1, r2, #31
   d6b32:	bf5c      	itt	pl
   d6b34:	2201      	movpl	r2, #1
   d6b36:	601a      	strpl	r2, [r3, #0]
   d6b38:	4b16      	ldr	r3, [pc, #88]	; (d6b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6b3a:	681a      	ldr	r2, [r3, #0]
   d6b3c:	07d2      	lsls	r2, r2, #31
   d6b3e:	bf5c      	itt	pl
   d6b40:	2201      	movpl	r2, #1
   d6b42:	601a      	strpl	r2, [r3, #0]
   d6b44:	4b14      	ldr	r3, [pc, #80]	; (d6b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6b46:	681a      	ldr	r2, [r3, #0]
   d6b48:	07d0      	lsls	r0, r2, #31
   d6b4a:	bf5c      	itt	pl
   d6b4c:	2201      	movpl	r2, #1
   d6b4e:	601a      	strpl	r2, [r3, #0]
   d6b50:	4b12      	ldr	r3, [pc, #72]	; (d6b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6b52:	681a      	ldr	r2, [r3, #0]
   d6b54:	07d1      	lsls	r1, r2, #31
   d6b56:	bf5c      	itt	pl
   d6b58:	2201      	movpl	r2, #1
   d6b5a:	601a      	strpl	r2, [r3, #0]
   d6b5c:	4b10      	ldr	r3, [pc, #64]	; (d6ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6b5e:	681a      	ldr	r2, [r3, #0]
   d6b60:	07d2      	lsls	r2, r2, #31
   d6b62:	bf5c      	itt	pl
   d6b64:	2201      	movpl	r2, #1
   d6b66:	601a      	strpl	r2, [r3, #0]
   d6b68:	4b0e      	ldr	r3, [pc, #56]	; (d6ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6b6a:	681a      	ldr	r2, [r3, #0]
   d6b6c:	07d0      	lsls	r0, r2, #31
   d6b6e:	bf5c      	itt	pl
   d6b70:	2201      	movpl	r2, #1
   d6b72:	601a      	strpl	r2, [r3, #0]
   d6b74:	4b0c      	ldr	r3, [pc, #48]	; (d6ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6b76:	681a      	ldr	r2, [r3, #0]
   d6b78:	07d1      	lsls	r1, r2, #31
   d6b7a:	bf5c      	itt	pl
   d6b7c:	2201      	movpl	r2, #1
   d6b7e:	601a      	strpl	r2, [r3, #0]
   d6b80:	4b0a      	ldr	r3, [pc, #40]	; (d6bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6b82:	681a      	ldr	r2, [r3, #0]
   d6b84:	07d2      	lsls	r2, r2, #31
   d6b86:	bf5c      	itt	pl
   d6b88:	2201      	movpl	r2, #1
   d6b8a:	601a      	strpl	r2, [r3, #0]
   d6b8c:	4770      	bx	lr
   d6b8e:	bf00      	nop
   d6b90:	2003e76c 	.word	0x2003e76c
   d6b94:	2003e768 	.word	0x2003e768
   d6b98:	2003e764 	.word	0x2003e764
   d6b9c:	2003e760 	.word	0x2003e760
   d6ba0:	2003e75c 	.word	0x2003e75c
   d6ba4:	2003e758 	.word	0x2003e758
   d6ba8:	2003e754 	.word	0x2003e754
   d6bac:	2003e750 	.word	0x2003e750

000d6bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6bb0:	4b24      	ldr	r3, [pc, #144]	; (d6c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6bb2:	681a      	ldr	r2, [r3, #0]
   d6bb4:	07d0      	lsls	r0, r2, #31
   d6bb6:	bf5c      	itt	pl
   d6bb8:	2201      	movpl	r2, #1
   d6bba:	601a      	strpl	r2, [r3, #0]
   d6bbc:	4b22      	ldr	r3, [pc, #136]	; (d6c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6bbe:	681a      	ldr	r2, [r3, #0]
   d6bc0:	07d1      	lsls	r1, r2, #31
   d6bc2:	bf5c      	itt	pl
   d6bc4:	2201      	movpl	r2, #1
   d6bc6:	601a      	strpl	r2, [r3, #0]
   d6bc8:	4b20      	ldr	r3, [pc, #128]	; (d6c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6bca:	681a      	ldr	r2, [r3, #0]
   d6bcc:	07d2      	lsls	r2, r2, #31
   d6bce:	bf5c      	itt	pl
   d6bd0:	2201      	movpl	r2, #1
   d6bd2:	601a      	strpl	r2, [r3, #0]
   d6bd4:	4b1e      	ldr	r3, [pc, #120]	; (d6c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6bd6:	681a      	ldr	r2, [r3, #0]
   d6bd8:	07d0      	lsls	r0, r2, #31
   d6bda:	bf5c      	itt	pl
   d6bdc:	2201      	movpl	r2, #1
   d6bde:	601a      	strpl	r2, [r3, #0]
   d6be0:	4b1c      	ldr	r3, [pc, #112]	; (d6c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6be2:	681a      	ldr	r2, [r3, #0]
   d6be4:	07d1      	lsls	r1, r2, #31
   d6be6:	bf5c      	itt	pl
   d6be8:	2201      	movpl	r2, #1
   d6bea:	601a      	strpl	r2, [r3, #0]
   d6bec:	4b1a      	ldr	r3, [pc, #104]	; (d6c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6bee:	681a      	ldr	r2, [r3, #0]
   d6bf0:	07d2      	lsls	r2, r2, #31
   d6bf2:	bf5c      	itt	pl
   d6bf4:	2201      	movpl	r2, #1
   d6bf6:	601a      	strpl	r2, [r3, #0]
   d6bf8:	4b18      	ldr	r3, [pc, #96]	; (d6c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6bfa:	681a      	ldr	r2, [r3, #0]
   d6bfc:	07d0      	lsls	r0, r2, #31
   d6bfe:	bf5c      	itt	pl
   d6c00:	2201      	movpl	r2, #1
   d6c02:	601a      	strpl	r2, [r3, #0]
   d6c04:	4b16      	ldr	r3, [pc, #88]	; (d6c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6c06:	681a      	ldr	r2, [r3, #0]
   d6c08:	07d1      	lsls	r1, r2, #31
   d6c0a:	bf5c      	itt	pl
   d6c0c:	2201      	movpl	r2, #1
   d6c0e:	601a      	strpl	r2, [r3, #0]
   d6c10:	4b14      	ldr	r3, [pc, #80]	; (d6c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6c12:	681a      	ldr	r2, [r3, #0]
   d6c14:	07d2      	lsls	r2, r2, #31
   d6c16:	bf5c      	itt	pl
   d6c18:	2201      	movpl	r2, #1
   d6c1a:	601a      	strpl	r2, [r3, #0]
   d6c1c:	4b12      	ldr	r3, [pc, #72]	; (d6c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6c1e:	681a      	ldr	r2, [r3, #0]
   d6c20:	07d0      	lsls	r0, r2, #31
   d6c22:	bf5c      	itt	pl
   d6c24:	2201      	movpl	r2, #1
   d6c26:	601a      	strpl	r2, [r3, #0]
   d6c28:	4b10      	ldr	r3, [pc, #64]	; (d6c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6c2a:	681a      	ldr	r2, [r3, #0]
   d6c2c:	07d1      	lsls	r1, r2, #31
   d6c2e:	bf5c      	itt	pl
   d6c30:	2201      	movpl	r2, #1
   d6c32:	601a      	strpl	r2, [r3, #0]
   d6c34:	4b0e      	ldr	r3, [pc, #56]	; (d6c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6c36:	681a      	ldr	r2, [r3, #0]
   d6c38:	07d2      	lsls	r2, r2, #31
   d6c3a:	bf5c      	itt	pl
   d6c3c:	2201      	movpl	r2, #1
   d6c3e:	601a      	strpl	r2, [r3, #0]
   d6c40:	4770      	bx	lr
   d6c42:	bf00      	nop
   d6c44:	2003e79c 	.word	0x2003e79c
   d6c48:	2003e798 	.word	0x2003e798
   d6c4c:	2003e794 	.word	0x2003e794
   d6c50:	2003e790 	.word	0x2003e790
   d6c54:	2003e78c 	.word	0x2003e78c
   d6c58:	2003e788 	.word	0x2003e788
   d6c5c:	2003e784 	.word	0x2003e784
   d6c60:	2003e780 	.word	0x2003e780
   d6c64:	2003e77c 	.word	0x2003e77c
   d6c68:	2003e778 	.word	0x2003e778
   d6c6c:	2003e774 	.word	0x2003e774
   d6c70:	2003e770 	.word	0x2003e770

000d6c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6c74:	4b24      	ldr	r3, [pc, #144]	; (d6d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6c76:	681a      	ldr	r2, [r3, #0]
   d6c78:	07d0      	lsls	r0, r2, #31
   d6c7a:	bf5c      	itt	pl
   d6c7c:	2201      	movpl	r2, #1
   d6c7e:	601a      	strpl	r2, [r3, #0]
   d6c80:	4b22      	ldr	r3, [pc, #136]	; (d6d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6c82:	681a      	ldr	r2, [r3, #0]
   d6c84:	07d1      	lsls	r1, r2, #31
   d6c86:	bf5c      	itt	pl
   d6c88:	2201      	movpl	r2, #1
   d6c8a:	601a      	strpl	r2, [r3, #0]
   d6c8c:	4b20      	ldr	r3, [pc, #128]	; (d6d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6c8e:	681a      	ldr	r2, [r3, #0]
   d6c90:	07d2      	lsls	r2, r2, #31
   d6c92:	bf5c      	itt	pl
   d6c94:	2201      	movpl	r2, #1
   d6c96:	601a      	strpl	r2, [r3, #0]
   d6c98:	4b1e      	ldr	r3, [pc, #120]	; (d6d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6c9a:	681a      	ldr	r2, [r3, #0]
   d6c9c:	07d0      	lsls	r0, r2, #31
   d6c9e:	bf5c      	itt	pl
   d6ca0:	2201      	movpl	r2, #1
   d6ca2:	601a      	strpl	r2, [r3, #0]
   d6ca4:	4b1c      	ldr	r3, [pc, #112]	; (d6d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6ca6:	681a      	ldr	r2, [r3, #0]
   d6ca8:	07d1      	lsls	r1, r2, #31
   d6caa:	bf5c      	itt	pl
   d6cac:	2201      	movpl	r2, #1
   d6cae:	601a      	strpl	r2, [r3, #0]
   d6cb0:	4b1a      	ldr	r3, [pc, #104]	; (d6d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6cb2:	681a      	ldr	r2, [r3, #0]
   d6cb4:	07d2      	lsls	r2, r2, #31
   d6cb6:	bf5c      	itt	pl
   d6cb8:	2201      	movpl	r2, #1
   d6cba:	601a      	strpl	r2, [r3, #0]
   d6cbc:	4b18      	ldr	r3, [pc, #96]	; (d6d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6cbe:	681a      	ldr	r2, [r3, #0]
   d6cc0:	07d0      	lsls	r0, r2, #31
   d6cc2:	bf5c      	itt	pl
   d6cc4:	2201      	movpl	r2, #1
   d6cc6:	601a      	strpl	r2, [r3, #0]
   d6cc8:	4b16      	ldr	r3, [pc, #88]	; (d6d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6cca:	681a      	ldr	r2, [r3, #0]
   d6ccc:	07d1      	lsls	r1, r2, #31
   d6cce:	bf5c      	itt	pl
   d6cd0:	2201      	movpl	r2, #1
   d6cd2:	601a      	strpl	r2, [r3, #0]
   d6cd4:	4b14      	ldr	r3, [pc, #80]	; (d6d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6cd6:	681a      	ldr	r2, [r3, #0]
   d6cd8:	07d2      	lsls	r2, r2, #31
   d6cda:	bf5c      	itt	pl
   d6cdc:	2201      	movpl	r2, #1
   d6cde:	601a      	strpl	r2, [r3, #0]
   d6ce0:	4b12      	ldr	r3, [pc, #72]	; (d6d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6ce2:	681a      	ldr	r2, [r3, #0]
   d6ce4:	07d0      	lsls	r0, r2, #31
   d6ce6:	bf5c      	itt	pl
   d6ce8:	2201      	movpl	r2, #1
   d6cea:	601a      	strpl	r2, [r3, #0]
   d6cec:	4b10      	ldr	r3, [pc, #64]	; (d6d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6cee:	681a      	ldr	r2, [r3, #0]
   d6cf0:	07d1      	lsls	r1, r2, #31
   d6cf2:	bf5c      	itt	pl
   d6cf4:	2201      	movpl	r2, #1
   d6cf6:	601a      	strpl	r2, [r3, #0]
   d6cf8:	4b0e      	ldr	r3, [pc, #56]	; (d6d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6cfa:	681a      	ldr	r2, [r3, #0]
   d6cfc:	07d2      	lsls	r2, r2, #31
   d6cfe:	bf5c      	itt	pl
   d6d00:	2201      	movpl	r2, #1
   d6d02:	601a      	strpl	r2, [r3, #0]
   d6d04:	4770      	bx	lr
   d6d06:	bf00      	nop
   d6d08:	2003e7cc 	.word	0x2003e7cc
   d6d0c:	2003e7c8 	.word	0x2003e7c8
   d6d10:	2003e7c4 	.word	0x2003e7c4
   d6d14:	2003e7c0 	.word	0x2003e7c0
   d6d18:	2003e7bc 	.word	0x2003e7bc
   d6d1c:	2003e7b8 	.word	0x2003e7b8
   d6d20:	2003e7b4 	.word	0x2003e7b4
   d6d24:	2003e7b0 	.word	0x2003e7b0
   d6d28:	2003e7ac 	.word	0x2003e7ac
   d6d2c:	2003e7a8 	.word	0x2003e7a8
   d6d30:	2003e7a4 	.word	0x2003e7a4
   d6d34:	2003e7a0 	.word	0x2003e7a0

000d6d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6d38:	4b18      	ldr	r3, [pc, #96]	; (d6d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6d3a:	681a      	ldr	r2, [r3, #0]
   d6d3c:	07d1      	lsls	r1, r2, #31
   d6d3e:	bf5c      	itt	pl
   d6d40:	2201      	movpl	r2, #1
   d6d42:	601a      	strpl	r2, [r3, #0]
   d6d44:	4b16      	ldr	r3, [pc, #88]	; (d6da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6d46:	681a      	ldr	r2, [r3, #0]
   d6d48:	07d2      	lsls	r2, r2, #31
   d6d4a:	bf5c      	itt	pl
   d6d4c:	2201      	movpl	r2, #1
   d6d4e:	601a      	strpl	r2, [r3, #0]
   d6d50:	4b14      	ldr	r3, [pc, #80]	; (d6da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6d52:	681a      	ldr	r2, [r3, #0]
   d6d54:	07d0      	lsls	r0, r2, #31
   d6d56:	bf5c      	itt	pl
   d6d58:	2201      	movpl	r2, #1
   d6d5a:	601a      	strpl	r2, [r3, #0]
   d6d5c:	4b12      	ldr	r3, [pc, #72]	; (d6da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6d5e:	681a      	ldr	r2, [r3, #0]
   d6d60:	07d1      	lsls	r1, r2, #31
   d6d62:	bf5c      	itt	pl
   d6d64:	2201      	movpl	r2, #1
   d6d66:	601a      	strpl	r2, [r3, #0]
   d6d68:	4b10      	ldr	r3, [pc, #64]	; (d6dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6d6a:	681a      	ldr	r2, [r3, #0]
   d6d6c:	07d2      	lsls	r2, r2, #31
   d6d6e:	bf5c      	itt	pl
   d6d70:	2201      	movpl	r2, #1
   d6d72:	601a      	strpl	r2, [r3, #0]
   d6d74:	4b0e      	ldr	r3, [pc, #56]	; (d6db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6d76:	681a      	ldr	r2, [r3, #0]
   d6d78:	07d0      	lsls	r0, r2, #31
   d6d7a:	bf5c      	itt	pl
   d6d7c:	2201      	movpl	r2, #1
   d6d7e:	601a      	strpl	r2, [r3, #0]
   d6d80:	4b0c      	ldr	r3, [pc, #48]	; (d6db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6d82:	681a      	ldr	r2, [r3, #0]
   d6d84:	07d1      	lsls	r1, r2, #31
   d6d86:	bf5c      	itt	pl
   d6d88:	2201      	movpl	r2, #1
   d6d8a:	601a      	strpl	r2, [r3, #0]
   d6d8c:	4b0a      	ldr	r3, [pc, #40]	; (d6db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6d8e:	681a      	ldr	r2, [r3, #0]
   d6d90:	07d2      	lsls	r2, r2, #31
   d6d92:	bf5c      	itt	pl
   d6d94:	2201      	movpl	r2, #1
   d6d96:	601a      	strpl	r2, [r3, #0]
   d6d98:	4770      	bx	lr
   d6d9a:	bf00      	nop
   d6d9c:	2003e7ec 	.word	0x2003e7ec
   d6da0:	2003e7e8 	.word	0x2003e7e8
   d6da4:	2003e7e4 	.word	0x2003e7e4
   d6da8:	2003e7e0 	.word	0x2003e7e0
   d6dac:	2003e7dc 	.word	0x2003e7dc
   d6db0:	2003e7d8 	.word	0x2003e7d8
   d6db4:	2003e7d4 	.word	0x2003e7d4
   d6db8:	2003e7d0 	.word	0x2003e7d0

000d6dbc <atol>:
   d6dbc:	220a      	movs	r2, #10
   d6dbe:	2100      	movs	r1, #0
   d6dc0:	f000 b94e 	b.w	d7060 <strtol>

000d6dc4 <__cxa_atexit>:
   d6dc4:	b510      	push	{r4, lr}
   d6dc6:	4c05      	ldr	r4, [pc, #20]	; (d6ddc <__cxa_atexit+0x18>)
   d6dc8:	4613      	mov	r3, r2
   d6dca:	b12c      	cbz	r4, d6dd8 <__cxa_atexit+0x14>
   d6dcc:	460a      	mov	r2, r1
   d6dce:	4601      	mov	r1, r0
   d6dd0:	2002      	movs	r0, #2
   d6dd2:	f3af 8000 	nop.w
   d6dd6:	bd10      	pop	{r4, pc}
   d6dd8:	4620      	mov	r0, r4
   d6dda:	bd10      	pop	{r4, pc}
   d6ddc:	00000000 	.word	0x00000000

000d6de0 <ldiv>:
   d6de0:	2900      	cmp	r1, #0
   d6de2:	b510      	push	{r4, lr}
   d6de4:	fb91 f4f2 	sdiv	r4, r1, r2
   d6de8:	fb02 1314 	mls	r3, r2, r4, r1
   d6dec:	db04      	blt.n	d6df8 <ldiv+0x18>
   d6dee:	2b00      	cmp	r3, #0
   d6df0:	da07      	bge.n	d6e02 <ldiv+0x22>
   d6df2:	3401      	adds	r4, #1
   d6df4:	1a9b      	subs	r3, r3, r2
   d6df6:	e004      	b.n	d6e02 <ldiv+0x22>
   d6df8:	2b00      	cmp	r3, #0
   d6dfa:	bfc4      	itt	gt
   d6dfc:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d6e00:	189b      	addgt	r3, r3, r2
   d6e02:	6004      	str	r4, [r0, #0]
   d6e04:	6043      	str	r3, [r0, #4]
   d6e06:	bd10      	pop	{r4, pc}

000d6e08 <memcpy>:
   d6e08:	b510      	push	{r4, lr}
   d6e0a:	1e43      	subs	r3, r0, #1
   d6e0c:	440a      	add	r2, r1
   d6e0e:	4291      	cmp	r1, r2
   d6e10:	d004      	beq.n	d6e1c <memcpy+0x14>
   d6e12:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e16:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6e1a:	e7f8      	b.n	d6e0e <memcpy+0x6>
   d6e1c:	bd10      	pop	{r4, pc}

000d6e1e <memmove>:
   d6e1e:	4288      	cmp	r0, r1
   d6e20:	b510      	push	{r4, lr}
   d6e22:	eb01 0302 	add.w	r3, r1, r2
   d6e26:	d801      	bhi.n	d6e2c <memmove+0xe>
   d6e28:	1e42      	subs	r2, r0, #1
   d6e2a:	e00b      	b.n	d6e44 <memmove+0x26>
   d6e2c:	4298      	cmp	r0, r3
   d6e2e:	d2fb      	bcs.n	d6e28 <memmove+0xa>
   d6e30:	1881      	adds	r1, r0, r2
   d6e32:	1ad2      	subs	r2, r2, r3
   d6e34:	42d3      	cmn	r3, r2
   d6e36:	d004      	beq.n	d6e42 <memmove+0x24>
   d6e38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6e3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d6e40:	e7f8      	b.n	d6e34 <memmove+0x16>
   d6e42:	bd10      	pop	{r4, pc}
   d6e44:	4299      	cmp	r1, r3
   d6e46:	d004      	beq.n	d6e52 <memmove+0x34>
   d6e48:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6e4c:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6e50:	e7f8      	b.n	d6e44 <memmove+0x26>
   d6e52:	bd10      	pop	{r4, pc}

000d6e54 <memset>:
   d6e54:	4402      	add	r2, r0
   d6e56:	4603      	mov	r3, r0
   d6e58:	4293      	cmp	r3, r2
   d6e5a:	d002      	beq.n	d6e62 <memset+0xe>
   d6e5c:	f803 1b01 	strb.w	r1, [r3], #1
   d6e60:	e7fa      	b.n	d6e58 <memset+0x4>
   d6e62:	4770      	bx	lr

000d6e64 <srand>:
   d6e64:	b538      	push	{r3, r4, r5, lr}
   d6e66:	4b12      	ldr	r3, [pc, #72]	; (d6eb0 <srand+0x4c>)
   d6e68:	681c      	ldr	r4, [r3, #0]
   d6e6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6e6c:	4605      	mov	r5, r0
   d6e6e:	b9d3      	cbnz	r3, d6ea6 <srand+0x42>
   d6e70:	2018      	movs	r0, #24
   d6e72:	f7fe f9c3 	bl	d51fc <malloc>
   d6e76:	f243 330e 	movw	r3, #13070	; 0x330e
   d6e7a:	63a0      	str	r0, [r4, #56]	; 0x38
   d6e7c:	8003      	strh	r3, [r0, #0]
   d6e7e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6e82:	8043      	strh	r3, [r0, #2]
   d6e84:	f241 2334 	movw	r3, #4660	; 0x1234
   d6e88:	8083      	strh	r3, [r0, #4]
   d6e8a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6e8e:	80c3      	strh	r3, [r0, #6]
   d6e90:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6e94:	8103      	strh	r3, [r0, #8]
   d6e96:	2305      	movs	r3, #5
   d6e98:	8143      	strh	r3, [r0, #10]
   d6e9a:	230b      	movs	r3, #11
   d6e9c:	8183      	strh	r3, [r0, #12]
   d6e9e:	2201      	movs	r2, #1
   d6ea0:	2300      	movs	r3, #0
   d6ea2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6ea8:	2200      	movs	r2, #0
   d6eaa:	611d      	str	r5, [r3, #16]
   d6eac:	615a      	str	r2, [r3, #20]
   d6eae:	bd38      	pop	{r3, r4, r5, pc}
   d6eb0:	2003e334 	.word	0x2003e334

000d6eb4 <strcmp>:
   d6eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6ebc:	2a01      	cmp	r2, #1
   d6ebe:	bf28      	it	cs
   d6ec0:	429a      	cmpcs	r2, r3
   d6ec2:	d0f7      	beq.n	d6eb4 <strcmp>
   d6ec4:	1ad0      	subs	r0, r2, r3
   d6ec6:	4770      	bx	lr

000d6ec8 <strcpy>:
   d6ec8:	4603      	mov	r3, r0
   d6eca:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6ece:	f803 2b01 	strb.w	r2, [r3], #1
   d6ed2:	2a00      	cmp	r2, #0
   d6ed4:	d1f9      	bne.n	d6eca <strcpy+0x2>
   d6ed6:	4770      	bx	lr

000d6ed8 <strdup>:
   d6ed8:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <strdup+0xc>)
   d6eda:	4601      	mov	r1, r0
   d6edc:	6818      	ldr	r0, [r3, #0]
   d6ede:	f000 b803 	b.w	d6ee8 <_strdup_r>
   d6ee2:	bf00      	nop
   d6ee4:	2003e334 	.word	0x2003e334

000d6ee8 <_strdup_r>:
   d6ee8:	b570      	push	{r4, r5, r6, lr}
   d6eea:	4606      	mov	r6, r0
   d6eec:	4608      	mov	r0, r1
   d6eee:	460c      	mov	r4, r1
   d6ef0:	f000 f80d 	bl	d6f0e <strlen>
   d6ef4:	1c45      	adds	r5, r0, #1
   d6ef6:	4629      	mov	r1, r5
   d6ef8:	4630      	mov	r0, r6
   d6efa:	f7fe f99f 	bl	d523c <_malloc_r>
   d6efe:	4606      	mov	r6, r0
   d6f00:	b118      	cbz	r0, d6f0a <_strdup_r+0x22>
   d6f02:	462a      	mov	r2, r5
   d6f04:	4621      	mov	r1, r4
   d6f06:	f7ff ff7f 	bl	d6e08 <memcpy>
   d6f0a:	4630      	mov	r0, r6
   d6f0c:	bd70      	pop	{r4, r5, r6, pc}

000d6f0e <strlen>:
   d6f0e:	4603      	mov	r3, r0
   d6f10:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6f14:	2a00      	cmp	r2, #0
   d6f16:	d1fb      	bne.n	d6f10 <strlen+0x2>
   d6f18:	1a18      	subs	r0, r3, r0
   d6f1a:	3801      	subs	r0, #1
   d6f1c:	4770      	bx	lr

000d6f1e <strstr>:
   d6f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f20:	7803      	ldrb	r3, [r0, #0]
   d6f22:	b963      	cbnz	r3, d6f3e <strstr+0x20>
   d6f24:	780b      	ldrb	r3, [r1, #0]
   d6f26:	2b00      	cmp	r3, #0
   d6f28:	bf18      	it	ne
   d6f2a:	2000      	movne	r0, #0
   d6f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f2e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d6f32:	b162      	cbz	r2, d6f4e <strstr+0x30>
   d6f34:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d6f38:	4297      	cmp	r7, r2
   d6f3a:	4630      	mov	r0, r6
   d6f3c:	d0f7      	beq.n	d6f2e <strstr+0x10>
   d6f3e:	4603      	mov	r3, r0
   d6f40:	1c46      	adds	r6, r0, #1
   d6f42:	7800      	ldrb	r0, [r0, #0]
   d6f44:	b110      	cbz	r0, d6f4c <strstr+0x2e>
   d6f46:	1e4d      	subs	r5, r1, #1
   d6f48:	1e5c      	subs	r4, r3, #1
   d6f4a:	e7f0      	b.n	d6f2e <strstr+0x10>
   d6f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f4e:	4618      	mov	r0, r3
   d6f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6f54 <_strtol_r>:
   d6f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6f58:	4680      	mov	r8, r0
   d6f5a:	4840      	ldr	r0, [pc, #256]	; (d705c <_strtol_r+0x108>)
   d6f5c:	f8d0 9000 	ldr.w	r9, [r0]
   d6f60:	460f      	mov	r7, r1
   d6f62:	463d      	mov	r5, r7
   d6f64:	f815 4b01 	ldrb.w	r4, [r5], #1
   d6f68:	eb09 0004 	add.w	r0, r9, r4
   d6f6c:	7840      	ldrb	r0, [r0, #1]
   d6f6e:	f000 0008 	and.w	r0, r0, #8
   d6f72:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d6f76:	b108      	cbz	r0, d6f7c <_strtol_r+0x28>
   d6f78:	462f      	mov	r7, r5
   d6f7a:	e7f2      	b.n	d6f62 <_strtol_r+0xe>
   d6f7c:	2c2d      	cmp	r4, #45	; 0x2d
   d6f7e:	d103      	bne.n	d6f88 <_strtol_r+0x34>
   d6f80:	1cbd      	adds	r5, r7, #2
   d6f82:	787c      	ldrb	r4, [r7, #1]
   d6f84:	2601      	movs	r6, #1
   d6f86:	e003      	b.n	d6f90 <_strtol_r+0x3c>
   d6f88:	2c2b      	cmp	r4, #43	; 0x2b
   d6f8a:	bf04      	itt	eq
   d6f8c:	787c      	ldrbeq	r4, [r7, #1]
   d6f8e:	1cbd      	addeq	r5, r7, #2
   d6f90:	b113      	cbz	r3, d6f98 <_strtol_r+0x44>
   d6f92:	2b10      	cmp	r3, #16
   d6f94:	d10a      	bne.n	d6fac <_strtol_r+0x58>
   d6f96:	e05b      	b.n	d7050 <_strtol_r+0xfc>
   d6f98:	2c30      	cmp	r4, #48	; 0x30
   d6f9a:	d157      	bne.n	d704c <_strtol_r+0xf8>
   d6f9c:	7828      	ldrb	r0, [r5, #0]
   d6f9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6fa2:	2858      	cmp	r0, #88	; 0x58
   d6fa4:	d14d      	bne.n	d7042 <_strtol_r+0xee>
   d6fa6:	786c      	ldrb	r4, [r5, #1]
   d6fa8:	2310      	movs	r3, #16
   d6faa:	3502      	adds	r5, #2
   d6fac:	2e00      	cmp	r6, #0
   d6fae:	bf14      	ite	ne
   d6fb0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d6fb4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6fb8:	2700      	movs	r7, #0
   d6fba:	fbbc faf3 	udiv	sl, ip, r3
   d6fbe:	4638      	mov	r0, r7
   d6fc0:	fb03 cc1a 	mls	ip, r3, sl, ip
   d6fc4:	eb09 0e04 	add.w	lr, r9, r4
   d6fc8:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6fcc:	f01e 0f04 	tst.w	lr, #4
   d6fd0:	d001      	beq.n	d6fd6 <_strtol_r+0x82>
   d6fd2:	3c30      	subs	r4, #48	; 0x30
   d6fd4:	e00b      	b.n	d6fee <_strtol_r+0x9a>
   d6fd6:	f01e 0e03 	ands.w	lr, lr, #3
   d6fda:	d01b      	beq.n	d7014 <_strtol_r+0xc0>
   d6fdc:	f1be 0f01 	cmp.w	lr, #1
   d6fe0:	bf0c      	ite	eq
   d6fe2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d6fe6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6fea:	ebce 0404 	rsb	r4, lr, r4
   d6fee:	42a3      	cmp	r3, r4
   d6ff0:	dd10      	ble.n	d7014 <_strtol_r+0xc0>
   d6ff2:	f1b7 3fff 	cmp.w	r7, #4294967295
   d6ff6:	d00a      	beq.n	d700e <_strtol_r+0xba>
   d6ff8:	4550      	cmp	r0, sl
   d6ffa:	d806      	bhi.n	d700a <_strtol_r+0xb6>
   d6ffc:	d101      	bne.n	d7002 <_strtol_r+0xae>
   d6ffe:	4564      	cmp	r4, ip
   d7000:	dc03      	bgt.n	d700a <_strtol_r+0xb6>
   d7002:	fb03 4000 	mla	r0, r3, r0, r4
   d7006:	2701      	movs	r7, #1
   d7008:	e001      	b.n	d700e <_strtol_r+0xba>
   d700a:	f04f 37ff 	mov.w	r7, #4294967295
   d700e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7012:	e7d7      	b.n	d6fc4 <_strtol_r+0x70>
   d7014:	1c7b      	adds	r3, r7, #1
   d7016:	d10c      	bne.n	d7032 <_strtol_r+0xde>
   d7018:	2e00      	cmp	r6, #0
   d701a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d701e:	bf14      	ite	ne
   d7020:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7028:	f8c8 3000 	str.w	r3, [r8]
   d702c:	b92a      	cbnz	r2, d703a <_strtol_r+0xe6>
   d702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7032:	b106      	cbz	r6, d7036 <_strtol_r+0xe2>
   d7034:	4240      	negs	r0, r0
   d7036:	b172      	cbz	r2, d7056 <_strtol_r+0x102>
   d7038:	b107      	cbz	r7, d703c <_strtol_r+0xe8>
   d703a:	1e69      	subs	r1, r5, #1
   d703c:	6011      	str	r1, [r2, #0]
   d703e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7042:	2430      	movs	r4, #48	; 0x30
   d7044:	2b00      	cmp	r3, #0
   d7046:	d1b1      	bne.n	d6fac <_strtol_r+0x58>
   d7048:	2308      	movs	r3, #8
   d704a:	e7af      	b.n	d6fac <_strtol_r+0x58>
   d704c:	230a      	movs	r3, #10
   d704e:	e7ad      	b.n	d6fac <_strtol_r+0x58>
   d7050:	2c30      	cmp	r4, #48	; 0x30
   d7052:	d0a3      	beq.n	d6f9c <_strtol_r+0x48>
   d7054:	e7aa      	b.n	d6fac <_strtol_r+0x58>
   d7056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d705a:	bf00      	nop
   d705c:	2003e2d0 	.word	0x2003e2d0

000d7060 <strtol>:
   d7060:	4613      	mov	r3, r2
   d7062:	460a      	mov	r2, r1
   d7064:	4601      	mov	r1, r0
   d7066:	4802      	ldr	r0, [pc, #8]	; (d7070 <strtol+0x10>)
   d7068:	6800      	ldr	r0, [r0, #0]
   d706a:	f7ff bf73 	b.w	d6f54 <_strtol_r>
   d706e:	bf00      	nop
   d7070:	2003e334 	.word	0x2003e334

000d7074 <dynalib_user>:
   d7074:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d7084:	00000000 53006973 69747465 7320676e     ....si.Setting s
   d7094:	49646e65 7265746e 206c6176 203a6f74     endInterval to: 
   d70a4:	00696c00 74746553 20676e69 49676f6c     .li.Setting logI
   d70b4:	7265746e 206c6176 203a6f74 006d7300     nterval to: .sm.
   d70c4:	74746553 20676e69 74617473 6e497375     Setting statusIn
   d70d4:	76726574 74206c61 00203a6f 53006d74     terval to: .tm.S
   d70e4:	69747465 7420676e 736e6172 4d74696d     etting transmitM
   d70f4:	2065646f 203a6f74 006f7400 74746553     ode to: .to.Sett
   d7104:	20676e69 656d6974 2074756f 203a6f74     ing timeout to: 
   d7114:	00626400 74746553 20676e69 75626564     .db.Setting debu
   d7124:	6f742067 7400203a 00657572 6e6b6e55     g to: .true.Unkn
   d7134:	206e776f 61726170 6574656d 00202d72     own parameter- .
   d7144:	002e0022 6f6f682f 65722d6b 6e6f7073     ".../hook-respon
   d7154:	532f6573 75746174 74530073 69747261     se/Status.Starti
   d7164:	2c00676e 74617453 002c7375 003a696c     ng.,Status,.li:.
   d7174:	3a69732c 6d732c00 742c003a 2c003a6d     ,si:.,sm:.,tm:.,
   d7184:	003a6f74 7265762c 202c003a 49535352     to:.,ver:., RSSI
   d7194:	2c00203a 6c706552 43002c79 746e756f     : .,Reply,.Count
   d71a4:	52007265 2c004354 33343031 6f74002c     er.RTC.,1043,.to
   d71b4:	506c6174 6f6c7961 203a6461 4e495000     talPayload: .PIN
   d71c4:	656c5300 66207065 206d6f72 206e6950     .Sleep from Pin 
   d71d4:	656b6157 4e00203a 616d726f 6c73206c     Wake: .Normal sl
   d71e4:	00706565 2e312e31 00000032              eep.1.1.2...

000d71f0 <_ZTVN5spark13EthernetClassE>:
	...
   d71f8:	000d52ab 000d52a1 000d5297 000d528d     .R...R...R...R..
   d7208:	000d5281 000d5275 000d5269 000d5261     .R..uR..iR..aR..
   d7218:	000d5257 000d524d 000d68e9              WR..MR...h..

000d7224 <_ZTV8SPIClass>:
	...
   d722c:	000d52c9 000d52cb 64756162 72655300     .R...R..baud.Ser
   d723c:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d724c:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d725c:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d726c:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d727c:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d728c:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d729c:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d72ac:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
   d72bc:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   d72cc:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   d72dc:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d72ec:	006c6961 656e6f6e 61727400 69006563     ail.none.trace.i
   d72fc:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
   d730c:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
   d731c:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
   d732c:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
   d733c:	00000065                                e...

000d7340 <_ZTV14CellularSignal>:
	...
   d7348:	000d5af9 000d5b8b 000d5afb 000d5bcd     .Z...[...Z...[..
   d7358:	000d5b01 000d5b99 000d5b2d 000d5b59     .[...[..-[..Y[..
   d7368:	fffffffc 00000000 000d5b83              .........[..

000d7374 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d737c:	000d5ced 000d5cf3 000d5d37 000d5d01     .\...\..7]...]..
   d738c:	000d5cef                                .\..

000d7390 <_ZTV9IPAddress>:
	...
   d7398:	000d6285 000d6275 000d6277              .b..ub..wb..

000d73a4 <_ZTV9USBSerial>:
	...
   d73ac:	000d635d 000d63ad 000d63bb 000d58e5     ]c...c...c...X..
   d73bc:	000d6399 000d635f 000d6375 000d63a7     .c.._c..uc...c..
   d73cc:	000d638b 000d6359                       .c..Yc..

000d73d4 <_ZTVN5spark13CellularClassE>:
	...
   d73dc:	000d64bd 000d64b3 000d64a9 000d40c7     .d...d...d...@..
   d73ec:	000d649d 000d6491 000d6485 000d647d     .d...d...d..}d..
   d73fc:	000d6473 000d6469 000d68e9              sd..id...h..

000d7408 <_ZTV11USARTSerial>:
	...
   d7410:	000d656d 000d65bd 000d65cb 000d58e5     me...e...e...X..
   d7420:	000d6581 000d65a3 000d658f 000d65b7     .e...e...e...e..
   d7430:	000d656f 000d6573                       oe..se..

000d7438 <_ZTV7TwoWire>:
	...
   d7440:	000d6699 000d66e3 000d66bb 000d669b     .f...f...f...f..
   d7450:	000d66c3 000d66cb 000d66d3 000d66db     .f...f...f...f..

000d7460 <_ZTVN5spark9MeshClassE>:
	...
   d7468:	000d677b 000d6771 000d6767 000d675d     {g..qg..gg..]g..
   d7478:	000d6751 000d6745 000d6739 000d6731     Qg..Eg..9g..1g..
   d7488:	000d6727 000d671d 000d68e9              'g...g...h..

000d7494 <_ZTVN5spark12NetworkClassE>:
	...
   d749c:	000d6881 000d688b 000d6895 000d689f     .h...h...h...h..
   d74ac:	000d68a9 000d68b5 000d68c1 000d68cd     .h...h...h...h..
   d74bc:	000d68d5 000d68df 000d68e9              .h...h...h..

000d74c8 <_ctype_>:
   d74c8:	20202000 20202020 28282020 20282828     .         ((((( 
   d74d8:	20202020 20202020 20202020 20202020                     
   d74e8:	10108820 10101010 10101010 10101010      ...............
   d74f8:	04040410 04040404 10040404 10101010     ................
   d7508:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7518:	01010101 01010101 01010101 10101010     ................
   d7528:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7538:	02020202 02020202 02020202 10101010     ................
   d7548:	00000020 00000000 00000000 00000000      ...............
	...

000d75cc <__sf_fake_stdin>:
	...

000d75ec <__sf_fake_stdout>:
	...

000d760c <__sf_fake_stderr>:
	...

000d762c <link_const_variable_data_end>:
   d762c:	000d4cb5 	.word	0x000d4cb5
   d7630:	000d52b5 	.word	0x000d52b5
   d7634:	000d5391 	.word	0x000d5391
   d7638:	000d58d5 	.word	0x000d58d5
   d763c:	000d5a09 	.word	0x000d5a09
   d7640:	000d5a85 	.word	0x000d5a85
   d7644:	000d5add 	.word	0x000d5add
   d7648:	000d653d 	.word	0x000d653d
   d764c:	000d6831 	.word	0x000d6831
   d7650:	000d69b5 	.word	0x000d69b5
   d7654:	000d6a95 	.word	0x000d6a95
   d7658:	000d6b2d 	.word	0x000d6b2d
   d765c:	000d6bb1 	.word	0x000d6bb1
   d7660:	000d6c75 	.word	0x000d6c75
   d7664:	000d6d39 	.word	0x000d6d39

000d7668 <link_constructors_end>:
	...
