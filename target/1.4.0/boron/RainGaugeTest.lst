
c:/Users/ryan.trisnojoyo/Documents/Particle/projects/Rain_Gauge/src/RainGaugeTest/target/1.4.0/boron/RainGaugeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002f64  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000000  2003f400  2003f400  00017070  2**0
                  CONTENTS
  4 .data         000000c4  2003e258  000d6f80  0000e258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004d4  2003e31c  2003e31c  0001e31c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7044  000d7044  00017044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d706c  000d706c  0001706c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d7eda  00000000  00000000  00017070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000110ba  00000000  00000000  000eef4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ec94  00000000  00000000  00100004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002540  00000000  00000000  0011ec98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000046e8  00000000  00000000  001211d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034b09  00000000  00000000  001258c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00029623  00000000  00000000  0015a3c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001016fc  00000000  00000000  001839ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d1f4  00000000  00000000  002850e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f8dd 	bl	d61ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f8e2 	bl	d6202 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e258 	.word	0x2003e258
   d4048:	000d6f80 	.word	0x000d6f80
   d404c:	2003e31c 	.word	0x2003e31c
   d4050:	2003e31c 	.word	0x2003e31c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 ff5f 	bl	d4f1c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f78 	.word	0x000d6f78
   d4080:	000d6f3c 	.word	0x000d6f3c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b876 	b.w	d4174 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8cf 	bl	d422c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bf11 	b.w	d4eb8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbe9 	b.w	d486c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbef 	b.w	d487c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbed 	b.w	d487c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.8.constprop.22>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b2:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40b6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40b8:	689b      	ldr	r3, [r3, #8]
   d40ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40bc:	68a3      	ldr	r3, [r4, #8]
   d40be:	3b01      	subs	r3, #1
   d40c0:	60a3      	str	r3, [r4, #8]
   d40c2:	b92b      	cbnz	r3, d40d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.8.constprop.22+0x1e>
            _M_destroy();
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	4620      	mov	r0, r4
   d40c8:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d40ce:	4718      	bx	r3
   d40d0:	bd10      	pop	{r4, pc}
	...

000d40d4 <_Z14initConnectionv>:
  Particle.syncTime();
  Particle.publish("StatusRainGauge",payload ,PRIVATE);
}

void initConnection()
{
   d40d4:	b510      	push	{r4, lr}
   d40d6:	4c14      	ldr	r4, [pc, #80]	; (d4128 <_Z14initConnectionv+0x54>)

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d40d8:	2300      	movs	r3, #0
   d40da:	461a      	mov	r2, r3
   d40dc:	4619      	mov	r1, r3
   d40de:	6860      	ldr	r0, [r4, #4]
   d40e0:	f000 fb54 	bl	d478c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d40e4:	2300      	movs	r3, #0
   d40e6:	461a      	mov	r2, r3
   d40e8:	4619      	mov	r1, r3
   d40ea:	6860      	ldr	r0, [r4, #4]
   d40ec:	f000 fb2e 	bl	d474c <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d40f0:	2200      	movs	r2, #0
   d40f2:	4611      	mov	r1, r2
   d40f4:	6860      	ldr	r0, [r4, #4]
   d40f6:	f000 fb41 	bl	d477c <network_ready>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d40fa:	b168      	cbz	r0, d4118 <_Z14initConnectionv+0x44>
   d40fc:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_Z14initConnectionv+0x54>)
   d40fe:	2200      	movs	r2, #0
   d4100:	4611      	mov	r1, r2
   d4102:	6858      	ldr	r0, [r3, #4]
   d4104:	f000 fb3a 	bl	d477c <network_ready>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4108:	f000 fb78 	bl	d47fc <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d410c:	f000 fb86 	bl	d481c <spark_cloud_flag_connected>
   d4110:	b928      	cbnz	r0, d411e <_Z14initConnectionv+0x4a>
            spark_process();
   d4112:	f000 fb6b 	bl	d47ec <spark_process>
   d4116:	e7f9      	b.n	d410c <_Z14initConnectionv+0x38>
   d4118:	f000 fb68 	bl	d47ec <spark_process>
   d411c:	e7e8      	b.n	d40f0 <_Z14initConnectionv+0x1c>
  Cellular.on();
  Cellular.connect();
  waitUntil(Cellular.ready);
  Particle.connect();
  waitUntil(Particle.connected);
}
   d411e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4122:	f000 bb7b 	b.w	d481c <spark_cloud_flag_connected>
   d4126:	bf00      	nop
   d4128:	2003e4c0 	.word	0x2003e4c0

000d412c <_Z12initSyncTimev>:
  }

    //Serial.println("Sleep");
    //publish("warning", "Call setEnabled() to enable deep sleep");
}
void initSyncTime(){
   d412c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  initConnection();
   d412e:	f7ff ffd1 	bl	d40d4 <_Z14initConnectionv>
   d4132:	f000 fb73 	bl	d481c <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4136:	b110      	cbz	r0, d413e <_Z12initSyncTimev+0x12>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
   d4138:	2000      	movs	r0, #0
   d413a:	f000 fb7f 	bl	d483c <spark_sync_time>
   d413e:	4b0a      	ldr	r3, [pc, #40]	; (d4168 <_Z12initSyncTimev+0x3c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4140:	4a0a      	ldr	r2, [pc, #40]	; (d416c <_Z12initSyncTimev+0x40>)
   d4142:	781b      	ldrb	r3, [r3, #0]
   d4144:	f88d 3000 	strb.w	r3, [sp]
   d4148:	a802      	add	r0, sp, #8
   d414a:	233c      	movs	r3, #60	; 0x3c
   d414c:	4908      	ldr	r1, [pc, #32]	; (d4170 <_Z12initSyncTimev+0x44>)
   d414e:	f001 f841 	bl	d51d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4152:	9803      	ldr	r0, [sp, #12]
   d4154:	b128      	cbz	r0, d4162 <_Z12initSyncTimev+0x36>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4156:	6843      	ldr	r3, [r0, #4]
   d4158:	3b01      	subs	r3, #1
   d415a:	6043      	str	r3, [r0, #4]
   d415c:	b90b      	cbnz	r3, d4162 <_Z12initSyncTimev+0x36>
   d415e:	f7ff ffa8 	bl	d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.8.constprop.22>
  Particle.syncTime();
  Particle.publish("StatusRainGauge",payload ,PRIVATE);
}
   d4162:	b005      	add	sp, #20
   d4164:	f85d fb04 	ldr.w	pc, [sp], #4
   d4168:	2003e3ae 	.word	0x2003e3ae
   d416c:	2003e3c8 	.word	0x2003e3c8
   d4170:	000d6a60 	.word	0x000d6a60

000d4174 <setup>:

SYSTEM_MODE (MANUAL);


void setup()
{
   d4174:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   d4176:	f001 fa83 	bl	d5680 <_Z16_fetch_usbserialv>
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
   d417a:	4d10      	ldr	r5, [pc, #64]	; (d41bc <setup+0x48>)
  pinMode(led2, OUTPUT);
   d417c:	4c10      	ldr	r4, [pc, #64]	; (d41c0 <setup+0x4c>)
SYSTEM_MODE (MANUAL);


void setup()
{
  Serial.begin(9600);
   d417e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4182:	f001 fa71 	bl	d5668 <_ZN9USBSerial5beginEl>
  pinMode(buttonPin, INPUT_PULLUP);
   d4186:	2102      	movs	r1, #2
   d4188:	2004      	movs	r0, #4
   d418a:	f001 fd57 	bl	d5c3c <pinMode>
  pinMode(led1, OUTPUT);
   d418e:	2101      	movs	r1, #1
   d4190:	8828      	ldrh	r0, [r5, #0]
   d4192:	f001 fd53 	bl	d5c3c <pinMode>
  pinMode(led2, OUTPUT);
   d4196:	2101      	movs	r1, #1
   d4198:	8820      	ldrh	r0, [r4, #0]
   d419a:	f001 fd4f 	bl	d5c3c <pinMode>
  digitalWrite(led1, LOW);
   d419e:	2100      	movs	r1, #0
   d41a0:	8828      	ldrh	r0, [r5, #0]
   d41a2:	f001 fd5c 	bl	d5c5e <digitalWrite>
  digitalWrite(led2, LOW);
   d41a6:	2100      	movs	r1, #0
   d41a8:	8820      	ldrh	r0, [r4, #0]
   d41aa:	f001 fd58 	bl	d5c5e <digitalWrite>
  initSyncTime();
   d41ae:	f7ff ffbd 	bl	d412c <_Z12initSyncTimev>
  prevMinute = Time.minute();
   d41b2:	f000 fe1f 	bl	d4df4 <_ZN9TimeClass6minuteEv>
   d41b6:	4b03      	ldr	r3, [pc, #12]	; (d41c4 <setup+0x50>)
   d41b8:	6018      	str	r0, [r3, #0]
   d41ba:	bd38      	pop	{r3, r4, r5, pc}
   d41bc:	2003e3c4 	.word	0x2003e3c4
   d41c0:	2003e258 	.word	0x2003e258
   d41c4:	2003e3bc 	.word	0x2003e3bc

000d41c8 <_Z20disconnectConnectionv>:
  Particle.connect();
  waitUntil(Particle.connected);
}

void disconnectConnection()
{
   d41c8:	b510      	push	{r4, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
   d41ca:	f000 fb1f 	bl	d480c <spark_cloud_flag_disconnect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41ce:	f000 fb25 	bl	d481c <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d41d2:	4604      	mov	r4, r0
   d41d4:	b950      	cbnz	r0, d41ec <_Z20disconnectConnectionv+0x24>
   d41d6:	f000 fb21 	bl	d481c <spark_cloud_flag_connected>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d41da:	4806      	ldr	r0, [pc, #24]	; (d41f4 <_Z20disconnectConnectionv+0x2c>)
   d41dc:	4623      	mov	r3, r4
   d41de:	4622      	mov	r2, r4
   d41e0:	4621      	mov	r1, r4
   d41e2:	6840      	ldr	r0, [r0, #4]
  Particle.disconnect();
  waitUntil(Particle.disconnected);
  Cellular.off();
}
   d41e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41e8:	f000 bad8 	b.w	d479c <network_off>
            spark_process();
   d41ec:	f000 fafe 	bl	d47ec <spark_process>
   d41f0:	e7ed      	b.n	d41ce <_Z20disconnectConnectionv+0x6>
   d41f2:	bf00      	nop
   d41f4:	2003e4c0 	.word	0x2003e4c0

000d41f8 <_Z22calculateRainGaugeDatav>:
void calculateRainGaugeData()
{
   d41f8:	b510      	push	{r4, lr}
  if (buttonState == HIGH)
   d41fa:	4b0a      	ldr	r3, [pc, #40]	; (d4224 <_Z22calculateRainGaugeDatav+0x2c>)
   d41fc:	681b      	ldr	r3, [r3, #0]
   d41fe:	2b01      	cmp	r3, #1
   d4200:	d00f      	beq.n	d4222 <_Z22calculateRainGaugeDatav+0x2a>
  // turn LED on:
  //Serial.println("HIGH");
  }
  else
  {
  i++;
   d4202:	4c09      	ldr	r4, [pc, #36]	; (d4228 <_Z22calculateRainGaugeDatav+0x30>)
   d4204:	6823      	ldr	r3, [r4, #0]
  delay(400);
   d4206:	f44f 70c8 	mov.w	r0, #400	; 0x190
  // turn LED on:
  //Serial.println("HIGH");
  }
  else
  {
  i++;
   d420a:	3301      	adds	r3, #1
   d420c:	6023      	str	r3, [r4, #0]
  delay(400);
   d420e:	f000 fe05 	bl	d4e1c <delay>
  Serial.println(i);
   d4212:	f001 fa35 	bl	d5680 <_Z16_fetch_usbserialv>
   d4216:	6821      	ldr	r1, [r4, #0]
   d4218:	220a      	movs	r2, #10
  }
   d421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  }
  else
  {
  i++;
  delay(400);
  Serial.println(i);
   d421e:	f000 bd6f 	b.w	d4d00 <_ZN5Print7printlnEii>
   d4222:	bd10      	pop	{r4, pc}
   d4224:	2003e3c0 	.word	0x2003e3c0
   d4228:	2003e3b0 	.word	0x2003e3b0

000d422c <loop>:
  digitalWrite(led2, LOW);
  initSyncTime();
  prevMinute = Time.minute();
}
void loop()
{
   d422c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4230:	b087      	sub	sp, #28
  //System.wakeup();
  currentMinute = Time.minute();
   d4232:	f000 fddf 	bl	d4df4 <_ZN9TimeClass6minuteEv>
   d4236:	4c5b      	ldr	r4, [pc, #364]	; (d43a4 <loop+0x178>)
  // read the state of the pushbutton value:
  buttonState = digitalRead(buttonPin);

  if ((currentMinute - prevMinute >= logInterval) && counter)
   d4238:	4e5b      	ldr	r6, [pc, #364]	; (d43a8 <loop+0x17c>)
  prevMinute = Time.minute();
}
void loop()
{
  //System.wakeup();
  currentMinute = Time.minute();
   d423a:	6020      	str	r0, [r4, #0]
  // read the state of the pushbutton value:
  buttonState = digitalRead(buttonPin);
   d423c:	2004      	movs	r0, #4
   d423e:	f001 fd27 	bl	d5c90 <digitalRead>
   d4242:	4b5a      	ldr	r3, [pc, #360]	; (d43ac <loop+0x180>)

  if ((currentMinute - prevMinute >= logInterval) && counter)
   d4244:	6832      	ldr	r2, [r6, #0]
void loop()
{
  //System.wakeup();
  currentMinute = Time.minute();
  // read the state of the pushbutton value:
  buttonState = digitalRead(buttonPin);
   d4246:	6018      	str	r0, [r3, #0]

  if ((currentMinute - prevMinute >= logInterval) && counter)
   d4248:	4d59      	ldr	r5, [pc, #356]	; (d43b0 <loop+0x184>)
   d424a:	6823      	ldr	r3, [r4, #0]
   d424c:	4f59      	ldr	r7, [pc, #356]	; (d43b4 <loop+0x188>)
   d424e:	1a9b      	subs	r3, r3, r2
   d4250:	682a      	ldr	r2, [r5, #0]
   d4252:	4293      	cmp	r3, r2
   d4254:	46a1      	mov	r9, r4
   d4256:	f0c0 8085 	bcc.w	d4364 <loop+0x138>
   d425a:	683b      	ldr	r3, [r7, #0]
   d425c:	2b00      	cmp	r3, #0
   d425e:	f000 8081 	beq.w	d4364 <loop+0x138>
  {
       //log the data
    if (temp == 0)
   d4262:	4c55      	ldr	r4, [pc, #340]	; (d43b8 <loop+0x18c>)
   d4264:	f8df 8184 	ldr.w	r8, [pc, #388]	; d43ec <loop+0x1c0>
   d4268:	6823      	ldr	r3, [r4, #0]
   d426a:	b11b      	cbz	r3, d4274 <loop+0x48>
    {
    strcat(payload,String(i));
    }
    else 
    {
    strcat(payload,",");
   d426c:	4953      	ldr	r1, [pc, #332]	; (d43bc <loop+0x190>)
   d426e:	4854      	ldr	r0, [pc, #336]	; (d43c0 <loop+0x194>)
   d4270:	f001 fff8 	bl	d6264 <strcat>
    strcat(payload,String(i));
   d4274:	220a      	movs	r2, #10
   d4276:	f8d8 1000 	ldr.w	r1, [r8]
   d427a:	a802      	add	r0, sp, #8
   d427c:	f000 fc4f 	bl	d4b1e <_ZN6StringC1Eih>
   d4280:	9902      	ldr	r1, [sp, #8]
   d4282:	484f      	ldr	r0, [pc, #316]	; (d43c0 <loop+0x194>)
   d4284:	f001 ffee 	bl	d6264 <strcat>
   d4288:	a802      	add	r0, sp, #8
   d428a:	f000 fbf0 	bl	d4a6e <_ZN6StringD1Ev>
    }

    Serial.print("Payload:");
   d428e:	f001 f9f7 	bl	d5680 <_Z16_fetch_usbserialv>
   d4292:	494c      	ldr	r1, [pc, #304]	; (d43c4 <loop+0x198>)
   d4294:	f000 fcbc 	bl	d4c10 <_ZN5Print5printEPKc>
    Serial.println(payload);
   d4298:	f001 f9f2 	bl	d5680 <_Z16_fetch_usbserialv>
   d429c:	4948      	ldr	r1, [pc, #288]	; (d43c0 <loop+0x194>)
   d429e:	f000 fcca 	bl	d4c36 <_ZN5Print7printlnEPKc>
    Serial.println(prevMinute);
   d42a2:	f001 f9ed 	bl	d5680 <_Z16_fetch_usbserialv>
   d42a6:	6831      	ldr	r1, [r6, #0]
   d42a8:	220a      	movs	r2, #10
   d42aa:	f000 fcfd 	bl	d4ca8 <_ZN5Print7printlnEmi>
     
    temp++;
    i = 0;
   d42ae:	2200      	movs	r2, #0

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevMinute);
     
    temp++;
   d42b0:	6823      	ldr	r3, [r4, #0]
    i = 0;
   d42b2:	f8c8 2000 	str.w	r2, [r8]
    prevMinute = currentMinute;
   d42b6:	f8d9 2000 	ldr.w	r2, [r9]
   d42ba:	6032      	str	r2, [r6, #0]

    if (temp >= sendInterval/logInterval)
   d42bc:	4e42      	ldr	r6, [pc, #264]	; (d43c8 <loop+0x19c>)
   d42be:	6829      	ldr	r1, [r5, #0]
   d42c0:	6832      	ldr	r2, [r6, #0]
   d42c2:	fbb2 f2f1 	udiv	r2, r2, r1

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevMinute);
     
    temp++;
   d42c6:	3301      	adds	r3, #1
    i = 0;
    prevMinute = currentMinute;

    if (temp >= sendInterval/logInterval)
   d42c8:	4293      	cmp	r3, r2

    Serial.print("Payload:");
    Serial.println(payload);
    Serial.println(prevMinute);
     
    temp++;
   d42ca:	6023      	str	r3, [r4, #0]
    i = 0;
    prevMinute = currentMinute;

    if (temp >= sendInterval/logInterval)
   d42cc:	d366      	bcc.n	d439c <loop+0x170>
    {
    //initiliaze connection, Cellular and Particle cloud handshake
    initConnection();
   d42ce:	f7ff ff01 	bl	d40d4 <_Z14initConnectionv>
    strcpy(totalPayload,String(Time.now()-60*sendInterval));
   d42d2:	f000 fd87 	bl	d4de4 <_ZN9TimeClass3nowEv>
   d42d6:	6831      	ldr	r1, [r6, #0]
   d42d8:	253c      	movs	r5, #60	; 0x3c
   d42da:	220a      	movs	r2, #10
   d42dc:	fb05 0111 	mls	r1, r5, r1, r0
   d42e0:	a802      	add	r0, sp, #8
   d42e2:	f000 fc2f 	bl	d4b44 <_ZN6StringC1Emh>
   d42e6:	9902      	ldr	r1, [sp, #8]
   d42e8:	4838      	ldr	r0, [pc, #224]	; (d43cc <loop+0x1a0>)
   d42ea:	f001 ffd4 	bl	d6296 <strcpy>
   d42ee:	a802      	add	r0, sp, #8
   d42f0:	f000 fbbd 	bl	d4a6e <_ZN6StringD1Ev>
    strcat(totalPayload,",1043,");
   d42f4:	4936      	ldr	r1, [pc, #216]	; (d43d0 <loop+0x1a4>)
   d42f6:	4835      	ldr	r0, [pc, #212]	; (d43cc <loop+0x1a0>)
   d42f8:	f001 ffb4 	bl	d6264 <strcat>
    strcat(totalPayload,String(logInterval));
   d42fc:	4b2c      	ldr	r3, [pc, #176]	; (d43b0 <loop+0x184>)
   d42fe:	220a      	movs	r2, #10
   d4300:	6819      	ldr	r1, [r3, #0]
   d4302:	a802      	add	r0, sp, #8
   d4304:	f000 fc1e 	bl	d4b44 <_ZN6StringC1Emh>
   d4308:	9902      	ldr	r1, [sp, #8]
   d430a:	4830      	ldr	r0, [pc, #192]	; (d43cc <loop+0x1a0>)
   d430c:	f001 ffaa 	bl	d6264 <strcat>
   d4310:	a802      	add	r0, sp, #8
   d4312:	f000 fbac 	bl	d4a6e <_ZN6StringD1Ev>
    strcat(totalPayload,",");
   d4316:	4929      	ldr	r1, [pc, #164]	; (d43bc <loop+0x190>)
   d4318:	482c      	ldr	r0, [pc, #176]	; (d43cc <loop+0x1a0>)
   d431a:	f001 ffa3 	bl	d6264 <strcat>
    strcat(totalPayload,payload);
   d431e:	4928      	ldr	r1, [pc, #160]	; (d43c0 <loop+0x194>)
   d4320:	482a      	ldr	r0, [pc, #168]	; (d43cc <loop+0x1a0>)
   d4322:	f001 ff9f 	bl	d6264 <strcat>
   d4326:	4b2b      	ldr	r3, [pc, #172]	; (d43d4 <loop+0x1a8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4328:	4a28      	ldr	r2, [pc, #160]	; (d43cc <loop+0x1a0>)
   d432a:	781b      	ldrb	r3, [r3, #0]
   d432c:	f88d 3000 	strb.w	r3, [sp]
   d4330:	a802      	add	r0, sp, #8
   d4332:	462b      	mov	r3, r5
   d4334:	4928      	ldr	r1, [pc, #160]	; (d43d8 <loop+0x1ac>)
   d4336:	f000 ff4d 	bl	d51d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d433a:	9803      	ldr	r0, [sp, #12]
   d433c:	b128      	cbz	r0, d434a <loop+0x11e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d433e:	6843      	ldr	r3, [r0, #4]
   d4340:	3b01      	subs	r3, #1
   d4342:	6043      	str	r3, [r0, #4]
   d4344:	b90b      	cbnz	r3, d434a <loop+0x11e>
   d4346:	f7ff feb4 	bl	d40b2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.8.constprop.22>
    //send Message
    //Particle.publish("StatusRainGauge",payload ,PRIVATE);
    Particle.publish("Temp", totalPayload, PRIVATE);
    //Particle.publish("Temp", "{ 'id':'1C93F9','data':'ffffffffffffffff30','time':'1570476362','device':'1C93F9','lqi':'Good'}", PRIVATE);
    Serial.println("Message sent");
   d434a:	f001 f999 	bl	d5680 <_Z16_fetch_usbserialv>
   d434e:	4923      	ldr	r1, [pc, #140]	; (d43dc <loop+0x1b0>)
   d4350:	f000 fc71 	bl	d4c36 <_ZN5Print7printlnEPKc>
    strcpy(payload,"");
   d4354:	4922      	ldr	r1, [pc, #136]	; (d43e0 <loop+0x1b4>)
   d4356:	481a      	ldr	r0, [pc, #104]	; (d43c0 <loop+0x194>)
   d4358:	f001 ff9d 	bl	d6296 <strcpy>
    //prevMinute = Time.minute();
    temp = 0;
   d435c:	2300      	movs	r3, #0
   d435e:	6023      	str	r3, [r4, #0]
    counter = 0;
   d4360:	603b      	str	r3, [r7, #0]
   d4362:	e01b      	b.n	d439c <loop+0x170>
    }    
  }
  else
  {

    if (!counter)
   d4364:	683c      	ldr	r4, [r7, #0]
   d4366:	b9bc      	cbnz	r4, d4398 <loop+0x16c>
    {
    //Turn of everything
    disconnectConnection();
   d4368:	f7ff ff2e 	bl	d41c8 <_Z20disconnectConnectionv>
    //Go to sleep
    Serial.println("Sleep");
   d436c:	f001 f988 	bl	d5680 <_Z16_fetch_usbserialv>
   d4370:	491c      	ldr	r1, [pc, #112]	; (d43e4 <loop+0x1b8>)
   d4372:	f000 fc60 	bl	d4c36 <_ZN5Print7printlnEPKc>
    Serial.println("");
   d4376:	f001 f983 	bl	d5680 <_Z16_fetch_usbserialv>
   d437a:	4919      	ldr	r1, [pc, #100]	; (d43e0 <loop+0x1b4>)
   d437c:	f000 fc5b 	bl	d4c36 <_ZN5Print7printlnEPKc>
    System.sleep(logInterval * 60);
   d4380:	682a      	ldr	r2, [r5, #0]
    static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF);
    inline static SleepResult sleep(Spark_Sleep_TypeDef sleepMode, SleepOptionFlags flag, long seconds=0) {
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
   d4382:	4b19      	ldr	r3, [pc, #100]	; (d43e8 <loop+0x1bc>)
   d4384:	213c      	movs	r1, #60	; 0x3c
   d4386:	434a      	muls	r2, r1
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	4621      	mov	r1, r4
   d438c:	a802      	add	r0, sp, #8
   d438e:	f000 fafb 	bl	d4988 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    counter = 1;
   d4392:	4b08      	ldr	r3, [pc, #32]	; (d43b4 <loop+0x188>)
   d4394:	2201      	movs	r2, #1
   d4396:	601a      	str	r2, [r3, #0]
    }

    //Get the rain gauge data 
    calculateRainGaugeData();
   d4398:	f7ff ff2e 	bl	d41f8 <_Z22calculateRainGaugeDatav>
  }

    //Serial.println("Sleep");
    //publish("warning", "Call setEnabled() to enable deep sleep");
}
   d439c:	b007      	add	sp, #28
   d439e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d43a2:	bf00      	nop
   d43a4:	2003e320 	.word	0x2003e320
   d43a8:	2003e3bc 	.word	0x2003e3bc
   d43ac:	2003e3c0 	.word	0x2003e3c0
   d43b0:	2003e25c 	.word	0x2003e25c
   d43b4:	2003e3b4 	.word	0x2003e3b4
   d43b8:	2003e324 	.word	0x2003e324
   d43bc:	000d6a7e 	.word	0x000d6a7e
   d43c0:	2003e3c8 	.word	0x2003e3c8
   d43c4:	000d6a70 	.word	0x000d6a70
   d43c8:	2003e260 	.word	0x2003e260
   d43cc:	2003e32e 	.word	0x2003e32e
   d43d0:	000d6a79 	.word	0x000d6a79
   d43d4:	2003e3ae 	.word	0x2003e3ae
   d43d8:	000d6a80 	.word	0x000d6a80
   d43dc:	000d6a85 	.word	0x000d6a85
   d43e0:	000d6b83 	.word	0x000d6b83
   d43e4:	000d6a92 	.word	0x000d6a92
   d43e8:	2003e3b8 	.word	0x2003e3b8
   d43ec:	2003e3b0 	.word	0x2003e3b0

000d43f0 <_GLOBAL__sub_I_led1>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d43f0:	4b09      	ldr	r3, [pc, #36]	; (d4418 <_GLOBAL__sub_I_led1+0x28>)
  {
  i++;
  delay(400);
  Serial.println(i);
  }
   d43f2:	b510      	push	{r4, lr}
   d43f4:	2400      	movs	r4, #0
   d43f6:	601c      	str	r4, [r3, #0]
   d43f8:	4b08      	ldr	r3, [pc, #32]	; (d441c <_GLOBAL__sub_I_led1+0x2c>)
   d43fa:	2201      	movs	r2, #1
   d43fc:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d43fe:	f000 f821 	bl	d4444 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4402:	4b07      	ldr	r3, [pc, #28]	; (d4420 <_GLOBAL__sub_I_led1+0x30>)
   d4404:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4408:	701c      	strb	r4, [r3, #0]
   d440a:	805c      	strh	r4, [r3, #2]
   d440c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d440e:	2003      	movs	r0, #3
   d4410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4414:	f000 b956 	b.w	d46c4 <set_system_mode>
   d4418:	2003e3b8 	.word	0x2003e3b8
   d441c:	2003e3ae 	.word	0x2003e3ae
   d4420:	2003e328 	.word	0x2003e328

000d4424 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <netdb_freeaddrinfo+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	689b      	ldr	r3, [r3, #8]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	00030268 	.word	0x00030268

000d4434 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <netdb_getaddrinfo+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	68db      	ldr	r3, [r3, #12]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	00030268 	.word	0x00030268

000d4444 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_Pin_Map+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	681b      	ldr	r3, [r3, #0]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003022c 	.word	0x0003022c

000d4454 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_Pin_Mode+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	689b      	ldr	r3, [r3, #8]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003022c 	.word	0x0003022c

000d4464 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_Get_Pin_Mode+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	68db      	ldr	r3, [r3, #12]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003022c 	.word	0x0003022c

000d4474 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_GPIO_Write+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	691b      	ldr	r3, [r3, #16]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003022c 	.word	0x0003022c

000d4484 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_GPIO_Read+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	695b      	ldr	r3, [r3, #20]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003022c 	.word	0x0003022c

000d4494 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_SPI_Init+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	69db      	ldr	r3, [r3, #28]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030230 	.word	0x00030230

000d44a4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_SPI_Is_Enabled+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6a1b      	ldr	r3, [r3, #32]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030230 	.word	0x00030230

000d44b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_RNG_GetRandomNumber+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	685b      	ldr	r3, [r3, #4]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030218 	.word	0x00030218

000d44c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030218 	.word	0x00030218

000d44d4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_RTC_Get_UnixTime+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	69db      	ldr	r3, [r3, #28]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030218 	.word	0x00030218

000d44e4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_RTC_Time_Is_Valid+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030218 	.word	0x00030218

000d44f4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <os_thread_is_current+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	689b      	ldr	r3, [r3, #8]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030248 	.word	0x00030248

000d4504 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <os_thread_join+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	691b      	ldr	r3, [r3, #16]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030248 	.word	0x00030248

000d4514 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <os_thread_cleanup+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	695b      	ldr	r3, [r3, #20]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030248 	.word	0x00030248

000d4524 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <os_mutex_create+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030248 	.word	0x00030248

000d4534 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <os_mutex_recursive_create+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030248 	.word	0x00030248

000d4544 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <inet_inet_ntop+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	695b      	ldr	r3, [r3, #20]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030264 	.word	0x00030264

000d4554 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_USART_Init+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	681b      	ldr	r3, [r3, #0]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003023c 	.word	0x0003023c

000d4564 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_USART_Write_Data+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	68db      	ldr	r3, [r3, #12]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003023c 	.word	0x0003023c

000d4574 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_USART_Available_Data+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	691b      	ldr	r3, [r3, #16]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003023c 	.word	0x0003023c

000d4584 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_USART_Read_Data+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	695b      	ldr	r3, [r3, #20]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003023c 	.word	0x0003023c

000d4594 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_USART_Peek_Data+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	699b      	ldr	r3, [r3, #24]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003023c 	.word	0x0003023c

000d45a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_USART_Flush_Data+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	69db      	ldr	r3, [r3, #28]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003023c 	.word	0x0003023c

000d45b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_USART_Is_Enabled+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6a1b      	ldr	r3, [r3, #32]
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003023c 	.word	0x0003023c

000d45c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_USART_Available_Data_For_Write+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003023c 	.word	0x0003023c

000d45d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_I2C_Write_Data+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6a1b      	ldr	r3, [r3, #32]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030228 	.word	0x00030228

000d45e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <HAL_I2C_Available_Data+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030228 	.word	0x00030228

000d45f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <HAL_I2C_Read_Data+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030228 	.word	0x00030228

000d4604 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <HAL_I2C_Peek_Data+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030228 	.word	0x00030228

000d4614 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_I2C_Flush_Data+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030228 	.word	0x00030228

000d4624 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_I2C_Is_Enabled+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030228 	.word	0x00030228

000d4634 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_I2C_Init+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030228 	.word	0x00030228

000d4644 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USB_USART_Init+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	681b      	ldr	r3, [r3, #0]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003024c 	.word	0x0003024c

000d4654 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USB_USART_Begin+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	685b      	ldr	r3, [r3, #4]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003024c 	.word	0x0003024c

000d4664 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_USB_USART_Available_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	691b      	ldr	r3, [r3, #16]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003024c 	.word	0x0003024c

000d4674 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	695b      	ldr	r3, [r3, #20]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003024c 	.word	0x0003024c

000d4684 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USB_USART_Receive_Data+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	699b      	ldr	r3, [r3, #24]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003024c 	.word	0x0003024c

000d4694 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USB_USART_Send_Data+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	69db      	ldr	r3, [r3, #28]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003024c 	.word	0x0003024c

000d46a4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USB_USART_Flush_Data+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	6a1b      	ldr	r3, [r3, #32]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003024c 	.word	0x0003024c

000d46b4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <system_mode+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	681b      	ldr	r3, [r3, #0]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030220 	.word	0x00030220

000d46c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <set_system_mode+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	685b      	ldr	r3, [r3, #4]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030220 	.word	0x00030220

000d46d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <system_delay_ms+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030220 	.word	0x00030220

000d46e4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <system_sleep+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	699b      	ldr	r3, [r3, #24]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030220 	.word	0x00030220

000d46f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <application_thread_current+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030220 	.word	0x00030220

000d4704 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <application_thread_invoke+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030220 	.word	0x00030220

000d4714 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <system_thread_get_state+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030220 	.word	0x00030220

000d4724 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b03      	ldr	r3, [pc, #12]	; (d4734 <system_ctrl_set_app_request_handler+0x10>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d472e:	9301      	str	r3, [sp, #4]
   d4730:	bd08      	pop	{r3, pc}
   d4732:	0000      	.short	0x0000
   d4734:	00030220 	.word	0x00030220

000d4738 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b03      	ldr	r3, [pc, #12]	; (d4748 <system_ctrl_set_result+0x10>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4742:	9301      	str	r3, [sp, #4]
   d4744:	bd08      	pop	{r3, pc}
   d4746:	0000      	.short	0x0000
   d4748:	00030220 	.word	0x00030220

000d474c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <network_connect+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	685b      	ldr	r3, [r3, #4]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030240 	.word	0x00030240

000d475c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_connecting+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	689b      	ldr	r3, [r3, #8]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <network_disconnect+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	68db      	ldr	r3, [r3, #12]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030240 	.word	0x00030240

000d477c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <network_ready+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	691b      	ldr	r3, [r3, #16]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030240 	.word	0x00030240

000d478c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <network_on+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	695b      	ldr	r3, [r3, #20]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030240 	.word	0x00030240

000d479c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <network_off+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	699b      	ldr	r3, [r3, #24]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030240 	.word	0x00030240

000d47ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_listen+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	69db      	ldr	r3, [r3, #28]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_listening+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a1b      	ldr	r3, [r3, #32]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_set_listen_timeout+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_get_listen_timeout+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <spark_process+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	689b      	ldr	r3, [r3, #8]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030244 	.word	0x00030244

000d47fc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <spark_cloud_flag_connect+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	68db      	ldr	r3, [r3, #12]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030244 	.word	0x00030244

000d480c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <spark_cloud_flag_disconnect+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	691b      	ldr	r3, [r3, #16]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030244 	.word	0x00030244

000d481c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <spark_cloud_flag_connected+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	695b      	ldr	r3, [r3, #20]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030244 	.word	0x00030244

000d482c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <spark_send_event+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	6a1b      	ldr	r3, [r3, #32]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030244 	.word	0x00030244

000d483c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <spark_sync_time+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030244 	.word	0x00030244

000d484c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <spark_sync_time_pending+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030244 	.word	0x00030244

000d485c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030244 	.word	0x00030244

000d486c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <malloc+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	681b      	ldr	r3, [r3, #0]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003021c 	.word	0x0003021c

000d487c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <free+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	685b      	ldr	r3, [r3, #4]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003021c 	.word	0x0003021c

000d488c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <realloc+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	689b      	ldr	r3, [r3, #8]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <siscanf+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	699b      	ldr	r3, [r3, #24]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003021c 	.word	0x0003021c

000d48ac <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <abort+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003021c 	.word	0x0003021c

000d48bc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <_malloc_r+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003021c 	.word	0x0003021c

000d48cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48cc:	2200      	movs	r2, #0
   d48ce:	4611      	mov	r1, r2
   d48d0:	6840      	ldr	r0, [r0, #4]
   d48d2:	f7ff bf73 	b.w	d47bc <network_listening>

000d48d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48d6:	2200      	movs	r2, #0
   d48d8:	4611      	mov	r1, r2
   d48da:	6840      	ldr	r0, [r0, #4]
   d48dc:	f7ff bf7e 	b.w	d47dc <network_get_listen_timeout>

000d48e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48e0:	2200      	movs	r2, #0
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff bf72 	b.w	d47cc <network_set_listen_timeout>

000d48e8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48e8:	2200      	movs	r2, #0
   d48ea:	f081 0101 	eor.w	r1, r1, #1
   d48ee:	6840      	ldr	r0, [r0, #4]
   d48f0:	f7ff bf5c 	b.w	d47ac <network_listen>

000d48f4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d48f4:	2300      	movs	r3, #0
   d48f6:	461a      	mov	r2, r3
   d48f8:	4619      	mov	r1, r3
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	f7ff bf4e 	b.w	d479c <network_off>

000d4900 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4900:	2300      	movs	r3, #0
   d4902:	461a      	mov	r2, r3
   d4904:	4619      	mov	r1, r3
   d4906:	6840      	ldr	r0, [r0, #4]
   d4908:	f7ff bf40 	b.w	d478c <network_on>

000d490c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d490c:	2200      	movs	r2, #0
   d490e:	4611      	mov	r1, r2
   d4910:	6840      	ldr	r0, [r0, #4]
   d4912:	f7ff bf33 	b.w	d477c <network_ready>

000d4916 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4916:	2200      	movs	r2, #0
   d4918:	4611      	mov	r1, r2
   d491a:	6840      	ldr	r0, [r0, #4]
   d491c:	f7ff bf1e 	b.w	d475c <network_connecting>

000d4920 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4920:	2200      	movs	r2, #0
   d4922:	2102      	movs	r1, #2
   d4924:	6840      	ldr	r0, [r0, #4]
   d4926:	f7ff bf21 	b.w	d476c <network_disconnect>

000d492a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d492a:	2300      	movs	r3, #0
   d492c:	461a      	mov	r2, r3
   d492e:	6840      	ldr	r0, [r0, #4]
   d4930:	f7ff bf0c 	b.w	d474c <network_connect>

000d4934 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4934:	4b02      	ldr	r3, [pc, #8]	; (d4940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4936:	2203      	movs	r2, #3
   d4938:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d493a:	4a02      	ldr	r2, [pc, #8]	; (d4944 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d493c:	601a      	str	r2, [r3, #0]
   d493e:	4770      	bx	lr
   d4940:	2003e448 	.word	0x2003e448
   d4944:	000d6aa0 	.word	0x000d6aa0

000d4948 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4948:	4770      	bx	lr

000d494a <_ZN8SPIClassD0Ev>:
   d494a:	b510      	push	{r4, lr}
   d494c:	2110      	movs	r1, #16
   d494e:	4604      	mov	r4, r0
   d4950:	f001 f9f9 	bl	d5d46 <_ZdlPvj>
   d4954:	4620      	mov	r0, r4
   d4956:	bd10      	pop	{r4, pc}

000d4958 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4958:	b570      	push	{r4, r5, r6, lr}
   d495a:	4b08      	ldr	r3, [pc, #32]	; (d497c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d495c:	6003      	str	r3, [r0, #0]
   d495e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d4960:	2500      	movs	r5, #0
   d4962:	460e      	mov	r6, r1
   d4964:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d4968:	f7ff fddc 	bl	d4524 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d496c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d496e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d4970:	f7ff fd90 	bl	d4494 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d4974:	60a5      	str	r5, [r4, #8]
}
   d4976:	4620      	mov	r0, r4
   d4978:	bd70      	pop	{r4, r5, r6, pc}
   d497a:	bf00      	nop
   d497c:	000d6ad4 	.word	0x000d6ad4

000d4980 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d4980:	7900      	ldrb	r0, [r0, #4]
   d4982:	f7ff bd8f 	b.w	d44a4 <HAL_SPI_Is_Enabled>
	...

000d4988 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
   d4988:	b510      	push	{r4, lr}
   d498a:	4604      	mov	r4, r0
   d498c:	4608      	mov	r0, r1
   d498e:	4611      	mov	r1, r2
   d4990:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
   d4992:	2300      	movs	r3, #0
   d4994:	f7ff fea6 	bl	d46e4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
   d4998:	4b06      	ldr	r3, [pc, #24]	; (d49b4 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
   d499a:	2200      	movs	r2, #0
   d499c:	701a      	strb	r2, [r3, #0]
   d499e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d49a2:	8058      	strh	r0, [r3, #2]
   d49a4:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
   d49a6:	681a      	ldr	r2, [r3, #0]
   d49a8:	889b      	ldrh	r3, [r3, #4]
   d49aa:	6022      	str	r2, [r4, #0]
   d49ac:	80a3      	strh	r3, [r4, #4]
}
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
   d49b2:	bf00      	nop
   d49b4:	2003e450 	.word	0x2003e450

000d49b8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d49b8:	4b04      	ldr	r3, [pc, #16]	; (d49cc <_GLOBAL__sub_I_System+0x14>)
   d49ba:	2000      	movs	r0, #0
   d49bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d49c0:	7018      	strb	r0, [r3, #0]
   d49c2:	8058      	strh	r0, [r3, #2]
   d49c4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49c6:	f7ff be7d 	b.w	d46c4 <set_system_mode>
   d49ca:	bf00      	nop
   d49cc:	2003e450 	.word	0x2003e450

000d49d0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d49d0:	b510      	push	{r4, lr}
   d49d2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d49d4:	f001 fc83 	bl	d62de <strlen>
   d49d8:	3801      	subs	r0, #1
   d49da:	1823      	adds	r3, r4, r0
   d49dc:	4620      	mov	r0, r4
	while(i<j){
   d49de:	4298      	cmp	r0, r3
   d49e0:	d206      	bcs.n	d49f0 <_Z11str_reversePc+0x20>
		c = *i;
   d49e2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d49e4:	7819      	ldrb	r1, [r3, #0]
   d49e6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d49ea:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d49ee:	e7f6      	b.n	d49de <_Z11str_reversePc+0xe>
   d49f0:	bd10      	pop	{r4, pc}

000d49f2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d49f2:	b570      	push	{r4, r5, r6, lr}
   d49f4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d49f6:	1e91      	subs	r1, r2, #2
   d49f8:	2922      	cmp	r1, #34	; 0x22
   d49fa:	d820      	bhi.n	d4a3e <ultoa+0x4c>
   d49fc:	4625      	mov	r5, r4
   d49fe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4a00:	b910      	cbnz	r0, d4a08 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4a02:	4423      	add	r3, r4
            *ptr++ = '0';
   d4a04:	2230      	movs	r2, #48	; 0x30
   d4a06:	e00e      	b.n	d4a26 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4a08:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4a0c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4a10:	b2c1      	uxtb	r1, r0
   d4a12:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d4a16:	2809      	cmp	r0, #9
                *ptr += '0';
   d4a18:	bf94      	ite	ls
   d4a1a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4a1c:	3157      	addhi	r1, #87	; 0x57
   d4a1e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4a22:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4a24:	e7eb      	b.n	d49fe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4a26:	4299      	cmp	r1, r3
   d4a28:	d202      	bcs.n	d4a30 <ultoa+0x3e>
            *ptr++ = '0';
   d4a2a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4a2e:	e7fa      	b.n	d4a26 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4a30:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4a32:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4a34:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d4a36:	f7ff ffcb 	bl	d49d0 <_Z11str_reversePc>
	return buffer;
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4a3e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4a40:	bd70      	pop	{r4, r5, r6, pc}

000d4a42 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4a42:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4a44:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4a46:	460c      	mov	r4, r1
   d4a48:	4615      	mov	r5, r2
	if(a<0){
   d4a4a:	da0b      	bge.n	d4a64 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4a50:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4a54:	bf14      	ite	ne
   d4a56:	4258      	negne	r0, r3
   d4a58:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4a5a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d4a5c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d4a5e:	462a      	mov	r2, r5
   d4a60:	4419      	add	r1, r3
   d4a62:	e000      	b.n	d4a66 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d4a64:	2301      	movs	r3, #1
   d4a66:	f7ff ffc4 	bl	d49f2 <ultoa>
	}
	return buffer;
}
   d4a6a:	4620      	mov	r0, r4
   d4a6c:	bd38      	pop	{r3, r4, r5, pc}

000d4a6e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4a6e:	b510      	push	{r4, lr}
   d4a70:	4604      	mov	r4, r0
{
	free(buffer);
   d4a72:	6800      	ldr	r0, [r0, #0]
   d4a74:	f7ff ff02 	bl	d487c <free>
}
   d4a78:	4620      	mov	r0, r4
   d4a7a:	bd10      	pop	{r4, pc}

000d4a7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4a7c:	b510      	push	{r4, lr}
   d4a7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a80:	6800      	ldr	r0, [r0, #0]
   d4a82:	b108      	cbz	r0, d4a88 <_ZN6String10invalidateEv+0xc>
   d4a84:	f7ff fefa 	bl	d487c <free>
	buffer = NULL;
   d4a88:	2300      	movs	r3, #0
   d4a8a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4a8c:	60a3      	str	r3, [r4, #8]
   d4a8e:	6063      	str	r3, [r4, #4]
   d4a90:	bd10      	pop	{r4, pc}

000d4a92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a92:	b538      	push	{r3, r4, r5, lr}
   d4a94:	4604      	mov	r4, r0
   d4a96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a98:	6800      	ldr	r0, [r0, #0]
   d4a9a:	3101      	adds	r1, #1
   d4a9c:	f7ff fef6 	bl	d488c <realloc>
	if (newbuffer) {
   d4aa0:	b110      	cbz	r0, d4aa8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4aa2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4aa6:	2001      	movs	r0, #1
	}
	return 0;
}
   d4aa8:	bd38      	pop	{r3, r4, r5, pc}

000d4aaa <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4aaa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4aac:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4aae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4ab0:	b113      	cbz	r3, d4ab8 <_ZN6String7reserveEj+0xe>
   d4ab2:	6843      	ldr	r3, [r0, #4]
   d4ab4:	428b      	cmp	r3, r1
   d4ab6:	d207      	bcs.n	d4ac8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4ab8:	4620      	mov	r0, r4
   d4aba:	f7ff ffea 	bl	d4a92 <_ZN6String12changeBufferEj>
   d4abe:	b120      	cbz	r0, d4aca <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4ac0:	68a3      	ldr	r3, [r4, #8]
   d4ac2:	b90b      	cbnz	r3, d4ac8 <_ZN6String7reserveEj+0x1e>
   d4ac4:	6822      	ldr	r2, [r4, #0]
   d4ac6:	7013      	strb	r3, [r2, #0]
   d4ac8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4aca:	bd10      	pop	{r4, pc}

000d4acc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4acc:	b570      	push	{r4, r5, r6, lr}
   d4ace:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4ad0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4ad2:	4604      	mov	r4, r0
   d4ad4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4ad6:	f7ff ffe8 	bl	d4aaa <_ZN6String7reserveEj>
   d4ada:	b918      	cbnz	r0, d4ae4 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4adc:	4620      	mov	r0, r4
   d4ade:	f7ff ffcd 	bl	d4a7c <_ZN6String10invalidateEv>
		return *this;
   d4ae2:	e009      	b.n	d4af8 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4ae4:	462a      	mov	r2, r5
   d4ae6:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4ae8:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4aea:	6820      	ldr	r0, [r4, #0]
   d4aec:	f001 fb7e 	bl	d61ec <memcpy>
	buffer[len] = 0;
   d4af0:	6822      	ldr	r2, [r4, #0]
   d4af2:	68a3      	ldr	r3, [r4, #8]
   d4af4:	2100      	movs	r1, #0
   d4af6:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4af8:	4620      	mov	r0, r4
   d4afa:	bd70      	pop	{r4, r5, r6, pc}

000d4afc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4afc:	b538      	push	{r3, r4, r5, lr}
   d4afe:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4b00:	460c      	mov	r4, r1
   d4b02:	b141      	cbz	r1, d4b16 <_ZN6StringaSEPKc+0x1a>
   d4b04:	4608      	mov	r0, r1
   d4b06:	f001 fbea 	bl	d62de <strlen>
   d4b0a:	4621      	mov	r1, r4
   d4b0c:	4602      	mov	r2, r0
   d4b0e:	4628      	mov	r0, r5
   d4b10:	f7ff ffdc 	bl	d4acc <_ZN6String4copyEPKcj>
   d4b14:	e001      	b.n	d4b1a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4b16:	f7ff ffb1 	bl	d4a7c <_ZN6String10invalidateEv>

	return *this;
}
   d4b1a:	4628      	mov	r0, r5
   d4b1c:	bd38      	pop	{r3, r4, r5, pc}

000d4b1e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4b1e:	b510      	push	{r4, lr}
   d4b20:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b22:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4b24:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b26:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d4b28:	6063      	str	r3, [r4, #4]
	len = 0;
   d4b2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4b2c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   d4b2e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   d4b30:	a901      	add	r1, sp, #4
   d4b32:	f7ff ff86 	bl	d4a42 <itoa>
	*this = buf;
   d4b36:	a901      	add	r1, sp, #4
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f7ff ffdf 	bl	d4afc <_ZN6StringaSEPKc>
}
   d4b3e:	4620      	mov	r0, r4
   d4b40:	b00a      	add	sp, #40	; 0x28
   d4b42:	bd10      	pop	{r4, pc}

000d4b44 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d4b44:	b510      	push	{r4, lr}
   d4b46:	4604      	mov	r4, r0
   d4b48:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4b4a:	2300      	movs	r3, #0
   d4b4c:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d4b4e:	6063      	str	r3, [r4, #4]
	len = 0;
   d4b50:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4b52:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   d4b54:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
   d4b56:	2301      	movs	r3, #1
   d4b58:	a901      	add	r1, sp, #4
   d4b5a:	f7ff ff4a 	bl	d49f2 <ultoa>
	*this = buf;
   d4b5e:	a901      	add	r1, sp, #4
   d4b60:	4620      	mov	r0, r4
   d4b62:	f7ff ffcb 	bl	d4afc <_ZN6StringaSEPKc>
}
   d4b66:	4620      	mov	r0, r4
   d4b68:	b00a      	add	sp, #40	; 0x28
   d4b6a:	bd10      	pop	{r4, pc}

000d4b6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b6c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4b6e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b70:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4b72:	689b      	ldr	r3, [r3, #8]
   d4b74:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b76:	68a3      	ldr	r3, [r4, #8]
   d4b78:	3b01      	subs	r3, #1
   d4b7a:	60a3      	str	r3, [r4, #8]
   d4b7c:	b92b      	cbnz	r3, d4b8a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109+0x1e>
            _M_destroy();
   d4b7e:	6823      	ldr	r3, [r4, #0]
   d4b80:	4620      	mov	r0, r4
   d4b82:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4b88:	4718      	bx	r3
   d4b8a:	bd10      	pop	{r4, pc}

000d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4b8c:	680b      	ldr	r3, [r1, #0]
   d4b8e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4b90:	b113      	cbz	r3, d4b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4b92:	685a      	ldr	r2, [r3, #4]
   d4b94:	3201      	adds	r2, #1
   d4b96:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4b98:	4770      	bx	lr

000d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b9a:	b510      	push	{r4, lr}
   d4b9c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4b9e:	6800      	ldr	r0, [r0, #0]
   d4ba0:	b128      	cbz	r0, d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4ba2:	6843      	ldr	r3, [r0, #4]
   d4ba4:	3b01      	subs	r3, #1
   d4ba6:	6043      	str	r3, [r0, #4]
   d4ba8:	b90b      	cbnz	r3, d4bae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4baa:	f7ff ffdf 	bl	d4b6c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.109>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4bae:	4620      	mov	r0, r4
   d4bb0:	bd10      	pop	{r4, pc}
	...

000d4bb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4bb4:	4802      	ldr	r0, [pc, #8]	; (d4bc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4bb6:	2300      	movs	r3, #0
   d4bb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4bba:	f7ff bcbb 	b.w	d4534 <os_mutex_recursive_create>
   d4bbe:	bf00      	nop
   d4bc0:	2003e458 	.word	0x2003e458

000d4bc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4bc6:	4606      	mov	r6, r0
   d4bc8:	460d      	mov	r5, r1
   d4bca:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4bcc:	2400      	movs	r4, #0
  while (size--) {
   d4bce:	42bd      	cmp	r5, r7
   d4bd0:	d00c      	beq.n	d4bec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4bd2:	6833      	ldr	r3, [r6, #0]
   d4bd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4bd8:	689b      	ldr	r3, [r3, #8]
   d4bda:	4630      	mov	r0, r6
   d4bdc:	4798      	blx	r3
     if (chunk>=0)
   d4bde:	2800      	cmp	r0, #0
   d4be0:	db01      	blt.n	d4be6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4be2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4be4:	e7f3      	b.n	d4bce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4be6:	2c00      	cmp	r4, #0
   d4be8:	bf08      	it	eq
   d4bea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4bec:	4620      	mov	r0, r4
   d4bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bf0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4bf0:	b570      	push	{r4, r5, r6, lr}
   d4bf2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4bf4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4bf6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4bf8:	b149      	cbz	r1, d4c0e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4bfa:	f001 fb70 	bl	d62de <strlen>
   d4bfe:	682b      	ldr	r3, [r5, #0]
   d4c00:	4602      	mov	r2, r0
   d4c02:	4621      	mov	r1, r4
   d4c04:	4628      	mov	r0, r5
   d4c06:	68db      	ldr	r3, [r3, #12]
    }
   d4c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c0c:	4718      	bx	r3
    }
   d4c0e:	bd70      	pop	{r4, r5, r6, pc}

000d4c10 <_ZN5Print5printEPKc>:
   d4c10:	b508      	push	{r3, lr}
   d4c12:	f7ff ffed 	bl	d4bf0 <_ZN5Print5writeEPKc>
   d4c16:	bd08      	pop	{r3, pc}

000d4c18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4c18:	6803      	ldr	r3, [r0, #0]
   d4c1a:	689b      	ldr	r3, [r3, #8]
   d4c1c:	4718      	bx	r3

000d4c1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4c20:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4c22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4c24:	f7ff fff8 	bl	d4c18 <_ZN5Print5printEc>
  n += print('\n');
   d4c28:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4c2a:	4604      	mov	r4, r0
  n += print('\n');
   d4c2c:	4628      	mov	r0, r5
   d4c2e:	f7ff fff3 	bl	d4c18 <_ZN5Print5printEc>
  return n;
}
   d4c32:	4420      	add	r0, r4
   d4c34:	bd38      	pop	{r3, r4, r5, pc}

000d4c36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4c36:	b538      	push	{r3, r4, r5, lr}
   d4c38:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4c3a:	f7ff ffd9 	bl	d4bf0 <_ZN5Print5writeEPKc>
   d4c3e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4c40:	4628      	mov	r0, r5
   d4c42:	f7ff ffec 	bl	d4c1e <_ZN5Print7printlnEv>
  return n;
}
   d4c46:	4420      	add	r0, r4
   d4c48:	bd38      	pop	{r3, r4, r5, pc}

000d4c4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4c4a:	b530      	push	{r4, r5, lr}
   d4c4c:	b08b      	sub	sp, #44	; 0x2c
   d4c4e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4c50:	2100      	movs	r1, #0
   d4c52:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4c56:	2a01      	cmp	r2, #1
   d4c58:	bf98      	it	ls
   d4c5a:	220a      	movls	r2, #10
   d4c5c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4c60:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4c64:	fb05 3312 	mls	r3, r5, r2, r3
   d4c68:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4c6c:	2b09      	cmp	r3, #9
   d4c6e:	bf94      	ite	ls
   d4c70:	3330      	addls	r3, #48	; 0x30
   d4c72:	3337      	addhi	r3, #55	; 0x37
   d4c74:	b2db      	uxtb	r3, r3
   d4c76:	4621      	mov	r1, r4
   d4c78:	f804 3901 	strb.w	r3, [r4], #-1
   d4c7c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4c7e:	2d00      	cmp	r5, #0
   d4c80:	d1ee      	bne.n	d4c60 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4c82:	f7ff ffb5 	bl	d4bf0 <_ZN5Print5writeEPKc>
}
   d4c86:	b00b      	add	sp, #44	; 0x2c
   d4c88:	bd30      	pop	{r4, r5, pc}

000d4c8a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4c8a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4c8c:	b92a      	cbnz	r2, d4c9a <_ZN5Print5printEmi+0x10>
   d4c8e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4c90:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4c94:	689b      	ldr	r3, [r3, #8]
   d4c96:	b2c9      	uxtb	r1, r1
   d4c98:	4718      	bx	r3
  else return printNumber(n, base);
   d4c9a:	b2d2      	uxtb	r2, r2
}
   d4c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4ca0:	f7ff bfd3 	b.w	d4c4a <_ZN5Print11printNumberEmh>

000d4ca4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4ca4:	f7ff bff1 	b.w	d4c8a <_ZN5Print5printEmi>

000d4ca8 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d4ca8:	b538      	push	{r3, r4, r5, lr}
   d4caa:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d4cac:	f7ff ffed 	bl	d4c8a <_ZN5Print5printEmi>
   d4cb0:	4604      	mov	r4, r0
  n += println();
   d4cb2:	4628      	mov	r0, r5
   d4cb4:	f7ff ffb3 	bl	d4c1e <_ZN5Print7printlnEv>
  return n;
}
   d4cb8:	4420      	add	r0, r4
   d4cba:	bd38      	pop	{r3, r4, r5, pc}

000d4cbc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4cc0:	4607      	mov	r7, r0
   d4cc2:	460e      	mov	r6, r1
  if (base == 0) {
   d4cc4:	4615      	mov	r5, r2
   d4cc6:	b92a      	cbnz	r2, d4cd4 <_ZN5Print5printEli+0x18>
    return write(n);
   d4cc8:	6803      	ldr	r3, [r0, #0]
   d4cca:	b2c9      	uxtb	r1, r1
   d4ccc:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4cd2:	4718      	bx	r3
  } else if (base == 10) {
   d4cd4:	2a0a      	cmp	r2, #10
   d4cd6:	d102      	bne.n	d4cde <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4cd8:	2900      	cmp	r1, #0
   d4cda:	da01      	bge.n	d4ce0 <_ZN5Print5printEli+0x24>
   d4cdc:	e004      	b.n	d4ce8 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4cde:	b2d2      	uxtb	r2, r2
  }
}
   d4ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4ce4:	f7ff bfb1 	b.w	d4c4a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4ce8:	212d      	movs	r1, #45	; 0x2d
   d4cea:	f7ff ff95 	bl	d4c18 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4cee:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4cf0:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4cf2:	4271      	negs	r1, r6
   d4cf4:	4638      	mov	r0, r7
   d4cf6:	f7ff ffa8 	bl	d4c4a <_ZN5Print11printNumberEmh>
   d4cfa:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4d00 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d4d00:	b538      	push	{r3, r4, r5, lr}
   d4d02:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4d04:	f7ff ffda 	bl	d4cbc <_ZN5Print5printEli>
   d4d08:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d4d0a:	4628      	mov	r0, r5
   d4d0c:	f7ff ff87 	bl	d4c1e <_ZN5Print7printlnEv>
  return n;
}
   d4d10:	4420      	add	r0, r4
   d4d12:	bd38      	pop	{r3, r4, r5, pc}

000d4d14 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d14:	4b01      	ldr	r3, [pc, #4]	; (d4d1c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d16:	4a02      	ldr	r2, [pc, #8]	; (d4d20 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d18:	601a      	str	r2, [r3, #0]
   d4d1a:	4770      	bx	lr
   d4d1c:	2003e45c 	.word	0x2003e45c
   d4d20:	000d6b4f 	.word	0x000d6b4f

000d4d24 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d4d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d4d26:	4b14      	ldr	r3, [pc, #80]	; (d4d78 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d4d28:	4f14      	ldr	r7, [pc, #80]	; (d4d7c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d4d2a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d4d2c:	4b14      	ldr	r3, [pc, #80]	; (d4d80 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d4d2e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d4d30:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d4d32:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d4d34:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d4d36:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d4d38:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d4d3a:	d01b      	beq.n	d4d74 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d4d3c:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d4d3e:	ad01      	add	r5, sp, #4
   d4d40:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d4d44:	f001 f95a 	bl	d5ffc <localtime>
	calendar_time->tm_year += 1900;
   d4d48:	6943      	ldr	r3, [r0, #20]
   d4d4a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d4d4e:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d4d50:	4604      	mov	r4, r0
   d4d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4d5a:	f8d4 e000 	ldr.w	lr, [r4]
   d4d5e:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d4d62:	ad01      	add	r5, sp, #4
   d4d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d66:	4c07      	ldr	r4, [pc, #28]	; (d4d84 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d4d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d4d6e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d4d70:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d4d74:	b00b      	add	sp, #44	; 0x2c
   d4d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d78:	2003e490 	.word	0x2003e490
   d4d7c:	2003e48c 	.word	0x2003e48c
   d4d80:	2003e488 	.word	0x2003e488
   d4d84:	2003e460 	.word	0x2003e460

000d4d88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d4d88:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4d8a:	2000      	movs	r0, #0
   d4d8c:	f7ff fd5e 	bl	d484c <spark_sync_time_pending>
   d4d90:	b128      	cbz	r0, d4d9e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d92:	f7ff fd43 	bl	d481c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d4d96:	f080 0001 	eor.w	r0, r0, #1
   d4d9a:	b2c0      	uxtb	r0, r0
   d4d9c:	bd08      	pop	{r3, pc}
   d4d9e:	2001      	movs	r0, #1
    }
   d4da0:	bd08      	pop	{r3, pc}

000d4da2 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d4da2:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d4da4:	2000      	movs	r0, #0
   d4da6:	f7ff fb9d 	bl	d44e4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d4daa:	4604      	mov	r4, r0
   d4dac:	b968      	cbnz	r0, d4dca <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d4dae:	f7ff fc81 	bl	d46b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d4db2:	2801      	cmp	r0, #1
   d4db4:	d10b      	bne.n	d4dce <_ZN9TimeClass7isValidEv+0x2c>
   d4db6:	4620      	mov	r0, r4
   d4db8:	f7ff fcac 	bl	d4714 <system_thread_get_state>
   d4dbc:	b938      	cbnz	r0, d4dce <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d4dbe:	f7ff ffe3 	bl	d4d88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4dc2:	b930      	cbnz	r0, d4dd2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d4dc4:	f7ff fd12 	bl	d47ec <spark_process>
   d4dc8:	e7f9      	b.n	d4dbe <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d4dca:	2001      	movs	r0, #1
   d4dcc:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d4dce:	2000      	movs	r0, #0
   d4dd0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d4dd2:	f7ff ffd9 	bl	d4d88 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d4dd6:	2000      	movs	r0, #0
   d4dd8:	f7ff fb84 	bl	d44e4 <HAL_RTC_Time_Is_Valid>
   d4ddc:	3000      	adds	r0, #0
   d4dde:	bf18      	it	ne
   d4de0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d4de2:	bd10      	pop	{r4, pc}

000d4de4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d4de4:	b508      	push	{r3, lr}
    (void)isValid();
   d4de6:	f7ff ffdc 	bl	d4da2 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d4dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d4dee:	f7ff bb71 	b.w	d44d4 <HAL_RTC_Get_UnixTime>
	...

000d4df4 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   d4df4:	b508      	push	{r3, lr}
	return minute(now());
   d4df6:	f7ff fff5 	bl	d4de4 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d4dfa:	f7ff ff93 	bl	d4d24 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   d4dfe:	4b01      	ldr	r3, [pc, #4]	; (d4e04 <_ZN9TimeClass6minuteEv+0x10>)
   d4e00:	6858      	ldr	r0, [r3, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	2003e460 	.word	0x2003e460

000d4e08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e08:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e0a:	681a      	ldr	r2, [r3, #0]
   d4e0c:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e0e:	601a      	str	r2, [r3, #0]
   d4e10:	4770      	bx	lr
   d4e12:	bf00      	nop
   d4e14:	2003e264 	.word	0x2003e264
   d4e18:	2003e484 	.word	0x2003e484

000d4e1c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e1c:	2100      	movs	r1, #0
   d4e1e:	f7ff bc59 	b.w	d46d4 <system_delay_ms>

000d4e22 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e22:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e24:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e26:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4e28:	b113      	cbz	r3, d4e30 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e2a:	2203      	movs	r2, #3
   d4e2c:	4601      	mov	r1, r0
   d4e2e:	4798      	blx	r3
    }
   d4e30:	4620      	mov	r0, r4
   d4e32:	bd10      	pop	{r4, pc}

000d4e34 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4e34:	b510      	push	{r4, lr}
   d4e36:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4e38:	f7ff fff3 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	bd10      	pop	{r4, pc}

000d4e40 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4e40:	b513      	push	{r0, r1, r4, lr}
   d4e42:	460b      	mov	r3, r1
   d4e44:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e46:	c803      	ldmia	r0, {r0, r1}
   d4e48:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4e4c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4e50:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4e54:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4e58:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4e5c:	b002      	add	sp, #8
   d4e5e:	bd10      	pop	{r4, pc}

000d4e60 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4e60:	4803      	ldr	r0, [pc, #12]	; (d4e70 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4e62:	4a04      	ldr	r2, [pc, #16]	; (d4e74 <_GLOBAL__sub_I_RGB+0x14>)
   d4e64:	4904      	ldr	r1, [pc, #16]	; (d4e78 <_GLOBAL__sub_I_RGB+0x18>)
   d4e66:	2300      	movs	r3, #0
   d4e68:	6083      	str	r3, [r0, #8]
   d4e6a:	f000 bf67 	b.w	d5d3c <__aeabi_atexit>
   d4e6e:	bf00      	nop
   d4e70:	2003e494 	.word	0x2003e494
   d4e74:	2003e31c 	.word	0x2003e31c
   d4e78:	000d4e35 	.word	0x000d4e35

000d4e7c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4e7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4e7e:	4b0c      	ldr	r3, [pc, #48]	; (d4eb0 <serialEventRun+0x34>)
   d4e80:	b133      	cbz	r3, d4e90 <serialEventRun+0x14>
   d4e82:	f000 fbfd 	bl	d5680 <_Z16_fetch_usbserialv>
   d4e86:	6803      	ldr	r3, [r0, #0]
   d4e88:	691b      	ldr	r3, [r3, #16]
   d4e8a:	4798      	blx	r3
   d4e8c:	2800      	cmp	r0, #0
   d4e8e:	dc09      	bgt.n	d4ea4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4e90:	4b08      	ldr	r3, [pc, #32]	; (d4eb4 <serialEventRun+0x38>)
   d4e92:	b163      	cbz	r3, d4eae <serialEventRun+0x32>
   d4e94:	f000 fcc2 	bl	d581c <_Z22__fetch_global_Serial1v>
   d4e98:	6803      	ldr	r3, [r0, #0]
   d4e9a:	691b      	ldr	r3, [r3, #16]
   d4e9c:	4798      	blx	r3
   d4e9e:	2800      	cmp	r0, #0
   d4ea0:	dc03      	bgt.n	d4eaa <serialEventRun+0x2e>
   d4ea2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4ea4:	f3af 8000 	nop.w
   d4ea8:	e7f2      	b.n	d4e90 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4eaa:	f3af 8000 	nop.w
   d4eae:	bd08      	pop	{r3, pc}
	...

000d4eb8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4eb8:	b508      	push	{r3, lr}
	serialEventRun();
   d4eba:	f7ff ffdf 	bl	d4e7c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4ebe:	f7ff fb01 	bl	d44c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4ec2:	4b01      	ldr	r3, [pc, #4]	; (d4ec8 <_post_loop+0x10>)
   d4ec4:	6018      	str	r0, [r3, #0]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	2003e70c 	.word	0x2003e70c

000d4ecc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4ecc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4ece:	2300      	movs	r3, #0
   d4ed0:	9300      	str	r3, [sp, #0]
   d4ed2:	461a      	mov	r2, r3
   d4ed4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ed8:	f7ff fc2e 	bl	d4738 <system_ctrl_set_result>
}
   d4edc:	b003      	add	sp, #12
   d4ede:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ee4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4ee4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4ee6:	8843      	ldrh	r3, [r0, #2]
   d4ee8:	2b0a      	cmp	r3, #10
   d4eea:	d008      	beq.n	d4efe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4eec:	2b50      	cmp	r3, #80	; 0x50
   d4eee:	d109      	bne.n	d4f04 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4ef0:	4b09      	ldr	r3, [pc, #36]	; (d4f18 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4ef2:	681b      	ldr	r3, [r3, #0]
   d4ef4:	b13b      	cbz	r3, d4f06 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4ef6:	b003      	add	sp, #12
   d4ef8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4efc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4efe:	f7ff ffe5 	bl	d4ecc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4f02:	e006      	b.n	d4f12 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f04:	2300      	movs	r3, #0
   d4f06:	9300      	str	r3, [sp, #0]
   d4f08:	461a      	mov	r2, r3
   d4f0a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f0e:	f7ff fc13 	bl	d4738 <system_ctrl_set_result>
        break;
    }
}
   d4f12:	b003      	add	sp, #12
   d4f14:	f85d fb04 	ldr.w	pc, [sp], #4
   d4f18:	2003e4a4 	.word	0x2003e4a4

000d4f1c <module_user_init_hook>:

void module_user_init_hook()
{
   d4f1c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4f1e:	f7ff fac9 	bl	d44b4 <HAL_RNG_GetRandomNumber>
   d4f22:	4604      	mov	r4, r0
    srand(seed);
   d4f24:	f001 f976 	bl	d6214 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4f28:	4b07      	ldr	r3, [pc, #28]	; (d4f48 <module_user_init_hook+0x2c>)
   d4f2a:	b113      	cbz	r3, d4f32 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4f32:	2100      	movs	r1, #0
   d4f34:	4804      	ldr	r0, [pc, #16]	; (d4f48 <module_user_init_hook+0x2c>)
   d4f36:	f7ff fc91 	bl	d485c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f3a:	2100      	movs	r1, #0
   d4f3c:	4803      	ldr	r0, [pc, #12]	; (d4f4c <module_user_init_hook+0x30>)
}
   d4f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4f42:	f7ff bbef 	b.w	d4724 <system_ctrl_set_app_request_handler>
   d4f46:	bf00      	nop
   d4f48:	00000000 	.word	0x00000000
   d4f4c:	000d4ee5 	.word	0x000d4ee5

000d4f50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f50:	4770      	bx	lr

000d4f52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4f52:	2000      	movs	r0, #0
   d4f54:	4770      	bx	lr

000d4f56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4f56:	b510      	push	{r4, lr}
   d4f58:	2110      	movs	r1, #16
   d4f5a:	4604      	mov	r4, r0
   d4f5c:	f000 fef3 	bl	d5d46 <_ZdlPvj>
   d4f60:	4620      	mov	r0, r4
   d4f62:	bd10      	pop	{r4, pc}

000d4f64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4f64:	b508      	push	{r3, lr}
      { delete this; }
   d4f66:	b108      	cbz	r0, d4f6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4f68:	f7ff fff5 	bl	d4f56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4f6c:	bd08      	pop	{r3, pc}

000d4f6e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f6e:	2200      	movs	r2, #0
   d4f70:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4f72:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4f74:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4f78:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f7a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4f7e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f80:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f82:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f84:	680c      	ldr	r4, [r1, #0]
   d4f86:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f88:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4f8a:	bd10      	pop	{r4, pc}

000d4f8c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4f8c:	b510      	push	{r4, lr}
   d4f8e:	4604      	mov	r4, r0
    free((void*)msg_);
   d4f90:	6800      	ldr	r0, [r0, #0]
   d4f92:	f7ff fc73 	bl	d487c <free>
}
   d4f96:	4620      	mov	r0, r4
   d4f98:	bd10      	pop	{r4, pc}

000d4f9a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4f9a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4f9c:	68c4      	ldr	r4, [r0, #12]
   d4f9e:	b1f4      	cbz	r4, d4fde <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4fa0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4fa2:	2b02      	cmp	r3, #2
   d4fa4:	d103      	bne.n	d4fae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4fa6:	f104 000c 	add.w	r0, r4, #12
   d4faa:	f7ff ffef 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4fae:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4fb0:	b135      	cbz	r5, d4fc0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fb2:	4628      	mov	r0, r5
   d4fb4:	f7ff ff35 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
   d4fb8:	2110      	movs	r1, #16
   d4fba:	4628      	mov	r0, r5
   d4fbc:	f000 fec3 	bl	d5d46 <_ZdlPvj>
   d4fc0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4fc2:	b135      	cbz	r5, d4fd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4fc4:	4628      	mov	r0, r5
   d4fc6:	f7ff ff2c 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
   d4fca:	2110      	movs	r1, #16
   d4fcc:	4628      	mov	r0, r5
   d4fce:	f000 feba 	bl	d5d46 <_ZdlPvj>
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	2114      	movs	r1, #20
   d4fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4fda:	f000 beb4 	b.w	d5d46 <_ZdlPvj>
   d4fde:	bd38      	pop	{r3, r4, r5, pc}

000d4fe0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4fe0:	b513      	push	{r0, r1, r4, lr}
   d4fe2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4fe4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4fe8:	2300      	movs	r3, #0
   d4fea:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4fec:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4fee:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4ff0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ff2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4ff4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4ff6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4ff8:	f7ff fdcf 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ffc:	4620      	mov	r0, r4
   d4ffe:	b002      	add	sp, #8
   d5000:	bd10      	pop	{r4, pc}

000d5002 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5004:	460c      	mov	r4, r1
   d5006:	ad02      	add	r5, sp, #8
   d5008:	f854 3b04 	ldr.w	r3, [r4], #4
   d500c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5010:	4606      	mov	r6, r0
   d5012:	460f      	mov	r7, r1
   d5014:	a801      	add	r0, sp, #4
   d5016:	4621      	mov	r1, r4
   d5018:	f7ff fdb8 	bl	d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d501c:	4629      	mov	r1, r5
   d501e:	4630      	mov	r0, r6
   d5020:	f7ff ffde 	bl	d4fe0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5024:	a801      	add	r0, sp, #4
   d5026:	f7ff fdb8 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d502a:	4620      	mov	r0, r4
   d502c:	f7ff fdb5 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5030:	4638      	mov	r0, r7
   d5032:	2108      	movs	r1, #8
   d5034:	f000 fe87 	bl	d5d46 <_ZdlPvj>
        return p;
    }
   d5038:	4630      	mov	r0, r6
   d503a:	b003      	add	sp, #12
   d503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5040:	b538      	push	{r3, r4, r5, lr}
   d5042:	2300      	movs	r3, #0
   d5044:	4604      	mov	r4, r0
   d5046:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5048:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d504a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d504c:	f7ff f823 	bl	d4096 <_Znwj>
   d5050:	b128      	cbz	r0, d505e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5052:	2301      	movs	r3, #1
   d5054:	6043      	str	r3, [r0, #4]
   d5056:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5058:	4b02      	ldr	r3, [pc, #8]	; (d5064 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d505a:	6003      	str	r3, [r0, #0]
   d505c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d505e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d5060:	4620      	mov	r0, r4
   d5062:	bd38      	pop	{r3, r4, r5, pc}
   d5064:	000d6bec 	.word	0x000d6bec

000d5068 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5068:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d506a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d506c:	b90a      	cbnz	r2, d5072 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d506e:	f000 fe6c 	bl	d5d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5072:	68c3      	ldr	r3, [r0, #12]
    }
   d5074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5078:	4718      	bx	r3

000d507a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d507a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d507c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d507e:	f100 0110 	add.w	r1, r0, #16
   d5082:	f7ff fff1 	bl	d5068 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5086:	bd08      	pop	{r3, pc}

000d5088 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5088:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d508a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d508c:	b90a      	cbnz	r2, d5092 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d508e:	f000 fe5c 	bl	d5d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5092:	68c3      	ldr	r3, [r0, #12]
    }
   d5094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5098:	4718      	bx	r3

000d509a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d509a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d509c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d509e:	f100 0110 	add.w	r1, r0, #16
   d50a2:	f7ff fff1 	bl	d5088 <_ZNKSt8functionIFvRKbEEclES1_>
   d50a6:	bd08      	pop	{r3, pc}

000d50a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50a8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d50aa:	2300      	movs	r3, #0
   d50ac:	6083      	str	r3, [r0, #8]
   d50ae:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d50b0:	4604      	mov	r4, r0
   d50b2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d50b4:	b12b      	cbz	r3, d50c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d50b6:	2202      	movs	r2, #2
   d50b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d50ba:	68eb      	ldr	r3, [r5, #12]
   d50bc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d50be:	68ab      	ldr	r3, [r5, #8]
   d50c0:	60a3      	str	r3, [r4, #8]
	}
    }
   d50c2:	4620      	mov	r0, r4
   d50c4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d50c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50ca:	b089      	sub	sp, #36	; 0x24
   d50cc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d50ce:	4668      	mov	r0, sp
   d50d0:	f7ff ff4d 	bl	d4f6e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d50d4:	2300      	movs	r3, #0
   d50d6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d50da:	f04f 0202 	mov.w	r2, #2
   d50de:	e8d4 3f4f 	ldrexb	r3, [r4]
   d50e2:	2b00      	cmp	r3, #0
   d50e4:	d103      	bne.n	d50ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d50e6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d50ea:	2900      	cmp	r1, #0
   d50ec:	d1f7      	bne.n	d50de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d50ee:	d002      	beq.n	d50f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d50f0:	f88d 3008 	strb.w	r3, [sp, #8]
   d50f4:	e063      	b.n	d51be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d50f6:	f114 050c 	adds.w	r5, r4, #12
   d50fa:	d003      	beq.n	d5104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d50fc:	4669      	mov	r1, sp
   d50fe:	4628      	mov	r0, r5
   d5100:	f7ff ff35 	bl	d4f6e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5104:	f3bf 8f5f 	dmb	sy
   d5108:	2301      	movs	r3, #1
   d510a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d510c:	2000      	movs	r0, #0
   d510e:	f104 0308 	add.w	r3, r4, #8
   d5112:	f3bf 8f5f 	dmb	sy
   d5116:	e853 6f00 	ldrex	r6, [r3]
   d511a:	e843 0200 	strex	r2, r0, [r3]
   d511e:	2a00      	cmp	r2, #0
   d5120:	d1f9      	bne.n	d5116 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d5122:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5126:	2e00      	cmp	r6, #0
   d5128:	d049      	beq.n	d51be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d512a:	f7ff fae3 	bl	d46f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d512e:	b120      	cbz	r0, d513a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5130:	4629      	mov	r1, r5
   d5132:	4630      	mov	r0, r6
   d5134:	f7ff ff98 	bl	d5068 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5138:	e03a      	b.n	d51b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d513a:	4631      	mov	r1, r6
   d513c:	a802      	add	r0, sp, #8
   d513e:	f7ff ffb3 	bl	d50a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5142:	68e0      	ldr	r0, [r4, #12]
   d5144:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5148:	b108      	cbz	r0, d514e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d514a:	f001 f8ad 	bl	d62a8 <strdup>
   d514e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5150:	2010      	movs	r0, #16
   d5152:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5156:	f7fe ff9e 	bl	d4096 <_Znwj>
   d515a:	4605      	mov	r5, r0
   d515c:	b1e8      	cbz	r0, d519a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d515e:	2700      	movs	r7, #0
   d5160:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5162:	2018      	movs	r0, #24
   d5164:	f7fe ff97 	bl	d4096 <_Znwj>
   d5168:	4604      	mov	r4, r0
   d516a:	b188      	cbz	r0, d5190 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d516c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d516e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5170:	a802      	add	r0, sp, #8
   d5172:	f7ff fe65 	bl	d4e40 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5176:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5178:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d517a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d517c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d517e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5180:	a906      	add	r1, sp, #24
   d5182:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5184:	60e3      	str	r3, [r4, #12]
   d5186:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d518a:	9205      	str	r2, [sp, #20]
   d518c:	f7ff feef 	bl	d4f6e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5190:	4b0d      	ldr	r3, [pc, #52]	; (d51c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d5192:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5194:	4b0d      	ldr	r3, [pc, #52]	; (d51cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5196:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5198:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d519a:	a806      	add	r0, sp, #24
   d519c:	f7ff fef6 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51a0:	a802      	add	r0, sp, #8
   d51a2:	f7ff fe3e 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d51a6:	2200      	movs	r2, #0
   d51a8:	4629      	mov	r1, r5
   d51aa:	4809      	ldr	r0, [pc, #36]	; (d51d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d51ac:	f7ff faaa 	bl	d4704 <application_thread_invoke>
   d51b0:	4630      	mov	r0, r6
   d51b2:	f7ff fe36 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d51b6:	2110      	movs	r1, #16
   d51b8:	4630      	mov	r0, r6
   d51ba:	f000 fdc4 	bl	d5d46 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d51be:	4668      	mov	r0, sp
   d51c0:	f7ff fee4 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
    }
   d51c4:	b009      	add	sp, #36	; 0x24
   d51c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d51c8:	000d507b 	.word	0x000d507b
   d51cc:	000d52f1 	.word	0x000d52f1
   d51d0:	000d589d 	.word	0x000d589d

000d51d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d51d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d51d8:	b08b      	sub	sp, #44	; 0x2c
   d51da:	4606      	mov	r6, r0
   d51dc:	460f      	mov	r7, r1
   d51de:	4690      	mov	r8, r2
   d51e0:	4699      	mov	r9, r3
   d51e2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d51e6:	f7ff fb19 	bl	d481c <spark_cloud_flag_connected>
   d51ea:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
   d51ec:	4683      	mov	fp, r0
   d51ee:	bb30      	cbnz	r0, d523e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d51f0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d51f4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d51f6:	a905      	add	r1, sp, #20
   d51f8:	4628      	mov	r0, r5
   d51fa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d51fe:	f7ff feb6 	bl	d4f6e <_ZN8particle5ErrorC1EOS0_>
   d5202:	2014      	movs	r0, #20
   d5204:	f7fe ff47 	bl	d4096 <_Znwj>
   d5208:	4604      	mov	r4, r0
   d520a:	b158      	cbz	r0, d5224 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d520c:	2302      	movs	r3, #2
   d520e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5210:	2301      	movs	r3, #1
   d5212:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5214:	f8c0 b004 	str.w	fp, [r0, #4]
   d5218:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d521c:	4629      	mov	r1, r5
   d521e:	300c      	adds	r0, #12
   d5220:	f7ff fea5 	bl	d4f6e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5224:	4630      	mov	r0, r6
   d5226:	4621      	mov	r1, r4
   d5228:	f840 4b04 	str.w	r4, [r0], #4
   d522c:	f7ff ff08 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5230:	4628      	mov	r0, r5
   d5232:	f7ff feab 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5236:	a805      	add	r0, sp, #20
   d5238:	f7ff fea8 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
   d523c:	e052      	b.n	d52e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d523e:	2400      	movs	r4, #0
   d5240:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5242:	2014      	movs	r0, #20
   d5244:	606c      	str	r4, [r5, #4]
   d5246:	60ac      	str	r4, [r5, #8]
   d5248:	9307      	str	r3, [sp, #28]
   d524a:	f7fe ff24 	bl	d4096 <_Znwj>
   d524e:	4601      	mov	r1, r0
   d5250:	b118      	cbz	r0, d525a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d5252:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5254:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5256:	6044      	str	r4, [r0, #4]
   d5258:	6084      	str	r4, [r0, #8]
   d525a:	a804      	add	r0, sp, #16
   d525c:	9103      	str	r1, [sp, #12]
   d525e:	f7ff feef 	bl	d5040 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d5262:	4b22      	ldr	r3, [pc, #136]	; (d52ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d5264:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5266:	2008      	movs	r0, #8
   d5268:	f7fe ff15 	bl	d4096 <_Znwj>
   d526c:	4604      	mov	r4, r0
   d526e:	b128      	cbz	r0, d527c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5270:	9b03      	ldr	r3, [sp, #12]
   d5272:	f840 3b04 	str.w	r3, [r0], #4
   d5276:	a904      	add	r1, sp, #16
   d5278:	f7ff fc88 	bl	d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d527c:	9500      	str	r5, [sp, #0]
   d527e:	fa5f f38a 	uxtb.w	r3, sl
   d5282:	464a      	mov	r2, r9
   d5284:	4641      	mov	r1, r8
   d5286:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5288:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d528a:	f7ff facf 	bl	d482c <spark_send_event>
   d528e:	b920      	cbnz	r0, d529a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5290:	9b03      	ldr	r3, [sp, #12]
   d5292:	785b      	ldrb	r3, [r3, #1]
   d5294:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5298:	b183      	cbz	r3, d52bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d529a:	9b03      	ldr	r3, [sp, #12]
   d529c:	9305      	str	r3, [sp, #20]
   d529e:	a904      	add	r1, sp, #16
   d52a0:	a806      	add	r0, sp, #24
   d52a2:	f7ff fc73 	bl	d4b8c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d52a6:	a905      	add	r1, sp, #20
   d52a8:	4630      	mov	r0, r6
   d52aa:	f7ff fe99 	bl	d4fe0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d52ae:	a806      	add	r0, sp, #24
   d52b0:	f7ff fc73 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52b4:	a804      	add	r0, sp, #16
   d52b6:	f7ff fc70 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52ba:	e013      	b.n	d52e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d52bc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d52c0:	a905      	add	r1, sp, #20
   d52c2:	a803      	add	r0, sp, #12
   d52c4:	9205      	str	r2, [sp, #20]
   d52c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52ca:	f7ff fefd 	bl	d50c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d52ce:	a805      	add	r0, sp, #20
   d52d0:	f7ff fe5c 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d52d4:	a805      	add	r0, sp, #20
   d52d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d52d8:	f7ff fe93 	bl	d5002 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d52dc:	a806      	add	r0, sp, #24
   d52de:	f7ff fc5c 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d52e2:	e7da      	b.n	d529a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d52e4:	4630      	mov	r0, r6
   d52e6:	b00b      	add	sp, #44	; 0x2c
   d52e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52ec:	000d5461 	.word	0x000d5461

000d52f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d52f0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d52f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d52f4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d52f6:	d006      	beq.n	d5306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d52f8:	2a03      	cmp	r2, #3
   d52fa:	d017      	beq.n	d532c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d52fc:	2a01      	cmp	r2, #1
   d52fe:	d122      	bne.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5300:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5302:	6003      	str	r3, [r0, #0]
	      break;
   d5304:	e01f      	b.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5306:	2018      	movs	r0, #24
   d5308:	680e      	ldr	r6, [r1, #0]
   d530a:	f7fe fec4 	bl	d4096 <_Znwj>
   d530e:	4605      	mov	r5, r0
   d5310:	b150      	cbz	r0, d5328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5312:	4631      	mov	r1, r6
   d5314:	f7ff fec8 	bl	d50a8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5318:	6930      	ldr	r0, [r6, #16]
   d531a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d531e:	b108      	cbz	r0, d5324 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5320:	f000 ffc2 	bl	d62a8 <strdup>
   d5324:	6128      	str	r0, [r5, #16]
   d5326:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5328:	6025      	str	r5, [r4, #0]
   d532a:	e00c      	b.n	d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d532c:	6804      	ldr	r4, [r0, #0]
   d532e:	b154      	cbz	r4, d5346 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d5330:	f104 0010 	add.w	r0, r4, #16
   d5334:	f7ff fe2a 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5338:	4620      	mov	r0, r4
   d533a:	f7ff fd72 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d533e:	2118      	movs	r1, #24
   d5340:	4620      	mov	r0, r4
   d5342:	f000 fd00 	bl	d5d46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5346:	2000      	movs	r0, #0
   d5348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d534a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d534a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d534c:	2300      	movs	r3, #0
   d534e:	6083      	str	r3, [r0, #8]
   d5350:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5352:	4604      	mov	r4, r0
   d5354:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5356:	b12b      	cbz	r3, d5364 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5358:	2202      	movs	r2, #2
   d535a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d535c:	68eb      	ldr	r3, [r5, #12]
   d535e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5360:	68ab      	ldr	r3, [r5, #8]
   d5362:	60a3      	str	r3, [r4, #8]
	}
    }
   d5364:	4620      	mov	r0, r4
   d5366:	bd38      	pop	{r3, r4, r5, pc}

000d5368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5368:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d536a:	b570      	push	{r4, r5, r6, lr}
   d536c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d536e:	d006      	beq.n	d537e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5370:	2a03      	cmp	r2, #3
   d5372:	d011      	beq.n	d5398 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5374:	2a01      	cmp	r2, #1
   d5376:	d118      	bne.n	d53aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5378:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d537a:	6003      	str	r3, [r0, #0]
	      break;
   d537c:	e015      	b.n	d53aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d537e:	2014      	movs	r0, #20
   d5380:	680e      	ldr	r6, [r1, #0]
   d5382:	f7fe fe88 	bl	d4096 <_Znwj>
   d5386:	4605      	mov	r5, r0
   d5388:	b120      	cbz	r0, d5394 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d538a:	4631      	mov	r1, r6
   d538c:	f7ff ffdd 	bl	d534a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5390:	7c33      	ldrb	r3, [r6, #16]
   d5392:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5394:	6025      	str	r5, [r4, #0]
   d5396:	e008      	b.n	d53aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5398:	6804      	ldr	r4, [r0, #0]
   d539a:	b134      	cbz	r4, d53aa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d539c:	4620      	mov	r0, r4
   d539e:	f7ff fd40 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d53a2:	2114      	movs	r1, #20
   d53a4:	4620      	mov	r0, r4
   d53a6:	f000 fcce 	bl	d5d46 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d53aa:	2000      	movs	r0, #0
   d53ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d53b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d53b0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d53b2:	2300      	movs	r3, #0
   d53b4:	b087      	sub	sp, #28
   d53b6:	460c      	mov	r4, r1
   d53b8:	f3bf 8f5f 	dmb	sy
   d53bc:	e850 6f00 	ldrex	r6, [r0]
   d53c0:	e840 3200 	strex	r2, r3, [r0]
   d53c4:	2a00      	cmp	r2, #0
   d53c6:	d1f9      	bne.n	d53bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d53c8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d53cc:	2e00      	cmp	r6, #0
   d53ce:	d03f      	beq.n	d5450 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d53d0:	4618      	mov	r0, r3
   d53d2:	f7ff f98f 	bl	d46f4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d53d6:	4607      	mov	r7, r0
   d53d8:	b120      	cbz	r0, d53e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d53da:	4621      	mov	r1, r4
   d53dc:	4630      	mov	r0, r6
   d53de:	f7ff fe53 	bl	d5088 <_ZNKSt8functionIFvRKbEEclES1_>
   d53e2:	e02e      	b.n	d5442 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d53e4:	4631      	mov	r1, r6
   d53e6:	a801      	add	r0, sp, #4
   d53e8:	f7ff ffaf 	bl	d534a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53ec:	7823      	ldrb	r3, [r4, #0]
   d53ee:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d53f2:	2010      	movs	r0, #16
   d53f4:	f7fe fe4f 	bl	d4096 <_Znwj>
   d53f8:	4605      	mov	r5, r0
   d53fa:	b1d0      	cbz	r0, d5432 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d53fc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53fe:	2014      	movs	r0, #20
   d5400:	f7fe fe49 	bl	d4096 <_Znwj>
   d5404:	4604      	mov	r4, r0
   d5406:	b178      	cbz	r0, d5428 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5408:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d540a:	4601      	mov	r1, r0
   d540c:	a801      	add	r0, sp, #4
   d540e:	f7ff fd17 	bl	d4e40 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5412:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5414:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5416:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5418:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d541a:	9203      	str	r2, [sp, #12]
   d541c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d541e:	60e3      	str	r3, [r4, #12]
   d5420:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5424:	9204      	str	r2, [sp, #16]
   d5426:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5428:	4b0a      	ldr	r3, [pc, #40]	; (d5454 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d542a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d542c:	4b0a      	ldr	r3, [pc, #40]	; (d5458 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d542e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5430:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5432:	a801      	add	r0, sp, #4
   d5434:	f7ff fcf5 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5438:	2200      	movs	r2, #0
   d543a:	4629      	mov	r1, r5
   d543c:	4807      	ldr	r0, [pc, #28]	; (d545c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d543e:	f7ff f961 	bl	d4704 <application_thread_invoke>
   d5442:	4630      	mov	r0, r6
   d5444:	f7ff fced 	bl	d4e22 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5448:	2110      	movs	r1, #16
   d544a:	4630      	mov	r0, r6
   d544c:	f000 fc7b 	bl	d5d46 <_ZdlPvj>
        }
    }
   d5450:	b007      	add	sp, #28
   d5452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5454:	000d509b 	.word	0x000d509b
   d5458:	000d5369 	.word	0x000d5369
   d545c:	000d589d 	.word	0x000d589d

000d5460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5460:	b530      	push	{r4, r5, lr}
   d5462:	b085      	sub	sp, #20
   d5464:	4604      	mov	r4, r0
   d5466:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5468:	4668      	mov	r0, sp
   d546a:	4611      	mov	r1, r2
   d546c:	f7ff fdc9 	bl	d5002 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5470:	b17c      	cbz	r4, d5492 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5472:	b224      	sxth	r4, r4
   d5474:	4628      	mov	r0, r5
   d5476:	b10d      	cbz	r5, d547c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5478:	f000 ff16 	bl	d62a8 <strdup>
   d547c:	9002      	str	r0, [sp, #8]
   d547e:	a902      	add	r1, sp, #8
   d5480:	4668      	mov	r0, sp
   d5482:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5486:	f7ff fe1f 	bl	d50c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d548a:	a802      	add	r0, sp, #8
   d548c:	f7ff fd7e 	bl	d4f8c <_ZN8particle5ErrorD1Ev>
   d5490:	e01d      	b.n	d54ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5492:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5494:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5498:	f04f 0201 	mov.w	r2, #1
   d549c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d54a0:	42a3      	cmp	r3, r4
   d54a2:	d103      	bne.n	d54ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d54a4:	e8c0 2f41 	strexb	r1, r2, [r0]
   d54a8:	2900      	cmp	r1, #0
   d54aa:	d1f7      	bne.n	d549c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d54ac:	d002      	beq.n	d54b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d54ae:	f88d 3008 	strb.w	r3, [sp, #8]
   d54b2:	e00c      	b.n	d54ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d54b4:	f110 010c 	adds.w	r1, r0, #12
   d54b8:	f04f 0301 	mov.w	r3, #1
   d54bc:	bf18      	it	ne
   d54be:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d54c0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d54c4:	3004      	adds	r0, #4
   d54c6:	f800 3c03 	strb.w	r3, [r0, #-3]
   d54ca:	f7ff ff71 	bl	d53b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d54ce:	a801      	add	r0, sp, #4
   d54d0:	f7ff fb63 	bl	d4b9a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d54d4:	b005      	add	sp, #20
   d54d6:	bd30      	pop	{r4, r5, pc}

000d54d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d54d8:	4770      	bx	lr

000d54da <_ZN9IPAddressD0Ev>:
   d54da:	b510      	push	{r4, lr}
   d54dc:	2118      	movs	r1, #24
   d54de:	4604      	mov	r4, r0
   d54e0:	f000 fc31 	bl	d5d46 <_ZdlPvj>
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd10      	pop	{r4, pc}

000d54e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54ea:	7d03      	ldrb	r3, [r0, #20]
   d54ec:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d54ee:	b08d      	sub	sp, #52	; 0x34
   d54f0:	460e      	mov	r6, r1
   d54f2:	f100 0704 	add.w	r7, r0, #4
   d54f6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d54fa:	d002      	beq.n	d5502 <_ZNK9IPAddress7printToER5Print+0x1a>
   d54fc:	f100 0508 	add.w	r5, r0, #8
   d5500:	e018      	b.n	d5534 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5502:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5504:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5506:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d550a:	232f      	movs	r3, #47	; 0x2f
   d550c:	462a      	mov	r2, r5
   d550e:	200a      	movs	r0, #10
   d5510:	f7ff f818 	bl	d4544 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5514:	4628      	mov	r0, r5
   d5516:	f000 fee2 	bl	d62de <strlen>
   d551a:	6833      	ldr	r3, [r6, #0]
   d551c:	4602      	mov	r2, r0
   d551e:	68db      	ldr	r3, [r3, #12]
   d5520:	4629      	mov	r1, r5
   d5522:	4630      	mov	r0, r6
   d5524:	4798      	blx	r3
   d5526:	e00f      	b.n	d5548 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5528:	b124      	cbz	r4, d5534 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d552a:	212e      	movs	r1, #46	; 0x2e
   d552c:	4630      	mov	r0, r6
   d552e:	f7ff fb73 	bl	d4c18 <_ZN5Print5printEc>
   d5532:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5534:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5538:	220a      	movs	r2, #10
   d553a:	4630      	mov	r0, r6
   d553c:	f7ff fbb2 	bl	d4ca4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5540:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5542:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5544:	d1f0      	bne.n	d5528 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5546:	4620      	mov	r0, r4
    }
    return n;
}
   d5548:	b00d      	add	sp, #52	; 0x34
   d554a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d554c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d554c:	b510      	push	{r4, lr}
   d554e:	4b05      	ldr	r3, [pc, #20]	; (d5564 <_ZN9IPAddressC1Ev+0x18>)
   d5550:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5552:	2211      	movs	r2, #17
   d5554:	f840 3b04 	str.w	r3, [r0], #4
   d5558:	2100      	movs	r1, #0
   d555a:	f000 fe52 	bl	d6202 <memset>
{
    clear();
}
   d555e:	4620      	mov	r0, r4
   d5560:	bd10      	pop	{r4, pc}
   d5562:	bf00      	nop
   d5564:	000d6c08 	.word	0x000d6c08

000d5568 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5568:	4603      	mov	r3, r0
   d556a:	4a07      	ldr	r2, [pc, #28]	; (d5588 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d556c:	b510      	push	{r4, lr}
   d556e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5572:	f101 0210 	add.w	r2, r1, #16
   d5576:	f851 4b04 	ldr.w	r4, [r1], #4
   d557a:	f843 4b04 	str.w	r4, [r3], #4
   d557e:	4291      	cmp	r1, r2
   d5580:	d1f9      	bne.n	d5576 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5582:	780a      	ldrb	r2, [r1, #0]
   d5584:	701a      	strb	r2, [r3, #0]
}
   d5586:	bd10      	pop	{r4, pc}
   d5588:	000d6c08 	.word	0x000d6c08

000d558c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d558c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d558e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5592:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5596:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d559a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d559e:	2304      	movs	r3, #4
   d55a0:	6041      	str	r1, [r0, #4]
   d55a2:	7503      	strb	r3, [r0, #20]
   d55a4:	bd10      	pop	{r4, pc}

000d55a6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d55a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d55a8:	780d      	ldrb	r5, [r1, #0]
   d55aa:	788b      	ldrb	r3, [r1, #2]
   d55ac:	784a      	ldrb	r2, [r1, #1]
   d55ae:	78c9      	ldrb	r1, [r1, #3]
   d55b0:	9100      	str	r1, [sp, #0]
   d55b2:	4629      	mov	r1, r5
   d55b4:	f7ff ffea 	bl	d558c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d55b8:	b003      	add	sp, #12
   d55ba:	bd30      	pop	{r4, r5, pc}

000d55bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55bc:	7441      	strb	r1, [r0, #17]
   d55be:	4770      	bx	lr

000d55c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55c0:	4770      	bx	lr

000d55c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d55c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55c4:	2100      	movs	r1, #0
   d55c6:	7c00      	ldrb	r0, [r0, #16]
   d55c8:	f7ff f85c 	bl	d4684 <HAL_USB_USART_Receive_Data>
}
   d55cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55d0:	bf28      	it	cs
   d55d2:	f04f 30ff 	movcs.w	r0, #4294967295
   d55d6:	bd08      	pop	{r3, pc}

000d55d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d55d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d55da:	2101      	movs	r1, #1
   d55dc:	7c00      	ldrb	r0, [r0, #16]
   d55de:	f7ff f851 	bl	d4684 <HAL_USB_USART_Receive_Data>
}
   d55e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d55e6:	bf28      	it	cs
   d55e8:	f04f 30ff 	movcs.w	r0, #4294967295
   d55ec:	bd08      	pop	{r3, pc}

000d55ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d55ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d55f0:	7c00      	ldrb	r0, [r0, #16]
   d55f2:	f7ff f83f 	bl	d4674 <HAL_USB_USART_Available_Data_For_Write>
}
   d55f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55fa:	bd08      	pop	{r3, pc}

000d55fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d55fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d55fe:	7c00      	ldrb	r0, [r0, #16]
   d5600:	f7ff f830 	bl	d4664 <HAL_USB_USART_Available_Data>
}
   d5604:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5608:	bd08      	pop	{r3, pc}

000d560a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d560a:	7c00      	ldrb	r0, [r0, #16]
   d560c:	f7ff b84a 	b.w	d46a4 <HAL_USB_USART_Flush_Data>

000d5610 <_ZN9USBSerialD0Ev>:
   d5610:	b510      	push	{r4, lr}
   d5612:	2114      	movs	r1, #20
   d5614:	4604      	mov	r4, r0
   d5616:	f000 fb96 	bl	d5d46 <_ZdlPvj>
   d561a:	4620      	mov	r0, r4
   d561c:	bd10      	pop	{r4, pc}

000d561e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d561e:	b538      	push	{r3, r4, r5, lr}
   d5620:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5622:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5624:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5626:	f7ff f825 	bl	d4674 <HAL_USB_USART_Available_Data_For_Write>
   d562a:	2800      	cmp	r0, #0
   d562c:	dc01      	bgt.n	d5632 <_ZN9USBSerial5writeEh+0x14>
   d562e:	7c60      	ldrb	r0, [r4, #17]
   d5630:	b128      	cbz	r0, d563e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5632:	4629      	mov	r1, r5
   d5634:	7c20      	ldrb	r0, [r4, #16]
   d5636:	f7ff f82d 	bl	d4694 <HAL_USB_USART_Send_Data>
   d563a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d563e:	bd38      	pop	{r3, r4, r5, pc}

000d5640 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5640:	b510      	push	{r4, lr}
   d5642:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5644:	2300      	movs	r3, #0
   d5646:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d564c:	60a3      	str	r3, [r4, #8]
   d564e:	4b05      	ldr	r3, [pc, #20]	; (d5664 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5650:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5652:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5654:	4608      	mov	r0, r1
{
  _serial = serial;
   d5656:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5658:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d565a:	4611      	mov	r1, r2
   d565c:	f7fe fff2 	bl	d4644 <HAL_USB_USART_Init>
}
   d5660:	4620      	mov	r0, r4
   d5662:	bd10      	pop	{r4, pc}
   d5664:	000d6c1c 	.word	0x000d6c1c

000d5668 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5668:	2200      	movs	r2, #0
   d566a:	7c00      	ldrb	r0, [r0, #16]
   d566c:	f7fe bff2 	b.w	d4654 <HAL_USB_USART_Begin>

000d5670 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5670:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5672:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5674:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5676:	2100      	movs	r1, #0
   d5678:	f000 fdc3 	bl	d6202 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d567c:	4620      	mov	r0, r4
   d567e:	bd10      	pop	{r4, pc}

000d5680 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5680:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5682:	4d0e      	ldr	r5, [pc, #56]	; (d56bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5684:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5686:	a801      	add	r0, sp, #4
   d5688:	f7ff fff2 	bl	d5670 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d568c:	6829      	ldr	r1, [r5, #0]
   d568e:	f011 0401 	ands.w	r4, r1, #1
   d5692:	d110      	bne.n	d56b6 <_Z16_fetch_usbserialv+0x36>
   d5694:	4628      	mov	r0, r5
   d5696:	f7fe fd04 	bl	d40a2 <__cxa_guard_acquire>
   d569a:	b160      	cbz	r0, d56b6 <_Z16_fetch_usbserialv+0x36>
   d569c:	aa01      	add	r2, sp, #4
   d569e:	4621      	mov	r1, r4
   d56a0:	4807      	ldr	r0, [pc, #28]	; (d56c0 <_Z16_fetch_usbserialv+0x40>)
   d56a2:	f7ff ffcd 	bl	d5640 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d56a6:	4628      	mov	r0, r5
   d56a8:	f7fe fd00 	bl	d40ac <__cxa_guard_release>
   d56ac:	4a05      	ldr	r2, [pc, #20]	; (d56c4 <_Z16_fetch_usbserialv+0x44>)
   d56ae:	4906      	ldr	r1, [pc, #24]	; (d56c8 <_Z16_fetch_usbserialv+0x48>)
   d56b0:	4803      	ldr	r0, [pc, #12]	; (d56c0 <_Z16_fetch_usbserialv+0x40>)
   d56b2:	f000 fb43 	bl	d5d3c <__aeabi_atexit>
	return _usbserial;
}
   d56b6:	4802      	ldr	r0, [pc, #8]	; (d56c0 <_Z16_fetch_usbserialv+0x40>)
   d56b8:	b007      	add	sp, #28
   d56ba:	bd30      	pop	{r4, r5, pc}
   d56bc:	2003e4a8 	.word	0x2003e4a8
   d56c0:	2003e4ac 	.word	0x2003e4ac
   d56c4:	2003e31c 	.word	0x2003e31c
   d56c8:	000d55c1 	.word	0x000d55c1

000d56cc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d56cc:	2200      	movs	r2, #0
   d56ce:	4611      	mov	r1, r2
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	f7ff b853 	b.w	d477c <network_ready>

000d56d6 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56d6:	2200      	movs	r2, #0
   d56d8:	4611      	mov	r1, r2
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	f7ff b86e 	b.w	d47bc <network_listening>

000d56e0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56e0:	2200      	movs	r2, #0
   d56e2:	4611      	mov	r1, r2
   d56e4:	6840      	ldr	r0, [r0, #4]
   d56e6:	f7ff b879 	b.w	d47dc <network_get_listen_timeout>

000d56ea <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56ea:	2200      	movs	r2, #0
   d56ec:	6840      	ldr	r0, [r0, #4]
   d56ee:	f7ff b86d 	b.w	d47cc <network_set_listen_timeout>

000d56f2 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56f2:	2200      	movs	r2, #0
   d56f4:	f081 0101 	eor.w	r1, r1, #1
   d56f8:	6840      	ldr	r0, [r0, #4]
   d56fa:	f7ff b857 	b.w	d47ac <network_listen>

000d56fe <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d56fe:	2300      	movs	r3, #0
   d5700:	461a      	mov	r2, r3
   d5702:	4619      	mov	r1, r3
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	f7ff b849 	b.w	d479c <network_off>

000d570a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d570a:	2300      	movs	r3, #0
   d570c:	461a      	mov	r2, r3
   d570e:	4619      	mov	r1, r3
   d5710:	6840      	ldr	r0, [r0, #4]
   d5712:	f7ff b83b 	b.w	d478c <network_on>

000d5716 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5716:	2200      	movs	r2, #0
   d5718:	4611      	mov	r1, r2
   d571a:	6840      	ldr	r0, [r0, #4]
   d571c:	f7ff b81e 	b.w	d475c <network_connecting>

000d5720 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5720:	2200      	movs	r2, #0
   d5722:	2102      	movs	r1, #2
   d5724:	6840      	ldr	r0, [r0, #4]
   d5726:	f7ff b821 	b.w	d476c <network_disconnect>

000d572a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d572a:	2300      	movs	r3, #0
   d572c:	461a      	mov	r2, r3
   d572e:	6840      	ldr	r0, [r0, #4]
   d5730:	f7ff b80c 	b.w	d474c <network_connect>

000d5734 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5734:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5736:	4c08      	ldr	r4, [pc, #32]	; (d5758 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d5738:	2528      	movs	r5, #40	; 0x28
   d573a:	462a      	mov	r2, r5
   d573c:	2100      	movs	r1, #0
   d573e:	4620      	mov	r0, r4
   d5740:	f000 fd5f 	bl	d6202 <memset>
        cid = -1;
   d5744:	f04f 33ff 	mov.w	r3, #4294967295
   d5748:	6063      	str	r3, [r4, #4]
   d574a:	4b04      	ldr	r3, [pc, #16]	; (d575c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d574c:	8025      	strh	r5, [r4, #0]
   d574e:	2204      	movs	r2, #4
   d5750:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5752:	4a03      	ldr	r2, [pc, #12]	; (d5760 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5754:	601a      	str	r2, [r3, #0]
   d5756:	bd38      	pop	{r3, r4, r5, pc}
   d5758:	2003e4c8 	.word	0x2003e4c8
   d575c:	2003e4c0 	.word	0x2003e4c0
   d5760:	000d6c4c 	.word	0x000d6c4c

000d5764 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5764:	4770      	bx	lr

000d5766 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5766:	7441      	strb	r1, [r0, #17]
   d5768:	4770      	bx	lr

000d576a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d576a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d576c:	7c00      	ldrb	r0, [r0, #16]
   d576e:	f7fe ff29 	bl	d45c4 <HAL_USART_Available_Data_For_Write>
}
   d5772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5776:	bd08      	pop	{r3, pc}

000d5778 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5778:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d577a:	7c00      	ldrb	r0, [r0, #16]
   d577c:	f7fe fefa 	bl	d4574 <HAL_USART_Available_Data>
}
   d5780:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5784:	bd08      	pop	{r3, pc}

000d5786 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5786:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5788:	7c00      	ldrb	r0, [r0, #16]
   d578a:	f7fe ff03 	bl	d4594 <HAL_USART_Peek_Data>
}
   d578e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5792:	bf28      	it	cs
   d5794:	f04f 30ff 	movcs.w	r0, #4294967295
   d5798:	bd08      	pop	{r3, pc}

000d579a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d579a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d579c:	7c00      	ldrb	r0, [r0, #16]
   d579e:	f7fe fef1 	bl	d4584 <HAL_USART_Read_Data>
}
   d57a2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d57a6:	bf28      	it	cs
   d57a8:	f04f 30ff 	movcs.w	r0, #4294967295
   d57ac:	bd08      	pop	{r3, pc}

000d57ae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d57ae:	7c00      	ldrb	r0, [r0, #16]
   d57b0:	f7fe bef8 	b.w	d45a4 <HAL_USART_Flush_Data>

000d57b4 <_ZN11USARTSerialD0Ev>:
   d57b4:	b510      	push	{r4, lr}
   d57b6:	2114      	movs	r1, #20
   d57b8:	4604      	mov	r4, r0
   d57ba:	f000 fac4 	bl	d5d46 <_ZdlPvj>
   d57be:	4620      	mov	r0, r4
   d57c0:	bd10      	pop	{r4, pc}

000d57c2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d57c2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57c4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d57c6:	4604      	mov	r4, r0
   d57c8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d57ca:	b925      	cbnz	r5, d57d6 <_ZN11USARTSerial5writeEh+0x14>
   d57cc:	7c00      	ldrb	r0, [r0, #16]
   d57ce:	f7fe fef9 	bl	d45c4 <HAL_USART_Available_Data_For_Write>
   d57d2:	2800      	cmp	r0, #0
   d57d4:	dd05      	ble.n	d57e2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57d6:	4631      	mov	r1, r6
   d57d8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d57da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d57de:	f7fe bec1 	b.w	d4564 <HAL_USART_Write_Data>
  }
  return 0;
}
   d57e2:	4628      	mov	r0, r5
   d57e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d57e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d57e8:	b510      	push	{r4, lr}
   d57ea:	4604      	mov	r4, r0
   d57ec:	4608      	mov	r0, r1
   d57ee:	4611      	mov	r1, r2
   d57f0:	2200      	movs	r2, #0
   d57f2:	6062      	str	r2, [r4, #4]
   d57f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57f8:	60a2      	str	r2, [r4, #8]
   d57fa:	4a05      	ldr	r2, [pc, #20]	; (d5810 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d57fc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d57fe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5800:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5802:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5804:	461a      	mov	r2, r3
   d5806:	f7fe fea5 	bl	d4554 <HAL_USART_Init>
}
   d580a:	4620      	mov	r0, r4
   d580c:	bd10      	pop	{r4, pc}
   d580e:	bf00      	nop
   d5810:	000d6c80 	.word	0x000d6c80

000d5814 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5814:	7c00      	ldrb	r0, [r0, #16]
   d5816:	f7fe becd 	b.w	d45b4 <HAL_USART_Is_Enabled>
	...

000d581c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d581e:	4c19      	ldr	r4, [pc, #100]	; (d5884 <_Z22__fetch_global_Serial1v+0x68>)
   d5820:	6825      	ldr	r5, [r4, #0]
   d5822:	b94d      	cbnz	r5, d5838 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5824:	2084      	movs	r0, #132	; 0x84
   d5826:	f7fe fc36 	bl	d4096 <_Znwj>
   d582a:	4606      	mov	r6, r0
   d582c:	b118      	cbz	r0, d5836 <_Z22__fetch_global_Serial1v+0x1a>
   d582e:	2284      	movs	r2, #132	; 0x84
   d5830:	4629      	mov	r1, r5
   d5832:	f000 fce6 	bl	d6202 <memset>
   d5836:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5838:	4d13      	ldr	r5, [pc, #76]	; (d5888 <_Z22__fetch_global_Serial1v+0x6c>)
   d583a:	682e      	ldr	r6, [r5, #0]
   d583c:	b94e      	cbnz	r6, d5852 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d583e:	2084      	movs	r0, #132	; 0x84
   d5840:	f7fe fc29 	bl	d4096 <_Znwj>
   d5844:	4607      	mov	r7, r0
   d5846:	b118      	cbz	r0, d5850 <_Z22__fetch_global_Serial1v+0x34>
   d5848:	2284      	movs	r2, #132	; 0x84
   d584a:	4631      	mov	r1, r6
   d584c:	f000 fcd9 	bl	d6202 <memset>
   d5850:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5852:	4f0e      	ldr	r7, [pc, #56]	; (d588c <_Z22__fetch_global_Serial1v+0x70>)
   d5854:	6839      	ldr	r1, [r7, #0]
   d5856:	f011 0601 	ands.w	r6, r1, #1
   d585a:	d111      	bne.n	d5880 <_Z22__fetch_global_Serial1v+0x64>
   d585c:	4638      	mov	r0, r7
   d585e:	f7fe fc20 	bl	d40a2 <__cxa_guard_acquire>
   d5862:	b168      	cbz	r0, d5880 <_Z22__fetch_global_Serial1v+0x64>
   d5864:	6822      	ldr	r2, [r4, #0]
   d5866:	682b      	ldr	r3, [r5, #0]
   d5868:	4809      	ldr	r0, [pc, #36]	; (d5890 <_Z22__fetch_global_Serial1v+0x74>)
   d586a:	4631      	mov	r1, r6
   d586c:	f7ff ffbc 	bl	d57e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5870:	4638      	mov	r0, r7
   d5872:	f7fe fc1b 	bl	d40ac <__cxa_guard_release>
   d5876:	4a07      	ldr	r2, [pc, #28]	; (d5894 <_Z22__fetch_global_Serial1v+0x78>)
   d5878:	4907      	ldr	r1, [pc, #28]	; (d5898 <_Z22__fetch_global_Serial1v+0x7c>)
   d587a:	4805      	ldr	r0, [pc, #20]	; (d5890 <_Z22__fetch_global_Serial1v+0x74>)
   d587c:	f000 fa5e 	bl	d5d3c <__aeabi_atexit>
#endif
	return serial1;
}
   d5880:	4803      	ldr	r0, [pc, #12]	; (d5890 <_Z22__fetch_global_Serial1v+0x74>)
   d5882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5884:	2003e50c 	.word	0x2003e50c
   d5888:	2003e504 	.word	0x2003e504
   d588c:	2003e508 	.word	0x2003e508
   d5890:	2003e4f0 	.word	0x2003e4f0
   d5894:	2003e31c 	.word	0x2003e31c
   d5898:	000d5765 	.word	0x000d5765

000d589c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d589c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d589e:	6883      	ldr	r3, [r0, #8]
   d58a0:	4604      	mov	r4, r0
   d58a2:	b90b      	cbnz	r3, d58a8 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d58a4:	f000 fa51 	bl	d5d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d58a8:	68c3      	ldr	r3, [r0, #12]
   d58aa:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d58ac:	68a3      	ldr	r3, [r4, #8]
   d58ae:	b11b      	cbz	r3, d58b8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d58b0:	2203      	movs	r2, #3
   d58b2:	4621      	mov	r1, r4
   d58b4:	4620      	mov	r0, r4
   d58b6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d58b8:	4620      	mov	r0, r4
   d58ba:	2110      	movs	r1, #16
}
   d58bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d58c0:	f000 ba41 	b.w	d5d46 <_ZdlPvj>

000d58c4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d58c4:	4770      	bx	lr

000d58c6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d58c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58c8:	4606      	mov	r6, r0
   d58ca:	4615      	mov	r5, r2
   d58cc:	460c      	mov	r4, r1
   d58ce:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d58d0:	42bc      	cmp	r4, r7
   d58d2:	d006      	beq.n	d58e2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d58d4:	6833      	ldr	r3, [r6, #0]
   d58d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d58da:	689b      	ldr	r3, [r3, #8]
   d58dc:	4630      	mov	r0, r6
   d58de:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d58e0:	e7f6      	b.n	d58d0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d58e2:	4628      	mov	r0, r5
   d58e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58e6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d58e6:	2200      	movs	r2, #0
   d58e8:	7c00      	ldrb	r0, [r0, #16]
   d58ea:	f7fe be73 	b.w	d45d4 <HAL_I2C_Write_Data>

000d58ee <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d58ee:	2100      	movs	r1, #0
   d58f0:	7c00      	ldrb	r0, [r0, #16]
   d58f2:	f7fe be77 	b.w	d45e4 <HAL_I2C_Available_Data>

000d58f6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d58f6:	2100      	movs	r1, #0
   d58f8:	7c00      	ldrb	r0, [r0, #16]
   d58fa:	f7fe be7b 	b.w	d45f4 <HAL_I2C_Read_Data>

000d58fe <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d58fe:	2100      	movs	r1, #0
   d5900:	7c00      	ldrb	r0, [r0, #16]
   d5902:	f7fe be7f 	b.w	d4604 <HAL_I2C_Peek_Data>

000d5906 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5906:	2100      	movs	r1, #0
   d5908:	7c00      	ldrb	r0, [r0, #16]
   d590a:	f7fe be83 	b.w	d4614 <HAL_I2C_Flush_Data>

000d590e <_ZN7TwoWireD0Ev>:
   d590e:	b510      	push	{r4, lr}
   d5910:	2114      	movs	r1, #20
   d5912:	4604      	mov	r4, r0
   d5914:	f000 fa17 	bl	d5d46 <_ZdlPvj>
   d5918:	4620      	mov	r0, r4
   d591a:	bd10      	pop	{r4, pc}

000d591c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d591c:	b510      	push	{r4, lr}
   d591e:	4604      	mov	r4, r0
   d5920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5924:	4608      	mov	r0, r1
   d5926:	60a3      	str	r3, [r4, #8]
   d5928:	2100      	movs	r1, #0
   d592a:	4b04      	ldr	r3, [pc, #16]	; (d593c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d592c:	7420      	strb	r0, [r4, #16]
   d592e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5930:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5932:	f7fe fe7f 	bl	d4634 <HAL_I2C_Init>

}
   d5936:	4620      	mov	r0, r4
   d5938:	bd10      	pop	{r4, pc}
   d593a:	bf00      	nop
   d593c:	000d6cb0 	.word	0x000d6cb0

000d5940 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5940:	2100      	movs	r1, #0
   d5942:	7c00      	ldrb	r0, [r0, #16]
   d5944:	f7fe be6e 	b.w	d4624 <HAL_I2C_Is_Enabled>

000d5948 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5948:	2200      	movs	r2, #0
   d594a:	4611      	mov	r1, r2
   d594c:	6840      	ldr	r0, [r0, #4]
   d594e:	f7fe bf35 	b.w	d47bc <network_listening>

000d5952 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5952:	2200      	movs	r2, #0
   d5954:	4611      	mov	r1, r2
   d5956:	6840      	ldr	r0, [r0, #4]
   d5958:	f7fe bf40 	b.w	d47dc <network_get_listen_timeout>

000d595c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d595c:	2200      	movs	r2, #0
   d595e:	6840      	ldr	r0, [r0, #4]
   d5960:	f7fe bf34 	b.w	d47cc <network_set_listen_timeout>

000d5964 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5964:	2200      	movs	r2, #0
   d5966:	f081 0101 	eor.w	r1, r1, #1
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	f7fe bf1e 	b.w	d47ac <network_listen>

000d5970 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5970:	2300      	movs	r3, #0
   d5972:	461a      	mov	r2, r3
   d5974:	2101      	movs	r1, #1
   d5976:	6840      	ldr	r0, [r0, #4]
   d5978:	f7fe bf10 	b.w	d479c <network_off>

000d597c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d597c:	2300      	movs	r3, #0
   d597e:	461a      	mov	r2, r3
   d5980:	4619      	mov	r1, r3
   d5982:	6840      	ldr	r0, [r0, #4]
   d5984:	f7fe bf02 	b.w	d478c <network_on>

000d5988 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5988:	2200      	movs	r2, #0
   d598a:	4611      	mov	r1, r2
   d598c:	6840      	ldr	r0, [r0, #4]
   d598e:	f7fe bef5 	b.w	d477c <network_ready>

000d5992 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5992:	2200      	movs	r2, #0
   d5994:	4611      	mov	r1, r2
   d5996:	6840      	ldr	r0, [r0, #4]
   d5998:	f7fe bee0 	b.w	d475c <network_connecting>

000d599c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d599c:	2200      	movs	r2, #0
   d599e:	2102      	movs	r1, #2
   d59a0:	6840      	ldr	r0, [r0, #4]
   d59a2:	f7fe bee3 	b.w	d476c <network_disconnect>

000d59a6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59a6:	2300      	movs	r3, #0
   d59a8:	461a      	mov	r2, r3
   d59aa:	6840      	ldr	r0, [r0, #4]
   d59ac:	f7fe bece 	b.w	d474c <network_connect>

000d59b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d59b0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59b2:	4605      	mov	r5, r0
   d59b4:	b188      	cbz	r0, d59da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59b6:	6804      	ldr	r4, [r0, #0]
   d59b8:	b14c      	cbz	r4, d59ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d59ba:	68a3      	ldr	r3, [r4, #8]
   d59bc:	b11b      	cbz	r3, d59c6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59be:	2203      	movs	r2, #3
   d59c0:	4621      	mov	r1, r4
   d59c2:	4620      	mov	r0, r4
   d59c4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59c6:	2110      	movs	r1, #16
   d59c8:	4620      	mov	r0, r4
   d59ca:	f000 f9bc 	bl	d5d46 <_ZdlPvj>
   d59ce:	4628      	mov	r0, r5
   d59d0:	2114      	movs	r1, #20
      }
   d59d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d59d6:	f000 b9b6 	b.w	d5d46 <_ZdlPvj>
   d59da:	bd38      	pop	{r3, r4, r5, pc}

000d59dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d59dc:	b110      	cbz	r0, d59e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d59de:	6803      	ldr	r3, [r0, #0]
   d59e0:	685b      	ldr	r3, [r3, #4]
   d59e2:	4718      	bx	r3
   d59e4:	4770      	bx	lr

000d59e6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d59e6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d59e8:	6803      	ldr	r3, [r0, #0]
   d59ea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d59ec:	b1bb      	cbz	r3, d5a1e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d59ee:	6858      	ldr	r0, [r3, #4]
   d59f0:	f7fe fd80 	bl	d44f4 <os_thread_is_current>
   d59f4:	b978      	cbnz	r0, d5a16 <_ZN6ThreadD1Ev+0x30>
   d59f6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d59f8:	7c5a      	ldrb	r2, [r3, #17]
   d59fa:	b912      	cbnz	r2, d5a02 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d59fc:	6858      	ldr	r0, [r3, #4]
   d59fe:	f7fe fd81 	bl	d4504 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5a02:	6823      	ldr	r3, [r4, #0]
   d5a04:	6858      	ldr	r0, [r3, #4]
   d5a06:	f7fe fd85 	bl	d4514 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a0a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a0c:	2300      	movs	r3, #0
   d5a0e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a10:	b128      	cbz	r0, d5a1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5a12:	f7ff ffcd 	bl	d59b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a16:	6820      	ldr	r0, [r4, #0]
   d5a18:	b108      	cbz	r0, d5a1e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5a1a:	f7ff ffc9 	bl	d59b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5a1e:	4620      	mov	r0, r4
   d5a20:	bd10      	pop	{r4, pc}
	...

000d5a24 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5a24:	b538      	push	{r3, r4, r5, lr}
   d5a26:	4b0c      	ldr	r3, [pc, #48]	; (d5a58 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5a28:	6003      	str	r3, [r0, #0]
   d5a2a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a2c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5a30:	b108      	cbz	r0, d5a36 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5a32:	f7fe fb34 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a36:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5a3a:	b135      	cbz	r5, d5a4a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a3c:	4628      	mov	r0, r5
   d5a3e:	f7ff ffd2 	bl	d59e6 <_ZN6ThreadD1Ev>
   d5a42:	2104      	movs	r1, #4
   d5a44:	4628      	mov	r0, r5
   d5a46:	f000 f97e 	bl	d5d46 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a4a:	68a0      	ldr	r0, [r4, #8]
   d5a4c:	b108      	cbz	r0, d5a52 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5a4e:	f7ff ffc5 	bl	d59dc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5a52:	4620      	mov	r0, r4
   d5a54:	bd38      	pop	{r3, r4, r5, pc}
   d5a56:	bf00      	nop
   d5a58:	000d6cd8 	.word	0x000d6cd8

000d5a5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5a5c:	b538      	push	{r3, r4, r5, lr}
   d5a5e:	4c0e      	ldr	r4, [pc, #56]	; (d5a98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5a60:	4b0e      	ldr	r3, [pc, #56]	; (d5a9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5a62:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a64:	2500      	movs	r5, #0
   d5a66:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5a68:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5a6c:	6063      	str	r3, [r4, #4]
   d5a6e:	60a5      	str	r5, [r4, #8]
   d5a70:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a74:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5a78:	f7fe fd5c 	bl	d4534 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5a7c:	4b08      	ldr	r3, [pc, #32]	; (d5aa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5a7e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5a82:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5a86:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5a88:	4620      	mov	r0, r4
   d5a8a:	4a06      	ldr	r2, [pc, #24]	; (d5aa4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5a8c:	4906      	ldr	r1, [pc, #24]	; (d5aa8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5a92:	f000 b953 	b.w	d5d3c <__aeabi_atexit>
   d5a96:	bf00      	nop
   d5a98:	2003e510 	.word	0x2003e510
   d5a9c:	000d6d0c 	.word	0x000d6d0c
   d5aa0:	000d6cd8 	.word	0x000d6cd8
   d5aa4:	2003e31c 	.word	0x2003e31c
   d5aa8:	000d5a25 	.word	0x000d5a25

000d5aac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5aac:	2300      	movs	r3, #0
   d5aae:	461a      	mov	r2, r3
   d5ab0:	6840      	ldr	r0, [r0, #4]
   d5ab2:	f7fe be4b 	b.w	d474c <network_connect>

000d5ab6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5ab6:	2200      	movs	r2, #0
   d5ab8:	2102      	movs	r1, #2
   d5aba:	6840      	ldr	r0, [r0, #4]
   d5abc:	f7fe be56 	b.w	d476c <network_disconnect>

000d5ac0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5ac0:	2200      	movs	r2, #0
   d5ac2:	4611      	mov	r1, r2
   d5ac4:	6840      	ldr	r0, [r0, #4]
   d5ac6:	f7fe be49 	b.w	d475c <network_connecting>

000d5aca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5aca:	2200      	movs	r2, #0
   d5acc:	4611      	mov	r1, r2
   d5ace:	6840      	ldr	r0, [r0, #4]
   d5ad0:	f7fe be54 	b.w	d477c <network_ready>

000d5ad4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5ad4:	2300      	movs	r3, #0
   d5ad6:	461a      	mov	r2, r3
   d5ad8:	4619      	mov	r1, r3
   d5ada:	6840      	ldr	r0, [r0, #4]
   d5adc:	f7fe be56 	b.w	d478c <network_on>

000d5ae0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ae0:	2300      	movs	r3, #0
   d5ae2:	461a      	mov	r2, r3
   d5ae4:	4619      	mov	r1, r3
   d5ae6:	6840      	ldr	r0, [r0, #4]
   d5ae8:	f7fe be58 	b.w	d479c <network_off>

000d5aec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5aec:	2200      	movs	r2, #0
   d5aee:	f081 0101 	eor.w	r1, r1, #1
   d5af2:	6840      	ldr	r0, [r0, #4]
   d5af4:	f7fe be5a 	b.w	d47ac <network_listen>

000d5af8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5af8:	2200      	movs	r2, #0
   d5afa:	6840      	ldr	r0, [r0, #4]
   d5afc:	f7fe be66 	b.w	d47cc <network_set_listen_timeout>

000d5b00 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5b00:	2200      	movs	r2, #0
   d5b02:	4611      	mov	r1, r2
   d5b04:	6840      	ldr	r0, [r0, #4]
   d5b06:	f7fe be69 	b.w	d47dc <network_get_listen_timeout>

000d5b0a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5b0a:	2200      	movs	r2, #0
   d5b0c:	4611      	mov	r1, r2
   d5b0e:	6840      	ldr	r0, [r0, #4]
   d5b10:	f7fe be54 	b.w	d47bc <network_listening>

000d5b14 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b18:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5b1a:	b095      	sub	sp, #84	; 0x54
   d5b1c:	4616      	mov	r6, r2
   d5b1e:	460d      	mov	r5, r1
   d5b20:	4607      	mov	r7, r0
    IPAddress addr;
   d5b22:	f7ff fd13 	bl	d554c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5b26:	4621      	mov	r1, r4
   d5b28:	2220      	movs	r2, #32
   d5b2a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5b2c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5b2e:	f000 fb68 	bl	d6202 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5b32:	2340      	movs	r3, #64	; 0x40
   d5b34:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5b36:	4621      	mov	r1, r4
   d5b38:	466b      	mov	r3, sp
   d5b3a:	aa0c      	add	r2, sp, #48	; 0x30
   d5b3c:	4630      	mov	r0, r6
   d5b3e:	f7fe fc79 	bl	d4434 <netdb_getaddrinfo>
    if (!r) {
   d5b42:	4604      	mov	r4, r0
   d5b44:	2800      	cmp	r0, #0
   d5b46:	d144      	bne.n	d5bd2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b48:	4602      	mov	r2, r0
   d5b4a:	2101      	movs	r1, #1
   d5b4c:	6868      	ldr	r0, [r5, #4]
   d5b4e:	f7fe fe15 	bl	d477c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b52:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b54:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b56:	4622      	mov	r2, r4
   d5b58:	6868      	ldr	r0, [r5, #4]
   d5b5a:	f7fe fe0f 	bl	d477c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b5e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b60:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5b62:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b64:	2e00      	cmp	r6, #0
   d5b66:	d034      	beq.n	d5bd2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5b68:	2900      	cmp	r1, #0
   d5b6a:	d132      	bne.n	d5bd2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5b6c:	6873      	ldr	r3, [r6, #4]
   d5b6e:	2b02      	cmp	r3, #2
   d5b70:	d002      	beq.n	d5b78 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5b72:	2b0a      	cmp	r3, #10
   d5b74:	d009      	beq.n	d5b8a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5b76:	e02a      	b.n	d5bce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5b78:	f1b8 0f00 	cmp.w	r8, #0
   d5b7c:	d027      	beq.n	d5bce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5b7e:	6971      	ldr	r1, [r6, #20]
   d5b80:	4638      	mov	r0, r7
   d5b82:	3104      	adds	r1, #4
   d5b84:	f7ff fd0f 	bl	d55a6 <_ZN9IPAddressaSEPKh>
   d5b88:	e020      	b.n	d5bcc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5b8a:	f1b9 0f00 	cmp.w	r9, #0
   d5b8e:	d01e      	beq.n	d5bce <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5b90:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5b92:	2211      	movs	r2, #17
   d5b94:	a801      	add	r0, sp, #4
   d5b96:	f000 fb34 	bl	d6202 <memset>
                    a.v = 6;
   d5b9a:	2306      	movs	r3, #6
   d5b9c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ba0:	ad01      	add	r5, sp, #4
   d5ba2:	f104 0308 	add.w	r3, r4, #8
   d5ba6:	3418      	adds	r4, #24
   d5ba8:	6818      	ldr	r0, [r3, #0]
   d5baa:	6859      	ldr	r1, [r3, #4]
   d5bac:	462a      	mov	r2, r5
   d5bae:	c203      	stmia	r2!, {r0, r1}
   d5bb0:	3308      	adds	r3, #8
   d5bb2:	42a3      	cmp	r3, r4
   d5bb4:	4615      	mov	r5, r2
   d5bb6:	d1f7      	bne.n	d5ba8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5bb8:	a901      	add	r1, sp, #4
   d5bba:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5bbc:	ad07      	add	r5, sp, #28
   d5bbe:	f7ff fcd3 	bl	d5568 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5bc4:	1d3c      	adds	r4, r7, #4
   d5bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5bc8:	682b      	ldr	r3, [r5, #0]
   d5bca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5bcc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5bce:	69f6      	ldr	r6, [r6, #28]
   d5bd0:	e7c8      	b.n	d5b64 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5bd2:	9800      	ldr	r0, [sp, #0]
   d5bd4:	f7fe fc26 	bl	d4424 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5bd8:	4638      	mov	r0, r7
   d5bda:	b015      	add	sp, #84	; 0x54
   d5bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5be0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5be0:	4b02      	ldr	r3, [pc, #8]	; (d5bec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5be2:	4a03      	ldr	r2, [pc, #12]	; (d5bf0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5be4:	601a      	str	r2, [r3, #0]
   d5be6:	2200      	movs	r2, #0
   d5be8:	605a      	str	r2, [r3, #4]
   d5bea:	4770      	bx	lr
   d5bec:	2003e6e4 	.word	0x2003e6e4
   d5bf0:	000d6d0c 	.word	0x000d6d0c

000d5bf4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5bf4:	b510      	push	{r4, lr}
   d5bf6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5bf8:	480f      	ldr	r0, [pc, #60]	; (d5c38 <pinAvailable+0x44>)
   d5bfa:	f7fe fec1 	bl	d4980 <_ZN8SPIClass9isEnabledEv>
   d5bfe:	b128      	cbz	r0, d5c0c <pinAvailable+0x18>
   d5c00:	f1a4 030b 	sub.w	r3, r4, #11
   d5c04:	2b02      	cmp	r3, #2
   d5c06:	d801      	bhi.n	d5c0c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5c08:	2000      	movs	r0, #0
   d5c0a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5c0c:	f000 f876 	bl	d5cfc <_Z19__fetch_global_Wirev>
   d5c10:	f7ff fe96 	bl	d5940 <_ZN7TwoWire9isEnabledEv>
   d5c14:	b108      	cbz	r0, d5c1a <pinAvailable+0x26>
   d5c16:	2c01      	cmp	r4, #1
   d5c18:	d9f6      	bls.n	d5c08 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5c1a:	f7ff fdff 	bl	d581c <_Z22__fetch_global_Serial1v>
   d5c1e:	f7ff fdf9 	bl	d5814 <_ZN11USARTSerial9isEnabledEv>
   d5c22:	b118      	cbz	r0, d5c2c <pinAvailable+0x38>
   d5c24:	f1a4 0309 	sub.w	r3, r4, #9
   d5c28:	2b01      	cmp	r3, #1
   d5c2a:	d9ed      	bls.n	d5c08 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5c2c:	2c23      	cmp	r4, #35	; 0x23
   d5c2e:	bf8c      	ite	hi
   d5c30:	2000      	movhi	r0, #0
   d5c32:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5c34:	bd10      	pop	{r4, pc}
   d5c36:	bf00      	nop
   d5c38:	2003e6ec 	.word	0x2003e6ec

000d5c3c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c3c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5c3e:	b538      	push	{r3, r4, r5, lr}
   d5c40:	4604      	mov	r4, r0
   d5c42:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5c44:	d80a      	bhi.n	d5c5c <pinMode+0x20>
   d5c46:	29ff      	cmp	r1, #255	; 0xff
   d5c48:	d008      	beq.n	d5c5c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5c4a:	f7ff ffd3 	bl	d5bf4 <pinAvailable>
   d5c4e:	b128      	cbz	r0, d5c5c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5c50:	4629      	mov	r1, r5
   d5c52:	4620      	mov	r0, r4
}
   d5c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5c58:	f7fe bbfc 	b.w	d4454 <HAL_Pin_Mode>
   d5c5c:	bd38      	pop	{r3, r4, r5, pc}

000d5c5e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5c5e:	b538      	push	{r3, r4, r5, lr}
   d5c60:	4604      	mov	r4, r0
   d5c62:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5c64:	f7fe fbfe 	bl	d4464 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5c68:	28ff      	cmp	r0, #255	; 0xff
   d5c6a:	d010      	beq.n	d5c8e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5c6c:	2806      	cmp	r0, #6
   d5c6e:	d804      	bhi.n	d5c7a <digitalWrite+0x1c>
   d5c70:	234d      	movs	r3, #77	; 0x4d
   d5c72:	fa23 f000 	lsr.w	r0, r3, r0
   d5c76:	07c3      	lsls	r3, r0, #31
   d5c78:	d409      	bmi.n	d5c8e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	f7ff ffba 	bl	d5bf4 <pinAvailable>
   d5c80:	b128      	cbz	r0, d5c8e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5c82:	4629      	mov	r1, r5
   d5c84:	4620      	mov	r0, r4
}
   d5c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5c8a:	f7fe bbf3 	b.w	d4474 <HAL_GPIO_Write>
   d5c8e:	bd38      	pop	{r3, r4, r5, pc}

000d5c90 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5c90:	b510      	push	{r4, lr}
   d5c92:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5c94:	f7fe fbe6 	bl	d4464 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5c98:	3804      	subs	r0, #4
   d5c9a:	b2c0      	uxtb	r0, r0
   d5c9c:	2801      	cmp	r0, #1
   d5c9e:	d908      	bls.n	d5cb2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5ca0:	4620      	mov	r0, r4
   d5ca2:	f7ff ffa7 	bl	d5bf4 <pinAvailable>
   d5ca6:	b120      	cbz	r0, d5cb2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5ca8:	4620      	mov	r0, r4
}
   d5caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5cae:	f7fe bbe9 	b.w	d4484 <HAL_GPIO_Read>
}
   d5cb2:	2000      	movs	r0, #0
   d5cb4:	bd10      	pop	{r4, pc}
	...

000d5cb8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5cb8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5cba:	4c0c      	ldr	r4, [pc, #48]	; (d5cec <_GLOBAL__sub_I_SPI+0x34>)
   d5cbc:	4e0c      	ldr	r6, [pc, #48]	; (d5cf0 <_GLOBAL__sub_I_SPI+0x38>)
   d5cbe:	4d0d      	ldr	r5, [pc, #52]	; (d5cf4 <_GLOBAL__sub_I_SPI+0x3c>)
   d5cc0:	2100      	movs	r1, #0
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	f7fe fe48 	bl	d4958 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5cc8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5cca:	4c0b      	ldr	r4, [pc, #44]	; (d5cf8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5ccc:	4632      	mov	r2, r6
   d5cce:	4629      	mov	r1, r5
   d5cd0:	f000 f834 	bl	d5d3c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5cd4:	2101      	movs	r1, #1
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	f7fe fe3e 	bl	d4958 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5cdc:	4632      	mov	r2, r6
   d5cde:	4629      	mov	r1, r5
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5ce6:	f000 b829 	b.w	d5d3c <__aeabi_atexit>
   d5cea:	bf00      	nop
   d5cec:	2003e6ec 	.word	0x2003e6ec
   d5cf0:	2003e31c 	.word	0x2003e31c
   d5cf4:	000d4949 	.word	0x000d4949
   d5cf8:	2003e6fc 	.word	0x2003e6fc

000d5cfc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5cfc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5cfe:	4d0b      	ldr	r5, [pc, #44]	; (d5d2c <_Z19__fetch_global_Wirev+0x30>)
   d5d00:	6829      	ldr	r1, [r5, #0]
   d5d02:	f011 0401 	ands.w	r4, r1, #1
   d5d06:	d10f      	bne.n	d5d28 <_Z19__fetch_global_Wirev+0x2c>
   d5d08:	4628      	mov	r0, r5
   d5d0a:	f7fe f9ca 	bl	d40a2 <__cxa_guard_acquire>
   d5d0e:	b158      	cbz	r0, d5d28 <_Z19__fetch_global_Wirev+0x2c>
   d5d10:	4621      	mov	r1, r4
   d5d12:	4807      	ldr	r0, [pc, #28]	; (d5d30 <_Z19__fetch_global_Wirev+0x34>)
   d5d14:	f7ff fe02 	bl	d591c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5d18:	4628      	mov	r0, r5
   d5d1a:	f7fe f9c7 	bl	d40ac <__cxa_guard_release>
   d5d1e:	4a05      	ldr	r2, [pc, #20]	; (d5d34 <_Z19__fetch_global_Wirev+0x38>)
   d5d20:	4905      	ldr	r1, [pc, #20]	; (d5d38 <_Z19__fetch_global_Wirev+0x3c>)
   d5d22:	4803      	ldr	r0, [pc, #12]	; (d5d30 <_Z19__fetch_global_Wirev+0x34>)
   d5d24:	f000 f80a 	bl	d5d3c <__aeabi_atexit>
	return wire;
}
   d5d28:	4801      	ldr	r0, [pc, #4]	; (d5d30 <_Z19__fetch_global_Wirev+0x34>)
   d5d2a:	bd38      	pop	{r3, r4, r5, pc}
   d5d2c:	2003e710 	.word	0x2003e710
   d5d30:	2003e714 	.word	0x2003e714
   d5d34:	2003e31c 	.word	0x2003e31c
   d5d38:	000d58c5 	.word	0x000d58c5

000d5d3c <__aeabi_atexit>:
   d5d3c:	460b      	mov	r3, r1
   d5d3e:	4601      	mov	r1, r0
   d5d40:	4618      	mov	r0, r3
   d5d42:	f000 b94d 	b.w	d5fe0 <__cxa_atexit>

000d5d46 <_ZdlPvj>:
   d5d46:	f7fe b9a8 	b.w	d409a <_ZdlPv>

000d5d4a <_ZSt25__throw_bad_function_callv>:
   d5d4a:	b508      	push	{r3, lr}
   d5d4c:	f7fe fdae 	bl	d48ac <abort>

000d5d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d50:	4b18      	ldr	r3, [pc, #96]	; (d5db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d1      	lsls	r1, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b16      	ldr	r3, [pc, #88]	; (d5db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d2      	lsls	r2, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4b14      	ldr	r3, [pc, #80]	; (d5dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d6a:	681a      	ldr	r2, [r3, #0]
   d5d6c:	07d0      	lsls	r0, r2, #31
   d5d6e:	bf5c      	itt	pl
   d5d70:	2201      	movpl	r2, #1
   d5d72:	601a      	strpl	r2, [r3, #0]
   d5d74:	4b12      	ldr	r3, [pc, #72]	; (d5dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d76:	681a      	ldr	r2, [r3, #0]
   d5d78:	07d1      	lsls	r1, r2, #31
   d5d7a:	bf5c      	itt	pl
   d5d7c:	2201      	movpl	r2, #1
   d5d7e:	601a      	strpl	r2, [r3, #0]
   d5d80:	4b10      	ldr	r3, [pc, #64]	; (d5dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d82:	681a      	ldr	r2, [r3, #0]
   d5d84:	07d2      	lsls	r2, r2, #31
   d5d86:	bf5c      	itt	pl
   d5d88:	2201      	movpl	r2, #1
   d5d8a:	601a      	strpl	r2, [r3, #0]
   d5d8c:	4b0e      	ldr	r3, [pc, #56]	; (d5dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d8e:	681a      	ldr	r2, [r3, #0]
   d5d90:	07d0      	lsls	r0, r2, #31
   d5d92:	bf5c      	itt	pl
   d5d94:	2201      	movpl	r2, #1
   d5d96:	601a      	strpl	r2, [r3, #0]
   d5d98:	4b0c      	ldr	r3, [pc, #48]	; (d5dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d9a:	681a      	ldr	r2, [r3, #0]
   d5d9c:	07d1      	lsls	r1, r2, #31
   d5d9e:	bf5c      	itt	pl
   d5da0:	2201      	movpl	r2, #1
   d5da2:	601a      	strpl	r2, [r3, #0]
   d5da4:	4b0a      	ldr	r3, [pc, #40]	; (d5dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5da6:	681a      	ldr	r2, [r3, #0]
   d5da8:	07d2      	lsls	r2, r2, #31
   d5daa:	bf5c      	itt	pl
   d5dac:	2201      	movpl	r2, #1
   d5dae:	601a      	strpl	r2, [r3, #0]
   d5db0:	4770      	bx	lr
   d5db2:	bf00      	nop
   d5db4:	2003e744 	.word	0x2003e744
   d5db8:	2003e740 	.word	0x2003e740
   d5dbc:	2003e73c 	.word	0x2003e73c
   d5dc0:	2003e738 	.word	0x2003e738
   d5dc4:	2003e734 	.word	0x2003e734
   d5dc8:	2003e730 	.word	0x2003e730
   d5dcc:	2003e72c 	.word	0x2003e72c
   d5dd0:	2003e728 	.word	0x2003e728

000d5dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5dd4:	4b24      	ldr	r3, [pc, #144]	; (d5e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5dd6:	681a      	ldr	r2, [r3, #0]
   d5dd8:	07d0      	lsls	r0, r2, #31
   d5dda:	bf5c      	itt	pl
   d5ddc:	2201      	movpl	r2, #1
   d5dde:	601a      	strpl	r2, [r3, #0]
   d5de0:	4b22      	ldr	r3, [pc, #136]	; (d5e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5de2:	681a      	ldr	r2, [r3, #0]
   d5de4:	07d1      	lsls	r1, r2, #31
   d5de6:	bf5c      	itt	pl
   d5de8:	2201      	movpl	r2, #1
   d5dea:	601a      	strpl	r2, [r3, #0]
   d5dec:	4b20      	ldr	r3, [pc, #128]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5dee:	681a      	ldr	r2, [r3, #0]
   d5df0:	07d2      	lsls	r2, r2, #31
   d5df2:	bf5c      	itt	pl
   d5df4:	2201      	movpl	r2, #1
   d5df6:	601a      	strpl	r2, [r3, #0]
   d5df8:	4b1e      	ldr	r3, [pc, #120]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5dfa:	681a      	ldr	r2, [r3, #0]
   d5dfc:	07d0      	lsls	r0, r2, #31
   d5dfe:	bf5c      	itt	pl
   d5e00:	2201      	movpl	r2, #1
   d5e02:	601a      	strpl	r2, [r3, #0]
   d5e04:	4b1c      	ldr	r3, [pc, #112]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5e06:	681a      	ldr	r2, [r3, #0]
   d5e08:	07d1      	lsls	r1, r2, #31
   d5e0a:	bf5c      	itt	pl
   d5e0c:	2201      	movpl	r2, #1
   d5e0e:	601a      	strpl	r2, [r3, #0]
   d5e10:	4b1a      	ldr	r3, [pc, #104]	; (d5e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5e12:	681a      	ldr	r2, [r3, #0]
   d5e14:	07d2      	lsls	r2, r2, #31
   d5e16:	bf5c      	itt	pl
   d5e18:	2201      	movpl	r2, #1
   d5e1a:	601a      	strpl	r2, [r3, #0]
   d5e1c:	4b18      	ldr	r3, [pc, #96]	; (d5e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5e1e:	681a      	ldr	r2, [r3, #0]
   d5e20:	07d0      	lsls	r0, r2, #31
   d5e22:	bf5c      	itt	pl
   d5e24:	2201      	movpl	r2, #1
   d5e26:	601a      	strpl	r2, [r3, #0]
   d5e28:	4b16      	ldr	r3, [pc, #88]	; (d5e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5e2a:	681a      	ldr	r2, [r3, #0]
   d5e2c:	07d1      	lsls	r1, r2, #31
   d5e2e:	bf5c      	itt	pl
   d5e30:	2201      	movpl	r2, #1
   d5e32:	601a      	strpl	r2, [r3, #0]
   d5e34:	4b14      	ldr	r3, [pc, #80]	; (d5e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5e36:	681a      	ldr	r2, [r3, #0]
   d5e38:	07d2      	lsls	r2, r2, #31
   d5e3a:	bf5c      	itt	pl
   d5e3c:	2201      	movpl	r2, #1
   d5e3e:	601a      	strpl	r2, [r3, #0]
   d5e40:	4b12      	ldr	r3, [pc, #72]	; (d5e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5e42:	681a      	ldr	r2, [r3, #0]
   d5e44:	07d0      	lsls	r0, r2, #31
   d5e46:	bf5c      	itt	pl
   d5e48:	2201      	movpl	r2, #1
   d5e4a:	601a      	strpl	r2, [r3, #0]
   d5e4c:	4b10      	ldr	r3, [pc, #64]	; (d5e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5e4e:	681a      	ldr	r2, [r3, #0]
   d5e50:	07d1      	lsls	r1, r2, #31
   d5e52:	bf5c      	itt	pl
   d5e54:	2201      	movpl	r2, #1
   d5e56:	601a      	strpl	r2, [r3, #0]
   d5e58:	4b0e      	ldr	r3, [pc, #56]	; (d5e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5e5a:	681a      	ldr	r2, [r3, #0]
   d5e5c:	07d2      	lsls	r2, r2, #31
   d5e5e:	bf5c      	itt	pl
   d5e60:	2201      	movpl	r2, #1
   d5e62:	601a      	strpl	r2, [r3, #0]
   d5e64:	4770      	bx	lr
   d5e66:	bf00      	nop
   d5e68:	2003e774 	.word	0x2003e774
   d5e6c:	2003e770 	.word	0x2003e770
   d5e70:	2003e76c 	.word	0x2003e76c
   d5e74:	2003e768 	.word	0x2003e768
   d5e78:	2003e764 	.word	0x2003e764
   d5e7c:	2003e760 	.word	0x2003e760
   d5e80:	2003e75c 	.word	0x2003e75c
   d5e84:	2003e758 	.word	0x2003e758
   d5e88:	2003e754 	.word	0x2003e754
   d5e8c:	2003e750 	.word	0x2003e750
   d5e90:	2003e74c 	.word	0x2003e74c
   d5e94:	2003e748 	.word	0x2003e748

000d5e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5e98:	4b24      	ldr	r3, [pc, #144]	; (d5f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5e9a:	681a      	ldr	r2, [r3, #0]
   d5e9c:	07d0      	lsls	r0, r2, #31
   d5e9e:	bf5c      	itt	pl
   d5ea0:	2201      	movpl	r2, #1
   d5ea2:	601a      	strpl	r2, [r3, #0]
   d5ea4:	4b22      	ldr	r3, [pc, #136]	; (d5f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5ea6:	681a      	ldr	r2, [r3, #0]
   d5ea8:	07d1      	lsls	r1, r2, #31
   d5eaa:	bf5c      	itt	pl
   d5eac:	2201      	movpl	r2, #1
   d5eae:	601a      	strpl	r2, [r3, #0]
   d5eb0:	4b20      	ldr	r3, [pc, #128]	; (d5f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5eb2:	681a      	ldr	r2, [r3, #0]
   d5eb4:	07d2      	lsls	r2, r2, #31
   d5eb6:	bf5c      	itt	pl
   d5eb8:	2201      	movpl	r2, #1
   d5eba:	601a      	strpl	r2, [r3, #0]
   d5ebc:	4b1e      	ldr	r3, [pc, #120]	; (d5f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5ebe:	681a      	ldr	r2, [r3, #0]
   d5ec0:	07d0      	lsls	r0, r2, #31
   d5ec2:	bf5c      	itt	pl
   d5ec4:	2201      	movpl	r2, #1
   d5ec6:	601a      	strpl	r2, [r3, #0]
   d5ec8:	4b1c      	ldr	r3, [pc, #112]	; (d5f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5eca:	681a      	ldr	r2, [r3, #0]
   d5ecc:	07d1      	lsls	r1, r2, #31
   d5ece:	bf5c      	itt	pl
   d5ed0:	2201      	movpl	r2, #1
   d5ed2:	601a      	strpl	r2, [r3, #0]
   d5ed4:	4b1a      	ldr	r3, [pc, #104]	; (d5f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5ed6:	681a      	ldr	r2, [r3, #0]
   d5ed8:	07d2      	lsls	r2, r2, #31
   d5eda:	bf5c      	itt	pl
   d5edc:	2201      	movpl	r2, #1
   d5ede:	601a      	strpl	r2, [r3, #0]
   d5ee0:	4b18      	ldr	r3, [pc, #96]	; (d5f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5ee2:	681a      	ldr	r2, [r3, #0]
   d5ee4:	07d0      	lsls	r0, r2, #31
   d5ee6:	bf5c      	itt	pl
   d5ee8:	2201      	movpl	r2, #1
   d5eea:	601a      	strpl	r2, [r3, #0]
   d5eec:	4b16      	ldr	r3, [pc, #88]	; (d5f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5eee:	681a      	ldr	r2, [r3, #0]
   d5ef0:	07d1      	lsls	r1, r2, #31
   d5ef2:	bf5c      	itt	pl
   d5ef4:	2201      	movpl	r2, #1
   d5ef6:	601a      	strpl	r2, [r3, #0]
   d5ef8:	4b14      	ldr	r3, [pc, #80]	; (d5f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5efa:	681a      	ldr	r2, [r3, #0]
   d5efc:	07d2      	lsls	r2, r2, #31
   d5efe:	bf5c      	itt	pl
   d5f00:	2201      	movpl	r2, #1
   d5f02:	601a      	strpl	r2, [r3, #0]
   d5f04:	4b12      	ldr	r3, [pc, #72]	; (d5f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5f06:	681a      	ldr	r2, [r3, #0]
   d5f08:	07d0      	lsls	r0, r2, #31
   d5f0a:	bf5c      	itt	pl
   d5f0c:	2201      	movpl	r2, #1
   d5f0e:	601a      	strpl	r2, [r3, #0]
   d5f10:	4b10      	ldr	r3, [pc, #64]	; (d5f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5f12:	681a      	ldr	r2, [r3, #0]
   d5f14:	07d1      	lsls	r1, r2, #31
   d5f16:	bf5c      	itt	pl
   d5f18:	2201      	movpl	r2, #1
   d5f1a:	601a      	strpl	r2, [r3, #0]
   d5f1c:	4b0e      	ldr	r3, [pc, #56]	; (d5f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5f1e:	681a      	ldr	r2, [r3, #0]
   d5f20:	07d2      	lsls	r2, r2, #31
   d5f22:	bf5c      	itt	pl
   d5f24:	2201      	movpl	r2, #1
   d5f26:	601a      	strpl	r2, [r3, #0]
   d5f28:	4770      	bx	lr
   d5f2a:	bf00      	nop
   d5f2c:	2003e7a4 	.word	0x2003e7a4
   d5f30:	2003e7a0 	.word	0x2003e7a0
   d5f34:	2003e79c 	.word	0x2003e79c
   d5f38:	2003e798 	.word	0x2003e798
   d5f3c:	2003e794 	.word	0x2003e794
   d5f40:	2003e790 	.word	0x2003e790
   d5f44:	2003e78c 	.word	0x2003e78c
   d5f48:	2003e788 	.word	0x2003e788
   d5f4c:	2003e784 	.word	0x2003e784
   d5f50:	2003e780 	.word	0x2003e780
   d5f54:	2003e77c 	.word	0x2003e77c
   d5f58:	2003e778 	.word	0x2003e778

000d5f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f5c:	4b18      	ldr	r3, [pc, #96]	; (d5fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f5e:	681a      	ldr	r2, [r3, #0]
   d5f60:	07d1      	lsls	r1, r2, #31
   d5f62:	bf5c      	itt	pl
   d5f64:	2201      	movpl	r2, #1
   d5f66:	601a      	strpl	r2, [r3, #0]
   d5f68:	4b16      	ldr	r3, [pc, #88]	; (d5fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f6a:	681a      	ldr	r2, [r3, #0]
   d5f6c:	07d2      	lsls	r2, r2, #31
   d5f6e:	bf5c      	itt	pl
   d5f70:	2201      	movpl	r2, #1
   d5f72:	601a      	strpl	r2, [r3, #0]
   d5f74:	4b14      	ldr	r3, [pc, #80]	; (d5fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f76:	681a      	ldr	r2, [r3, #0]
   d5f78:	07d0      	lsls	r0, r2, #31
   d5f7a:	bf5c      	itt	pl
   d5f7c:	2201      	movpl	r2, #1
   d5f7e:	601a      	strpl	r2, [r3, #0]
   d5f80:	4b12      	ldr	r3, [pc, #72]	; (d5fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d1      	lsls	r1, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b10      	ldr	r3, [pc, #64]	; (d5fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d2      	lsls	r2, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b0e      	ldr	r3, [pc, #56]	; (d5fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d0      	lsls	r0, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b0c      	ldr	r3, [pc, #48]	; (d5fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d1      	lsls	r1, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b0a      	ldr	r3, [pc, #40]	; (d5fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d2      	lsls	r2, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4770      	bx	lr
   d5fbe:	bf00      	nop
   d5fc0:	2003e7c4 	.word	0x2003e7c4
   d5fc4:	2003e7c0 	.word	0x2003e7c0
   d5fc8:	2003e7bc 	.word	0x2003e7bc
   d5fcc:	2003e7b8 	.word	0x2003e7b8
   d5fd0:	2003e7b4 	.word	0x2003e7b4
   d5fd4:	2003e7b0 	.word	0x2003e7b0
   d5fd8:	2003e7ac 	.word	0x2003e7ac
   d5fdc:	2003e7a8 	.word	0x2003e7a8

000d5fe0 <__cxa_atexit>:
   d5fe0:	b510      	push	{r4, lr}
   d5fe2:	4c05      	ldr	r4, [pc, #20]	; (d5ff8 <__cxa_atexit+0x18>)
   d5fe4:	4613      	mov	r3, r2
   d5fe6:	b12c      	cbz	r4, d5ff4 <__cxa_atexit+0x14>
   d5fe8:	460a      	mov	r2, r1
   d5fea:	4601      	mov	r1, r0
   d5fec:	2002      	movs	r0, #2
   d5fee:	f3af 8000 	nop.w
   d5ff2:	bd10      	pop	{r4, pc}
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	bd10      	pop	{r4, pc}
   d5ff8:	00000000 	.word	0x00000000

000d5ffc <localtime>:
   d5ffc:	b538      	push	{r3, r4, r5, lr}
   d5ffe:	4b07      	ldr	r3, [pc, #28]	; (d601c <localtime+0x20>)
   d6000:	681c      	ldr	r4, [r3, #0]
   d6002:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6004:	4605      	mov	r5, r0
   d6006:	b91b      	cbnz	r3, d6010 <localtime+0x14>
   d6008:	2024      	movs	r0, #36	; 0x24
   d600a:	f7fe fc2f 	bl	d486c <malloc>
   d600e:	63e0      	str	r0, [r4, #60]	; 0x3c
   d6010:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d6012:	4628      	mov	r0, r5
   d6014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6018:	f000 b802 	b.w	d6020 <localtime_r>
   d601c:	2003e2cc 	.word	0x2003e2cc

000d6020 <localtime_r>:
   d6020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6024:	460c      	mov	r4, r1
   d6026:	4680      	mov	r8, r0
   d6028:	f000 fc72 	bl	d6910 <__gettzinfo>
   d602c:	4621      	mov	r1, r4
   d602e:	4607      	mov	r7, r0
   d6030:	4640      	mov	r0, r8
   d6032:	f000 fc71 	bl	d6918 <gmtime_r>
   d6036:	6946      	ldr	r6, [r0, #20]
   d6038:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d603c:	07b3      	lsls	r3, r6, #30
   d603e:	4604      	mov	r4, r0
   d6040:	d105      	bne.n	d604e <localtime_r+0x2e>
   d6042:	2264      	movs	r2, #100	; 0x64
   d6044:	fb96 f3f2 	sdiv	r3, r6, r2
   d6048:	fb02 6313 	mls	r3, r2, r3, r6
   d604c:	b94b      	cbnz	r3, d6062 <localtime_r+0x42>
   d604e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d6052:	fb96 f3f5 	sdiv	r3, r6, r5
   d6056:	fb05 6513 	mls	r5, r5, r3, r6
   d605a:	fab5 f385 	clz	r3, r5
   d605e:	095b      	lsrs	r3, r3, #5
   d6060:	e000      	b.n	d6064 <localtime_r+0x44>
   d6062:	2301      	movs	r3, #1
   d6064:	4a5f      	ldr	r2, [pc, #380]	; (d61e4 <localtime_r+0x1c4>)
   d6066:	2530      	movs	r5, #48	; 0x30
   d6068:	fb05 2503 	mla	r5, r5, r3, r2
   d606c:	f000 fa84 	bl	d6578 <__tz_lock>
   d6070:	f000 fa84 	bl	d657c <_tzset_unlocked>
   d6074:	4b5c      	ldr	r3, [pc, #368]	; (d61e8 <localtime_r+0x1c8>)
   d6076:	681b      	ldr	r3, [r3, #0]
   d6078:	b1f3      	cbz	r3, d60b8 <localtime_r+0x98>
   d607a:	687b      	ldr	r3, [r7, #4]
   d607c:	429e      	cmp	r6, r3
   d607e:	d105      	bne.n	d608c <localtime_r+0x6c>
   d6080:	6839      	ldr	r1, [r7, #0]
   d6082:	f8d8 3000 	ldr.w	r3, [r8]
   d6086:	69fa      	ldr	r2, [r7, #28]
   d6088:	b941      	cbnz	r1, d609c <localtime_r+0x7c>
   d608a:	e00a      	b.n	d60a2 <localtime_r+0x82>
   d608c:	4630      	mov	r0, r6
   d608e:	f000 f9cb 	bl	d6428 <__tzcalc_limits>
   d6092:	2800      	cmp	r0, #0
   d6094:	d1f4      	bne.n	d6080 <localtime_r+0x60>
   d6096:	f04f 33ff 	mov.w	r3, #4294967295
   d609a:	e00d      	b.n	d60b8 <localtime_r+0x98>
   d609c:	4293      	cmp	r3, r2
   d609e:	db08      	blt.n	d60b2 <localtime_r+0x92>
   d60a0:	e001      	b.n	d60a6 <localtime_r+0x86>
   d60a2:	4293      	cmp	r3, r2
   d60a4:	da07      	bge.n	d60b6 <localtime_r+0x96>
   d60a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d60a8:	4293      	cmp	r3, r2
   d60aa:	bfac      	ite	ge
   d60ac:	2300      	movge	r3, #0
   d60ae:	2301      	movlt	r3, #1
   d60b0:	e002      	b.n	d60b8 <localtime_r+0x98>
   d60b2:	2300      	movs	r3, #0
   d60b4:	e000      	b.n	d60b8 <localtime_r+0x98>
   d60b6:	2301      	movs	r3, #1
   d60b8:	6223      	str	r3, [r4, #32]
   d60ba:	6a23      	ldr	r3, [r4, #32]
   d60bc:	2b01      	cmp	r3, #1
   d60be:	bf0c      	ite	eq
   d60c0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d60c2:	6a39      	ldrne	r1, [r7, #32]
   d60c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d60c8:	203c      	movs	r0, #60	; 0x3c
   d60ca:	fb91 f6f3 	sdiv	r6, r1, r3
   d60ce:	fb03 1316 	mls	r3, r3, r6, r1
   d60d2:	6861      	ldr	r1, [r4, #4]
   d60d4:	fb93 f2f0 	sdiv	r2, r3, r0
   d60d8:	fb00 3012 	mls	r0, r0, r2, r3
   d60dc:	6823      	ldr	r3, [r4, #0]
   d60de:	1a89      	subs	r1, r1, r2
   d60e0:	68a2      	ldr	r2, [r4, #8]
   d60e2:	6061      	str	r1, [r4, #4]
   d60e4:	1a1b      	subs	r3, r3, r0
   d60e6:	1b92      	subs	r2, r2, r6
   d60e8:	2b3b      	cmp	r3, #59	; 0x3b
   d60ea:	6023      	str	r3, [r4, #0]
   d60ec:	60a2      	str	r2, [r4, #8]
   d60ee:	dd03      	ble.n	d60f8 <localtime_r+0xd8>
   d60f0:	3101      	adds	r1, #1
   d60f2:	6061      	str	r1, [r4, #4]
   d60f4:	3b3c      	subs	r3, #60	; 0x3c
   d60f6:	e004      	b.n	d6102 <localtime_r+0xe2>
   d60f8:	2b00      	cmp	r3, #0
   d60fa:	da03      	bge.n	d6104 <localtime_r+0xe4>
   d60fc:	3901      	subs	r1, #1
   d60fe:	6061      	str	r1, [r4, #4]
   d6100:	333c      	adds	r3, #60	; 0x3c
   d6102:	6023      	str	r3, [r4, #0]
   d6104:	6863      	ldr	r3, [r4, #4]
   d6106:	2b3b      	cmp	r3, #59	; 0x3b
   d6108:	dd03      	ble.n	d6112 <localtime_r+0xf2>
   d610a:	3201      	adds	r2, #1
   d610c:	60a2      	str	r2, [r4, #8]
   d610e:	3b3c      	subs	r3, #60	; 0x3c
   d6110:	e004      	b.n	d611c <localtime_r+0xfc>
   d6112:	2b00      	cmp	r3, #0
   d6114:	da03      	bge.n	d611e <localtime_r+0xfe>
   d6116:	3a01      	subs	r2, #1
   d6118:	60a2      	str	r2, [r4, #8]
   d611a:	333c      	adds	r3, #60	; 0x3c
   d611c:	6063      	str	r3, [r4, #4]
   d611e:	68a3      	ldr	r3, [r4, #8]
   d6120:	2b17      	cmp	r3, #23
   d6122:	dd22      	ble.n	d616a <localtime_r+0x14a>
   d6124:	69e2      	ldr	r2, [r4, #28]
   d6126:	3201      	adds	r2, #1
   d6128:	61e2      	str	r2, [r4, #28]
   d612a:	69a2      	ldr	r2, [r4, #24]
   d612c:	3201      	adds	r2, #1
   d612e:	2a06      	cmp	r2, #6
   d6130:	bfc8      	it	gt
   d6132:	2200      	movgt	r2, #0
   d6134:	61a2      	str	r2, [r4, #24]
   d6136:	68e2      	ldr	r2, [r4, #12]
   d6138:	3b18      	subs	r3, #24
   d613a:	3201      	adds	r2, #1
   d613c:	60a3      	str	r3, [r4, #8]
   d613e:	6923      	ldr	r3, [r4, #16]
   d6140:	60e2      	str	r2, [r4, #12]
   d6142:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d6146:	428a      	cmp	r2, r1
   d6148:	dd46      	ble.n	d61d8 <localtime_r+0x1b8>
   d614a:	3301      	adds	r3, #1
   d614c:	2b0c      	cmp	r3, #12
   d614e:	bf0c      	ite	eq
   d6150:	6963      	ldreq	r3, [r4, #20]
   d6152:	6123      	strne	r3, [r4, #16]
   d6154:	eba2 0201 	sub.w	r2, r2, r1
   d6158:	60e2      	str	r2, [r4, #12]
   d615a:	bf01      	itttt	eq
   d615c:	3301      	addeq	r3, #1
   d615e:	2200      	moveq	r2, #0
   d6160:	6122      	streq	r2, [r4, #16]
   d6162:	6163      	streq	r3, [r4, #20]
   d6164:	bf08      	it	eq
   d6166:	61e2      	streq	r2, [r4, #28]
   d6168:	e036      	b.n	d61d8 <localtime_r+0x1b8>
   d616a:	2b00      	cmp	r3, #0
   d616c:	da34      	bge.n	d61d8 <localtime_r+0x1b8>
   d616e:	69e2      	ldr	r2, [r4, #28]
   d6170:	3a01      	subs	r2, #1
   d6172:	61e2      	str	r2, [r4, #28]
   d6174:	69a2      	ldr	r2, [r4, #24]
   d6176:	3a01      	subs	r2, #1
   d6178:	bf48      	it	mi
   d617a:	2206      	movmi	r2, #6
   d617c:	61a2      	str	r2, [r4, #24]
   d617e:	68e2      	ldr	r2, [r4, #12]
   d6180:	3318      	adds	r3, #24
   d6182:	3a01      	subs	r2, #1
   d6184:	60e2      	str	r2, [r4, #12]
   d6186:	60a3      	str	r3, [r4, #8]
   d6188:	bb32      	cbnz	r2, d61d8 <localtime_r+0x1b8>
   d618a:	6923      	ldr	r3, [r4, #16]
   d618c:	3b01      	subs	r3, #1
   d618e:	d401      	bmi.n	d6194 <localtime_r+0x174>
   d6190:	6123      	str	r3, [r4, #16]
   d6192:	e01d      	b.n	d61d0 <localtime_r+0x1b0>
   d6194:	230b      	movs	r3, #11
   d6196:	6123      	str	r3, [r4, #16]
   d6198:	6963      	ldr	r3, [r4, #20]
   d619a:	1e5a      	subs	r2, r3, #1
   d619c:	f012 0f03 	tst.w	r2, #3
   d61a0:	6162      	str	r2, [r4, #20]
   d61a2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d61a6:	d105      	bne.n	d61b4 <localtime_r+0x194>
   d61a8:	2164      	movs	r1, #100	; 0x64
   d61aa:	fb93 f2f1 	sdiv	r2, r3, r1
   d61ae:	fb01 3212 	mls	r2, r1, r2, r3
   d61b2:	b94a      	cbnz	r2, d61c8 <localtime_r+0x1a8>
   d61b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d61b8:	fb93 f2f1 	sdiv	r2, r3, r1
   d61bc:	fb01 3312 	mls	r3, r1, r2, r3
   d61c0:	fab3 f383 	clz	r3, r3
   d61c4:	095b      	lsrs	r3, r3, #5
   d61c6:	e000      	b.n	d61ca <localtime_r+0x1aa>
   d61c8:	2301      	movs	r3, #1
   d61ca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d61ce:	61e3      	str	r3, [r4, #28]
   d61d0:	6923      	ldr	r3, [r4, #16]
   d61d2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d61d6:	60e3      	str	r3, [r4, #12]
   d61d8:	f000 f9cf 	bl	d657a <__tz_unlock>
   d61dc:	4620      	mov	r0, r4
   d61de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d61e2:	bf00      	nop
   d61e4:	000d6ea0 	.word	0x000d6ea0
   d61e8:	2003e7e4 	.word	0x2003e7e4

000d61ec <memcpy>:
   d61ec:	b510      	push	{r4, lr}
   d61ee:	1e43      	subs	r3, r0, #1
   d61f0:	440a      	add	r2, r1
   d61f2:	4291      	cmp	r1, r2
   d61f4:	d004      	beq.n	d6200 <memcpy+0x14>
   d61f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d61fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d61fe:	e7f8      	b.n	d61f2 <memcpy+0x6>
   d6200:	bd10      	pop	{r4, pc}

000d6202 <memset>:
   d6202:	4402      	add	r2, r0
   d6204:	4603      	mov	r3, r0
   d6206:	4293      	cmp	r3, r2
   d6208:	d002      	beq.n	d6210 <memset+0xe>
   d620a:	f803 1b01 	strb.w	r1, [r3], #1
   d620e:	e7fa      	b.n	d6206 <memset+0x4>
   d6210:	4770      	bx	lr
	...

000d6214 <srand>:
   d6214:	b538      	push	{r3, r4, r5, lr}
   d6216:	4b12      	ldr	r3, [pc, #72]	; (d6260 <srand+0x4c>)
   d6218:	681c      	ldr	r4, [r3, #0]
   d621a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d621c:	4605      	mov	r5, r0
   d621e:	b9d3      	cbnz	r3, d6256 <srand+0x42>
   d6220:	2018      	movs	r0, #24
   d6222:	f7fe fb23 	bl	d486c <malloc>
   d6226:	f243 330e 	movw	r3, #13070	; 0x330e
   d622a:	63a0      	str	r0, [r4, #56]	; 0x38
   d622c:	8003      	strh	r3, [r0, #0]
   d622e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6232:	8043      	strh	r3, [r0, #2]
   d6234:	f241 2334 	movw	r3, #4660	; 0x1234
   d6238:	8083      	strh	r3, [r0, #4]
   d623a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d623e:	80c3      	strh	r3, [r0, #6]
   d6240:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6244:	8103      	strh	r3, [r0, #8]
   d6246:	2305      	movs	r3, #5
   d6248:	8143      	strh	r3, [r0, #10]
   d624a:	230b      	movs	r3, #11
   d624c:	8183      	strh	r3, [r0, #12]
   d624e:	2201      	movs	r2, #1
   d6250:	2300      	movs	r3, #0
   d6252:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6256:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6258:	2200      	movs	r2, #0
   d625a:	611d      	str	r5, [r3, #16]
   d625c:	615a      	str	r2, [r3, #20]
   d625e:	bd38      	pop	{r3, r4, r5, pc}
   d6260:	2003e2cc 	.word	0x2003e2cc

000d6264 <strcat>:
   d6264:	b510      	push	{r4, lr}
   d6266:	4602      	mov	r2, r0
   d6268:	4613      	mov	r3, r2
   d626a:	3201      	adds	r2, #1
   d626c:	781c      	ldrb	r4, [r3, #0]
   d626e:	2c00      	cmp	r4, #0
   d6270:	d1fa      	bne.n	d6268 <strcat+0x4>
   d6272:	3b01      	subs	r3, #1
   d6274:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6278:	f803 2f01 	strb.w	r2, [r3, #1]!
   d627c:	2a00      	cmp	r2, #0
   d627e:	d1f9      	bne.n	d6274 <strcat+0x10>
   d6280:	bd10      	pop	{r4, pc}

000d6282 <strcmp>:
   d6282:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6286:	f811 3b01 	ldrb.w	r3, [r1], #1
   d628a:	2a01      	cmp	r2, #1
   d628c:	bf28      	it	cs
   d628e:	429a      	cmpcs	r2, r3
   d6290:	d0f7      	beq.n	d6282 <strcmp>
   d6292:	1ad0      	subs	r0, r2, r3
   d6294:	4770      	bx	lr

000d6296 <strcpy>:
   d6296:	4603      	mov	r3, r0
   d6298:	f811 2b01 	ldrb.w	r2, [r1], #1
   d629c:	f803 2b01 	strb.w	r2, [r3], #1
   d62a0:	2a00      	cmp	r2, #0
   d62a2:	d1f9      	bne.n	d6298 <strcpy+0x2>
   d62a4:	4770      	bx	lr
	...

000d62a8 <strdup>:
   d62a8:	4b02      	ldr	r3, [pc, #8]	; (d62b4 <strdup+0xc>)
   d62aa:	4601      	mov	r1, r0
   d62ac:	6818      	ldr	r0, [r3, #0]
   d62ae:	f000 b803 	b.w	d62b8 <_strdup_r>
   d62b2:	bf00      	nop
   d62b4:	2003e2cc 	.word	0x2003e2cc

000d62b8 <_strdup_r>:
   d62b8:	b570      	push	{r4, r5, r6, lr}
   d62ba:	4606      	mov	r6, r0
   d62bc:	4608      	mov	r0, r1
   d62be:	460c      	mov	r4, r1
   d62c0:	f000 f80d 	bl	d62de <strlen>
   d62c4:	1c45      	adds	r5, r0, #1
   d62c6:	4629      	mov	r1, r5
   d62c8:	4630      	mov	r0, r6
   d62ca:	f7fe faf7 	bl	d48bc <_malloc_r>
   d62ce:	4606      	mov	r6, r0
   d62d0:	b118      	cbz	r0, d62da <_strdup_r+0x22>
   d62d2:	462a      	mov	r2, r5
   d62d4:	4621      	mov	r1, r4
   d62d6:	f7ff ff89 	bl	d61ec <memcpy>
   d62da:	4630      	mov	r0, r6
   d62dc:	bd70      	pop	{r4, r5, r6, pc}

000d62de <strlen>:
   d62de:	4603      	mov	r3, r0
   d62e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d62e4:	2a00      	cmp	r2, #0
   d62e6:	d1fb      	bne.n	d62e0 <strlen+0x2>
   d62e8:	1a18      	subs	r0, r3, r0
   d62ea:	3801      	subs	r0, #1
   d62ec:	4770      	bx	lr

000d62ee <strncmp>:
   d62ee:	b530      	push	{r4, r5, lr}
   d62f0:	b182      	cbz	r2, d6314 <strncmp+0x26>
   d62f2:	1e45      	subs	r5, r0, #1
   d62f4:	3901      	subs	r1, #1
   d62f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d62fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d62fe:	42a3      	cmp	r3, r4
   d6300:	d106      	bne.n	d6310 <strncmp+0x22>
   d6302:	43ec      	mvns	r4, r5
   d6304:	4414      	add	r4, r2
   d6306:	42e0      	cmn	r0, r4
   d6308:	d001      	beq.n	d630e <strncmp+0x20>
   d630a:	2b00      	cmp	r3, #0
   d630c:	d1f3      	bne.n	d62f6 <strncmp+0x8>
   d630e:	461c      	mov	r4, r3
   d6310:	1b18      	subs	r0, r3, r4
   d6312:	bd30      	pop	{r4, r5, pc}
   d6314:	4610      	mov	r0, r2
   d6316:	bd30      	pop	{r4, r5, pc}

000d6318 <_strtoul_r>:
   d6318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d631c:	4680      	mov	r8, r0
   d631e:	483c      	ldr	r0, [pc, #240]	; (d6410 <_strtoul_r+0xf8>)
   d6320:	f8d0 9000 	ldr.w	r9, [r0]
   d6324:	460e      	mov	r6, r1
   d6326:	4635      	mov	r5, r6
   d6328:	f815 4b01 	ldrb.w	r4, [r5], #1
   d632c:	eb09 0004 	add.w	r0, r9, r4
   d6330:	7840      	ldrb	r0, [r0, #1]
   d6332:	f000 0008 	and.w	r0, r0, #8
   d6336:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d633a:	b108      	cbz	r0, d6340 <_strtoul_r+0x28>
   d633c:	462e      	mov	r6, r5
   d633e:	e7f2      	b.n	d6326 <_strtoul_r+0xe>
   d6340:	2c2d      	cmp	r4, #45	; 0x2d
   d6342:	d103      	bne.n	d634c <_strtoul_r+0x34>
   d6344:	1cb5      	adds	r5, r6, #2
   d6346:	7874      	ldrb	r4, [r6, #1]
   d6348:	2701      	movs	r7, #1
   d634a:	e003      	b.n	d6354 <_strtoul_r+0x3c>
   d634c:	2c2b      	cmp	r4, #43	; 0x2b
   d634e:	bf04      	itt	eq
   d6350:	7874      	ldrbeq	r4, [r6, #1]
   d6352:	1cb5      	addeq	r5, r6, #2
   d6354:	b113      	cbz	r3, d635c <_strtoul_r+0x44>
   d6356:	2b10      	cmp	r3, #16
   d6358:	d10a      	bne.n	d6370 <_strtoul_r+0x58>
   d635a:	e053      	b.n	d6404 <_strtoul_r+0xec>
   d635c:	2c30      	cmp	r4, #48	; 0x30
   d635e:	d14f      	bne.n	d6400 <_strtoul_r+0xe8>
   d6360:	7828      	ldrb	r0, [r5, #0]
   d6362:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d6366:	2858      	cmp	r0, #88	; 0x58
   d6368:	d145      	bne.n	d63f6 <_strtoul_r+0xde>
   d636a:	786c      	ldrb	r4, [r5, #1]
   d636c:	2310      	movs	r3, #16
   d636e:	3502      	adds	r5, #2
   d6370:	f04f 3cff 	mov.w	ip, #4294967295
   d6374:	2600      	movs	r6, #0
   d6376:	fbbc fcf3 	udiv	ip, ip, r3
   d637a:	fb03 fa0c 	mul.w	sl, r3, ip
   d637e:	ea6f 0a0a 	mvn.w	sl, sl
   d6382:	4630      	mov	r0, r6
   d6384:	eb09 0e04 	add.w	lr, r9, r4
   d6388:	f89e e001 	ldrb.w	lr, [lr, #1]
   d638c:	f01e 0f04 	tst.w	lr, #4
   d6390:	d001      	beq.n	d6396 <_strtoul_r+0x7e>
   d6392:	3c30      	subs	r4, #48	; 0x30
   d6394:	e00b      	b.n	d63ae <_strtoul_r+0x96>
   d6396:	f01e 0e03 	ands.w	lr, lr, #3
   d639a:	d01a      	beq.n	d63d2 <_strtoul_r+0xba>
   d639c:	f1be 0f01 	cmp.w	lr, #1
   d63a0:	bf0c      	ite	eq
   d63a2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d63a6:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d63aa:	ebce 0404 	rsb	r4, lr, r4
   d63ae:	42a3      	cmp	r3, r4
   d63b0:	dd0f      	ble.n	d63d2 <_strtoul_r+0xba>
   d63b2:	2e00      	cmp	r6, #0
   d63b4:	db08      	blt.n	d63c8 <_strtoul_r+0xb0>
   d63b6:	4560      	cmp	r0, ip
   d63b8:	d806      	bhi.n	d63c8 <_strtoul_r+0xb0>
   d63ba:	d101      	bne.n	d63c0 <_strtoul_r+0xa8>
   d63bc:	4554      	cmp	r4, sl
   d63be:	dc03      	bgt.n	d63c8 <_strtoul_r+0xb0>
   d63c0:	fb03 4000 	mla	r0, r3, r0, r4
   d63c4:	2601      	movs	r6, #1
   d63c6:	e001      	b.n	d63cc <_strtoul_r+0xb4>
   d63c8:	f04f 36ff 	mov.w	r6, #4294967295
   d63cc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d63d0:	e7d8      	b.n	d6384 <_strtoul_r+0x6c>
   d63d2:	2e00      	cmp	r6, #0
   d63d4:	da07      	bge.n	d63e6 <_strtoul_r+0xce>
   d63d6:	2322      	movs	r3, #34	; 0x22
   d63d8:	f8c8 3000 	str.w	r3, [r8]
   d63dc:	f04f 30ff 	mov.w	r0, #4294967295
   d63e0:	b92a      	cbnz	r2, d63ee <_strtoul_r+0xd6>
   d63e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d63e6:	b107      	cbz	r7, d63ea <_strtoul_r+0xd2>
   d63e8:	4240      	negs	r0, r0
   d63ea:	b172      	cbz	r2, d640a <_strtoul_r+0xf2>
   d63ec:	b106      	cbz	r6, d63f0 <_strtoul_r+0xd8>
   d63ee:	1e69      	subs	r1, r5, #1
   d63f0:	6011      	str	r1, [r2, #0]
   d63f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d63f6:	2430      	movs	r4, #48	; 0x30
   d63f8:	2b00      	cmp	r3, #0
   d63fa:	d1b9      	bne.n	d6370 <_strtoul_r+0x58>
   d63fc:	2308      	movs	r3, #8
   d63fe:	e7b7      	b.n	d6370 <_strtoul_r+0x58>
   d6400:	230a      	movs	r3, #10
   d6402:	e7b5      	b.n	d6370 <_strtoul_r+0x58>
   d6404:	2c30      	cmp	r4, #48	; 0x30
   d6406:	d0ab      	beq.n	d6360 <_strtoul_r+0x48>
   d6408:	e7b2      	b.n	d6370 <_strtoul_r+0x58>
   d640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d640e:	bf00      	nop
   d6410:	2003e268 	.word	0x2003e268

000d6414 <strtoul>:
   d6414:	4613      	mov	r3, r2
   d6416:	460a      	mov	r2, r1
   d6418:	4601      	mov	r1, r0
   d641a:	4802      	ldr	r0, [pc, #8]	; (d6424 <strtoul+0x10>)
   d641c:	6800      	ldr	r0, [r0, #0]
   d641e:	f7ff bf7b 	b.w	d6318 <_strtoul_r>
   d6422:	bf00      	nop
   d6424:	2003e2cc 	.word	0x2003e2cc

000d6428 <__tzcalc_limits>:
   d6428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d642c:	4604      	mov	r4, r0
   d642e:	f000 fa6f 	bl	d6910 <__gettzinfo>
   d6432:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d6436:	429c      	cmp	r4, r3
   d6438:	f340 8096 	ble.w	d6568 <__tzcalc_limits+0x140>
   d643c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d6440:	18e3      	adds	r3, r4, r3
   d6442:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d6446:	109b      	asrs	r3, r3, #2
   d6448:	f240 156d 	movw	r5, #365	; 0x16d
   d644c:	fb05 3502 	mla	r5, r5, r2, r3
   d6450:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d6454:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d6458:	fb92 f3f3 	sdiv	r3, r2, r3
   d645c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d6460:	442b      	add	r3, r5
   d6462:	18a5      	adds	r5, r4, r2
   d6464:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6468:	fb95 f5f2 	sdiv	r5, r5, r2
   d646c:	441d      	add	r5, r3
   d646e:	2364      	movs	r3, #100	; 0x64
   d6470:	fb94 f7f2 	sdiv	r7, r4, r2
   d6474:	fb94 f6f3 	sdiv	r6, r4, r3
   d6478:	fb02 4717 	mls	r7, r2, r7, r4
   d647c:	fb03 4616 	mls	r6, r3, r6, r4
   d6480:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d6484:	fab7 fe87 	clz	lr, r7
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	f004 0303 	and.w	r3, r4, #3
   d648e:	6044      	str	r4, [r0, #4]
   d6490:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d6494:	4601      	mov	r1, r0
   d6496:	9300      	str	r3, [sp, #0]
   d6498:	f04f 0c07 	mov.w	ip, #7
   d649c:	7a0b      	ldrb	r3, [r1, #8]
   d649e:	2b4a      	cmp	r3, #74	; 0x4a
   d64a0:	d10e      	bne.n	d64c0 <__tzcalc_limits+0x98>
   d64a2:	694b      	ldr	r3, [r1, #20]
   d64a4:	9a00      	ldr	r2, [sp, #0]
   d64a6:	18ec      	adds	r4, r5, r3
   d64a8:	b902      	cbnz	r2, d64ac <__tzcalc_limits+0x84>
   d64aa:	b906      	cbnz	r6, d64ae <__tzcalc_limits+0x86>
   d64ac:	b927      	cbnz	r7, d64b8 <__tzcalc_limits+0x90>
   d64ae:	2b3b      	cmp	r3, #59	; 0x3b
   d64b0:	bfd4      	ite	le
   d64b2:	2300      	movle	r3, #0
   d64b4:	2301      	movgt	r3, #1
   d64b6:	e000      	b.n	d64ba <__tzcalc_limits+0x92>
   d64b8:	2300      	movs	r3, #0
   d64ba:	4423      	add	r3, r4
   d64bc:	3b01      	subs	r3, #1
   d64be:	e03f      	b.n	d6540 <__tzcalc_limits+0x118>
   d64c0:	2b44      	cmp	r3, #68	; 0x44
   d64c2:	d102      	bne.n	d64ca <__tzcalc_limits+0xa2>
   d64c4:	694b      	ldr	r3, [r1, #20]
   d64c6:	442b      	add	r3, r5
   d64c8:	e03a      	b.n	d6540 <__tzcalc_limits+0x118>
   d64ca:	9b00      	ldr	r3, [sp, #0]
   d64cc:	b92b      	cbnz	r3, d64da <__tzcalc_limits+0xb2>
   d64ce:	2e00      	cmp	r6, #0
   d64d0:	bf0c      	ite	eq
   d64d2:	46f0      	moveq	r8, lr
   d64d4:	f04f 0801 	movne.w	r8, #1
   d64d8:	e000      	b.n	d64dc <__tzcalc_limits+0xb4>
   d64da:	46f0      	mov	r8, lr
   d64dc:	4b24      	ldr	r3, [pc, #144]	; (d6570 <__tzcalc_limits+0x148>)
   d64de:	68cc      	ldr	r4, [r1, #12]
   d64e0:	2230      	movs	r2, #48	; 0x30
   d64e2:	fb02 3808 	mla	r8, r2, r8, r3
   d64e6:	f1a8 0a04 	sub.w	sl, r8, #4
   d64ea:	46a9      	mov	r9, r5
   d64ec:	2301      	movs	r3, #1
   d64ee:	42a3      	cmp	r3, r4
   d64f0:	da04      	bge.n	d64fc <__tzcalc_limits+0xd4>
   d64f2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d64f6:	3301      	adds	r3, #1
   d64f8:	44d9      	add	r9, fp
   d64fa:	e7f8      	b.n	d64ee <__tzcalc_limits+0xc6>
   d64fc:	f109 0304 	add.w	r3, r9, #4
   d6500:	fb93 fbfc 	sdiv	fp, r3, ip
   d6504:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d6508:	2c01      	cmp	r4, #1
   d650a:	ebca 0a03 	rsb	sl, sl, r3
   d650e:	694b      	ldr	r3, [r1, #20]
   d6510:	bfb8      	it	lt
   d6512:	2401      	movlt	r4, #1
   d6514:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d6518:	ebb3 0a0a 	subs.w	sl, r3, sl
   d651c:	690b      	ldr	r3, [r1, #16]
   d651e:	f104 34ff 	add.w	r4, r4, #4294967295
   d6522:	f103 33ff 	add.w	r3, r3, #4294967295
   d6526:	bf48      	it	mi
   d6528:	f10a 0a07 	addmi.w	sl, sl, #7
   d652c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d6530:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d6534:	4453      	add	r3, sl
   d6536:	42a3      	cmp	r3, r4
   d6538:	db01      	blt.n	d653e <__tzcalc_limits+0x116>
   d653a:	3b07      	subs	r3, #7
   d653c:	e7fb      	b.n	d6536 <__tzcalc_limits+0x10e>
   d653e:	444b      	add	r3, r9
   d6540:	698c      	ldr	r4, [r1, #24]
   d6542:	4a0c      	ldr	r2, [pc, #48]	; (d6574 <__tzcalc_limits+0x14c>)
   d6544:	fb02 4303 	mla	r3, r2, r3, r4
   d6548:	6a0c      	ldr	r4, [r1, #32]
   d654a:	4423      	add	r3, r4
   d654c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d6550:	9b01      	ldr	r3, [sp, #4]
   d6552:	4299      	cmp	r1, r3
   d6554:	d1a2      	bne.n	d649c <__tzcalc_limits+0x74>
   d6556:	69c3      	ldr	r3, [r0, #28]
   d6558:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d655a:	4293      	cmp	r3, r2
   d655c:	bfac      	ite	ge
   d655e:	2300      	movge	r3, #0
   d6560:	2301      	movlt	r3, #1
   d6562:	6003      	str	r3, [r0, #0]
   d6564:	2001      	movs	r0, #1
   d6566:	e000      	b.n	d656a <__tzcalc_limits+0x142>
   d6568:	2000      	movs	r0, #0
   d656a:	b003      	add	sp, #12
   d656c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6570:	000d6ea0 	.word	0x000d6ea0
   d6574:	00015180 	.word	0x00015180

000d6578 <__tz_lock>:
   d6578:	4770      	bx	lr

000d657a <__tz_unlock>:
   d657a:	4770      	bx	lr

000d657c <_tzset_unlocked>:
   d657c:	4b01      	ldr	r3, [pc, #4]	; (d6584 <_tzset_unlocked+0x8>)
   d657e:	6818      	ldr	r0, [r3, #0]
   d6580:	f000 b802 	b.w	d6588 <_tzset_unlocked_r>
   d6584:	2003e2cc 	.word	0x2003e2cc

000d6588 <_tzset_unlocked_r>:
   d6588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d658c:	b08d      	sub	sp, #52	; 0x34
   d658e:	4607      	mov	r7, r0
   d6590:	f000 f9be 	bl	d6910 <__gettzinfo>
   d6594:	49b0      	ldr	r1, [pc, #704]	; (d6858 <_tzset_unlocked_r+0x2d0>)
   d6596:	4eb1      	ldr	r6, [pc, #708]	; (d685c <_tzset_unlocked_r+0x2d4>)
   d6598:	4604      	mov	r4, r0
   d659a:	4638      	mov	r0, r7
   d659c:	f000 f9b0 	bl	d6900 <_getenv_r>
   d65a0:	4605      	mov	r5, r0
   d65a2:	b960      	cbnz	r0, d65be <_tzset_unlocked_r+0x36>
   d65a4:	4bae      	ldr	r3, [pc, #696]	; (d6860 <_tzset_unlocked_r+0x2d8>)
   d65a6:	4aaf      	ldr	r2, [pc, #700]	; (d6864 <_tzset_unlocked_r+0x2dc>)
   d65a8:	6018      	str	r0, [r3, #0]
   d65aa:	4baf      	ldr	r3, [pc, #700]	; (d6868 <_tzset_unlocked_r+0x2e0>)
   d65ac:	6018      	str	r0, [r3, #0]
   d65ae:	4baf      	ldr	r3, [pc, #700]	; (d686c <_tzset_unlocked_r+0x2e4>)
   d65b0:	6830      	ldr	r0, [r6, #0]
   d65b2:	601a      	str	r2, [r3, #0]
   d65b4:	605a      	str	r2, [r3, #4]
   d65b6:	f7fe f961 	bl	d487c <free>
   d65ba:	6035      	str	r5, [r6, #0]
   d65bc:	e148      	b.n	d6850 <_tzset_unlocked_r+0x2c8>
   d65be:	6831      	ldr	r1, [r6, #0]
   d65c0:	b979      	cbnz	r1, d65e2 <_tzset_unlocked_r+0x5a>
   d65c2:	6830      	ldr	r0, [r6, #0]
   d65c4:	f7fe f95a 	bl	d487c <free>
   d65c8:	4628      	mov	r0, r5
   d65ca:	f7ff fe88 	bl	d62de <strlen>
   d65ce:	1c41      	adds	r1, r0, #1
   d65d0:	4638      	mov	r0, r7
   d65d2:	f7fe f973 	bl	d48bc <_malloc_r>
   d65d6:	6030      	str	r0, [r6, #0]
   d65d8:	b148      	cbz	r0, d65ee <_tzset_unlocked_r+0x66>
   d65da:	4629      	mov	r1, r5
   d65dc:	f7ff fe5b 	bl	d6296 <strcpy>
   d65e0:	e005      	b.n	d65ee <_tzset_unlocked_r+0x66>
   d65e2:	f7ff fe4e 	bl	d6282 <strcmp>
   d65e6:	2800      	cmp	r0, #0
   d65e8:	f000 8132 	beq.w	d6850 <_tzset_unlocked_r+0x2c8>
   d65ec:	e7e9      	b.n	d65c2 <_tzset_unlocked_r+0x3a>
   d65ee:	782b      	ldrb	r3, [r5, #0]
   d65f0:	4a9f      	ldr	r2, [pc, #636]	; (d6870 <_tzset_unlocked_r+0x2e8>)
   d65f2:	49a0      	ldr	r1, [pc, #640]	; (d6874 <_tzset_unlocked_r+0x2ec>)
   d65f4:	2b3a      	cmp	r3, #58	; 0x3a
   d65f6:	bf08      	it	eq
   d65f8:	3501      	addeq	r5, #1
   d65fa:	ae0a      	add	r6, sp, #40	; 0x28
   d65fc:	4633      	mov	r3, r6
   d65fe:	4628      	mov	r0, r5
   d6600:	f7fe f94c 	bl	d489c <siscanf>
   d6604:	2800      	cmp	r0, #0
   d6606:	f340 8123 	ble.w	d6850 <_tzset_unlocked_r+0x2c8>
   d660a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d660c:	18ef      	adds	r7, r5, r3
   d660e:	5ceb      	ldrb	r3, [r5, r3]
   d6610:	2b2d      	cmp	r3, #45	; 0x2d
   d6612:	d103      	bne.n	d661c <_tzset_unlocked_r+0x94>
   d6614:	3701      	adds	r7, #1
   d6616:	f04f 35ff 	mov.w	r5, #4294967295
   d661a:	e003      	b.n	d6624 <_tzset_unlocked_r+0x9c>
   d661c:	2b2b      	cmp	r3, #43	; 0x2b
   d661e:	bf08      	it	eq
   d6620:	3701      	addeq	r7, #1
   d6622:	2501      	movs	r5, #1
   d6624:	f10d 0a20 	add.w	sl, sp, #32
   d6628:	f10d 0b1e 	add.w	fp, sp, #30
   d662c:	f04f 0800 	mov.w	r8, #0
   d6630:	9603      	str	r6, [sp, #12]
   d6632:	f8cd a008 	str.w	sl, [sp, #8]
   d6636:	9601      	str	r6, [sp, #4]
   d6638:	f8cd b000 	str.w	fp, [sp]
   d663c:	4633      	mov	r3, r6
   d663e:	aa07      	add	r2, sp, #28
   d6640:	498d      	ldr	r1, [pc, #564]	; (d6878 <_tzset_unlocked_r+0x2f0>)
   d6642:	f8ad 801e 	strh.w	r8, [sp, #30]
   d6646:	4638      	mov	r0, r7
   d6648:	f8ad 8020 	strh.w	r8, [sp, #32]
   d664c:	f7fe f926 	bl	d489c <siscanf>
   d6650:	4540      	cmp	r0, r8
   d6652:	f340 80fd 	ble.w	d6850 <_tzset_unlocked_r+0x2c8>
   d6656:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d665a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d665e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d6884 <_tzset_unlocked_r+0x2fc>
   d6662:	213c      	movs	r1, #60	; 0x3c
   d6664:	fb01 3302 	mla	r3, r1, r2, r3
   d6668:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d666c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d6670:	fb01 3302 	mla	r3, r1, r2, r3
   d6674:	435d      	muls	r5, r3
   d6676:	6225      	str	r5, [r4, #32]
   d6678:	4d7c      	ldr	r5, [pc, #496]	; (d686c <_tzset_unlocked_r+0x2e4>)
   d667a:	4b7d      	ldr	r3, [pc, #500]	; (d6870 <_tzset_unlocked_r+0x2e8>)
   d667c:	602b      	str	r3, [r5, #0]
   d667e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6680:	497c      	ldr	r1, [pc, #496]	; (d6874 <_tzset_unlocked_r+0x2ec>)
   d6682:	441f      	add	r7, r3
   d6684:	464a      	mov	r2, r9
   d6686:	4633      	mov	r3, r6
   d6688:	4638      	mov	r0, r7
   d668a:	f7fe f907 	bl	d489c <siscanf>
   d668e:	4540      	cmp	r0, r8
   d6690:	dc08      	bgt.n	d66a4 <_tzset_unlocked_r+0x11c>
   d6692:	682b      	ldr	r3, [r5, #0]
   d6694:	606b      	str	r3, [r5, #4]
   d6696:	4b72      	ldr	r3, [pc, #456]	; (d6860 <_tzset_unlocked_r+0x2d8>)
   d6698:	6a22      	ldr	r2, [r4, #32]
   d669a:	601a      	str	r2, [r3, #0]
   d669c:	4b72      	ldr	r3, [pc, #456]	; (d6868 <_tzset_unlocked_r+0x2e0>)
   d669e:	f8c3 8000 	str.w	r8, [r3]
   d66a2:	e0d5      	b.n	d6850 <_tzset_unlocked_r+0x2c8>
   d66a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d66a6:	f8c5 9004 	str.w	r9, [r5, #4]
   d66aa:	18fd      	adds	r5, r7, r3
   d66ac:	5cfb      	ldrb	r3, [r7, r3]
   d66ae:	2b2d      	cmp	r3, #45	; 0x2d
   d66b0:	d103      	bne.n	d66ba <_tzset_unlocked_r+0x132>
   d66b2:	3501      	adds	r5, #1
   d66b4:	f04f 37ff 	mov.w	r7, #4294967295
   d66b8:	e003      	b.n	d66c2 <_tzset_unlocked_r+0x13a>
   d66ba:	2b2b      	cmp	r3, #43	; 0x2b
   d66bc:	bf08      	it	eq
   d66be:	3501      	addeq	r5, #1
   d66c0:	2701      	movs	r7, #1
   d66c2:	2300      	movs	r3, #0
   d66c4:	f8ad 301c 	strh.w	r3, [sp, #28]
   d66c8:	f8ad 301e 	strh.w	r3, [sp, #30]
   d66cc:	f8ad 3020 	strh.w	r3, [sp, #32]
   d66d0:	930a      	str	r3, [sp, #40]	; 0x28
   d66d2:	9603      	str	r6, [sp, #12]
   d66d4:	f8cd a008 	str.w	sl, [sp, #8]
   d66d8:	9601      	str	r6, [sp, #4]
   d66da:	f8cd b000 	str.w	fp, [sp]
   d66de:	4633      	mov	r3, r6
   d66e0:	aa07      	add	r2, sp, #28
   d66e2:	4965      	ldr	r1, [pc, #404]	; (d6878 <_tzset_unlocked_r+0x2f0>)
   d66e4:	4628      	mov	r0, r5
   d66e6:	f7fe f8d9 	bl	d489c <siscanf>
   d66ea:	2800      	cmp	r0, #0
   d66ec:	dc04      	bgt.n	d66f8 <_tzset_unlocked_r+0x170>
   d66ee:	6a23      	ldr	r3, [r4, #32]
   d66f0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d66f4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d66f6:	e00e      	b.n	d6716 <_tzset_unlocked_r+0x18e>
   d66f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d66fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6700:	213c      	movs	r1, #60	; 0x3c
   d6702:	fb01 3302 	mla	r3, r1, r2, r3
   d6706:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d670a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d670e:	fb01 3302 	mla	r3, r1, r2, r3
   d6712:	435f      	muls	r7, r3
   d6714:	63e7      	str	r7, [r4, #60]	; 0x3c
   d6716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6718:	4627      	mov	r7, r4
   d671a:	441d      	add	r5, r3
   d671c:	f04f 0900 	mov.w	r9, #0
   d6720:	782b      	ldrb	r3, [r5, #0]
   d6722:	2b2c      	cmp	r3, #44	; 0x2c
   d6724:	bf08      	it	eq
   d6726:	3501      	addeq	r5, #1
   d6728:	f895 8000 	ldrb.w	r8, [r5]
   d672c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d6730:	d126      	bne.n	d6780 <_tzset_unlocked_r+0x1f8>
   d6732:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d6736:	9302      	str	r3, [sp, #8]
   d6738:	ab09      	add	r3, sp, #36	; 0x24
   d673a:	9300      	str	r3, [sp, #0]
   d673c:	9603      	str	r6, [sp, #12]
   d673e:	9601      	str	r6, [sp, #4]
   d6740:	4633      	mov	r3, r6
   d6742:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6746:	494d      	ldr	r1, [pc, #308]	; (d687c <_tzset_unlocked_r+0x2f4>)
   d6748:	4628      	mov	r0, r5
   d674a:	f7fe f8a7 	bl	d489c <siscanf>
   d674e:	2803      	cmp	r0, #3
   d6750:	d17e      	bne.n	d6850 <_tzset_unlocked_r+0x2c8>
   d6752:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d6756:	1e4b      	subs	r3, r1, #1
   d6758:	2b0b      	cmp	r3, #11
   d675a:	d879      	bhi.n	d6850 <_tzset_unlocked_r+0x2c8>
   d675c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d6760:	1e53      	subs	r3, r2, #1
   d6762:	2b04      	cmp	r3, #4
   d6764:	d874      	bhi.n	d6850 <_tzset_unlocked_r+0x2c8>
   d6766:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d676a:	2b06      	cmp	r3, #6
   d676c:	d870      	bhi.n	d6850 <_tzset_unlocked_r+0x2c8>
   d676e:	f887 8008 	strb.w	r8, [r7, #8]
   d6772:	60f9      	str	r1, [r7, #12]
   d6774:	613a      	str	r2, [r7, #16]
   d6776:	617b      	str	r3, [r7, #20]
   d6778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d677a:	eb05 0803 	add.w	r8, r5, r3
   d677e:	e02a      	b.n	d67d6 <_tzset_unlocked_r+0x24e>
   d6780:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d6784:	bf06      	itte	eq
   d6786:	3501      	addeq	r5, #1
   d6788:	4643      	moveq	r3, r8
   d678a:	2344      	movne	r3, #68	; 0x44
   d678c:	220a      	movs	r2, #10
   d678e:	a90b      	add	r1, sp, #44	; 0x2c
   d6790:	4628      	mov	r0, r5
   d6792:	9305      	str	r3, [sp, #20]
   d6794:	f7ff fe3e 	bl	d6414 <strtoul>
   d6798:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d679c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d67a0:	4545      	cmp	r5, r8
   d67a2:	9b05      	ldr	r3, [sp, #20]
   d67a4:	d114      	bne.n	d67d0 <_tzset_unlocked_r+0x248>
   d67a6:	234d      	movs	r3, #77	; 0x4d
   d67a8:	f1b9 0f00 	cmp.w	r9, #0
   d67ac:	d107      	bne.n	d67be <_tzset_unlocked_r+0x236>
   d67ae:	7223      	strb	r3, [r4, #8]
   d67b0:	2303      	movs	r3, #3
   d67b2:	60e3      	str	r3, [r4, #12]
   d67b4:	2302      	movs	r3, #2
   d67b6:	6123      	str	r3, [r4, #16]
   d67b8:	f8c4 9014 	str.w	r9, [r4, #20]
   d67bc:	e00b      	b.n	d67d6 <_tzset_unlocked_r+0x24e>
   d67be:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d67c2:	230b      	movs	r3, #11
   d67c4:	62a3      	str	r3, [r4, #40]	; 0x28
   d67c6:	2301      	movs	r3, #1
   d67c8:	62e3      	str	r3, [r4, #44]	; 0x2c
   d67ca:	2300      	movs	r3, #0
   d67cc:	6323      	str	r3, [r4, #48]	; 0x30
   d67ce:	e002      	b.n	d67d6 <_tzset_unlocked_r+0x24e>
   d67d0:	b280      	uxth	r0, r0
   d67d2:	723b      	strb	r3, [r7, #8]
   d67d4:	6178      	str	r0, [r7, #20]
   d67d6:	2302      	movs	r3, #2
   d67d8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d67dc:	2300      	movs	r3, #0
   d67de:	f8ad 301e 	strh.w	r3, [sp, #30]
   d67e2:	f8ad 3020 	strh.w	r3, [sp, #32]
   d67e6:	930a      	str	r3, [sp, #40]	; 0x28
   d67e8:	f898 3000 	ldrb.w	r3, [r8]
   d67ec:	2b2f      	cmp	r3, #47	; 0x2f
   d67ee:	d10b      	bne.n	d6808 <_tzset_unlocked_r+0x280>
   d67f0:	9603      	str	r6, [sp, #12]
   d67f2:	f8cd a008 	str.w	sl, [sp, #8]
   d67f6:	9601      	str	r6, [sp, #4]
   d67f8:	f8cd b000 	str.w	fp, [sp]
   d67fc:	4633      	mov	r3, r6
   d67fe:	aa07      	add	r2, sp, #28
   d6800:	491f      	ldr	r1, [pc, #124]	; (d6880 <_tzset_unlocked_r+0x2f8>)
   d6802:	4640      	mov	r0, r8
   d6804:	f7fe f84a 	bl	d489c <siscanf>
   d6808:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d680c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d6810:	213c      	movs	r1, #60	; 0x3c
   d6812:	fb01 3302 	mla	r3, r1, r2, r3
   d6816:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d681a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d681e:	fb01 3302 	mla	r3, r1, r2, r3
   d6822:	61bb      	str	r3, [r7, #24]
   d6824:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d6826:	f109 0901 	add.w	r9, r9, #1
   d682a:	f1b9 0f02 	cmp.w	r9, #2
   d682e:	4445      	add	r5, r8
   d6830:	f107 071c 	add.w	r7, r7, #28
   d6834:	f47f af74 	bne.w	d6720 <_tzset_unlocked_r+0x198>
   d6838:	6860      	ldr	r0, [r4, #4]
   d683a:	f7ff fdf5 	bl	d6428 <__tzcalc_limits>
   d683e:	4b08      	ldr	r3, [pc, #32]	; (d6860 <_tzset_unlocked_r+0x2d8>)
   d6840:	6a22      	ldr	r2, [r4, #32]
   d6842:	601a      	str	r2, [r3, #0]
   d6844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6846:	1a9b      	subs	r3, r3, r2
   d6848:	4a07      	ldr	r2, [pc, #28]	; (d6868 <_tzset_unlocked_r+0x2e0>)
   d684a:	bf18      	it	ne
   d684c:	2301      	movne	r3, #1
   d684e:	6013      	str	r3, [r2, #0]
   d6850:	b00d      	add	sp, #52	; 0x34
   d6852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6856:	bf00      	nop
   d6858:	000d6f00 	.word	0x000d6f00
   d685c:	2003e7e0 	.word	0x2003e7e0
   d6860:	2003e7e8 	.word	0x2003e7e8
   d6864:	000d6f03 	.word	0x000d6f03
   d6868:	2003e7e4 	.word	0x2003e7e4
   d686c:	2003e2d0 	.word	0x2003e2d0
   d6870:	2003e7d3 	.word	0x2003e7d3
   d6874:	000d6f07 	.word	0x000d6f07
   d6878:	000d6f2a 	.word	0x000d6f2a
   d687c:	000d6f16 	.word	0x000d6f16
   d6880:	000d6f29 	.word	0x000d6f29
   d6884:	2003e7c8 	.word	0x2003e7c8

000d6888 <_findenv_r>:
   d6888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d688c:	4607      	mov	r7, r0
   d688e:	468b      	mov	fp, r1
   d6890:	4690      	mov	r8, r2
   d6892:	f000 f8d9 	bl	d6a48 <__env_lock>
   d6896:	4b19      	ldr	r3, [pc, #100]	; (d68fc <_findenv_r+0x74>)
   d6898:	681d      	ldr	r5, [r3, #0]
   d689a:	469a      	mov	sl, r3
   d689c:	b13d      	cbz	r5, d68ae <_findenv_r+0x26>
   d689e:	465c      	mov	r4, fp
   d68a0:	4623      	mov	r3, r4
   d68a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d68a6:	b142      	cbz	r2, d68ba <_findenv_r+0x32>
   d68a8:	2a3d      	cmp	r2, #61	; 0x3d
   d68aa:	461c      	mov	r4, r3
   d68ac:	d1f8      	bne.n	d68a0 <_findenv_r+0x18>
   d68ae:	4638      	mov	r0, r7
   d68b0:	f000 f8cb 	bl	d6a4a <__env_unlock>
   d68b4:	2000      	movs	r0, #0
   d68b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68ba:	ebcb 0404 	rsb	r4, fp, r4
   d68be:	46a9      	mov	r9, r5
   d68c0:	f859 0b04 	ldr.w	r0, [r9], #4
   d68c4:	2800      	cmp	r0, #0
   d68c6:	d0f2      	beq.n	d68ae <_findenv_r+0x26>
   d68c8:	4622      	mov	r2, r4
   d68ca:	4659      	mov	r1, fp
   d68cc:	f7ff fd0f 	bl	d62ee <strncmp>
   d68d0:	b988      	cbnz	r0, d68f6 <_findenv_r+0x6e>
   d68d2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d68d6:	191e      	adds	r6, r3, r4
   d68d8:	5d1b      	ldrb	r3, [r3, r4]
   d68da:	2b3d      	cmp	r3, #61	; 0x3d
   d68dc:	d10b      	bne.n	d68f6 <_findenv_r+0x6e>
   d68de:	f8da 3000 	ldr.w	r3, [sl]
   d68e2:	1aed      	subs	r5, r5, r3
   d68e4:	10ad      	asrs	r5, r5, #2
   d68e6:	4638      	mov	r0, r7
   d68e8:	f8c8 5000 	str.w	r5, [r8]
   d68ec:	f000 f8ad 	bl	d6a4a <__env_unlock>
   d68f0:	1c70      	adds	r0, r6, #1
   d68f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d68f6:	464d      	mov	r5, r9
   d68f8:	e7e1      	b.n	d68be <_findenv_r+0x36>
   d68fa:	bf00      	nop
   d68fc:	2003e318 	.word	0x2003e318

000d6900 <_getenv_r>:
   d6900:	b507      	push	{r0, r1, r2, lr}
   d6902:	aa01      	add	r2, sp, #4
   d6904:	f7ff ffc0 	bl	d6888 <_findenv_r>
   d6908:	b003      	add	sp, #12
   d690a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6910 <__gettzinfo>:
   d6910:	4800      	ldr	r0, [pc, #0]	; (d6914 <__gettzinfo+0x4>)
   d6912:	4770      	bx	lr
   d6914:	2003e2d8 	.word	0x2003e2d8

000d6918 <gmtime_r>:
   d6918:	6802      	ldr	r2, [r0, #0]
   d691a:	4b47      	ldr	r3, [pc, #284]	; (d6a38 <gmtime_r+0x120>)
   d691c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d691e:	fb92 f4f3 	sdiv	r4, r2, r3
   d6922:	fb03 2214 	mls	r2, r3, r4, r2
   d6926:	2a00      	cmp	r2, #0
   d6928:	bfbc      	itt	lt
   d692a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d692e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d6932:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d6936:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d693a:	fb92 f3f0 	sdiv	r3, r2, r0
   d693e:	fb00 2213 	mls	r2, r0, r3, r2
   d6942:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d6946:	bfac      	ite	ge
   d6948:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d694c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d6950:	608b      	str	r3, [r1, #8]
   d6952:	fb92 f3f0 	sdiv	r3, r2, r0
   d6956:	fb00 2213 	mls	r2, r0, r3, r2
   d695a:	604b      	str	r3, [r1, #4]
   d695c:	600a      	str	r2, [r1, #0]
   d695e:	2307      	movs	r3, #7
   d6960:	1ce2      	adds	r2, r4, #3
   d6962:	fb92 f3f3 	sdiv	r3, r2, r3
   d6966:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d696a:	1ad3      	subs	r3, r2, r3
   d696c:	618b      	str	r3, [r1, #24]
   d696e:	4b33      	ldr	r3, [pc, #204]	; (d6a3c <gmtime_r+0x124>)
   d6970:	4d33      	ldr	r5, [pc, #204]	; (d6a40 <gmtime_r+0x128>)
   d6972:	fb94 f5f5 	sdiv	r5, r4, r5
   d6976:	fb03 4405 	mla	r4, r3, r5, r4
   d697a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d697e:	fbb4 f2f2 	udiv	r2, r4, r2
   d6982:	4422      	add	r2, r4
   d6984:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d6988:	fbb4 f3f7 	udiv	r3, r4, r7
   d698c:	1ad2      	subs	r2, r2, r3
   d698e:	482d      	ldr	r0, [pc, #180]	; (d6a44 <gmtime_r+0x12c>)
   d6990:	fbb4 f0f0 	udiv	r0, r4, r0
   d6994:	f648 6694 	movw	r6, #36500	; 0x8e94
   d6998:	1a13      	subs	r3, r2, r0
   d699a:	fbb3 f6f6 	udiv	r6, r3, r6
   d699e:	4434      	add	r4, r6
   d69a0:	f240 126d 	movw	r2, #365	; 0x16d
   d69a4:	fbb3 f0f2 	udiv	r0, r3, r2
   d69a8:	fbb3 f3f7 	udiv	r3, r3, r7
   d69ac:	1ae3      	subs	r3, r4, r3
   d69ae:	fb02 3310 	mls	r3, r2, r0, r3
   d69b2:	2499      	movs	r4, #153	; 0x99
   d69b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d69b8:	3202      	adds	r2, #2
   d69ba:	fbb2 f2f4 	udiv	r2, r2, r4
   d69be:	2a0a      	cmp	r2, #10
   d69c0:	fb04 f402 	mul.w	r4, r4, r2
   d69c4:	f104 0602 	add.w	r6, r4, #2
   d69c8:	f04f 0405 	mov.w	r4, #5
   d69cc:	fbb6 f4f4 	udiv	r4, r6, r4
   d69d0:	bf34      	ite	cc
   d69d2:	2602      	movcc	r6, #2
   d69d4:	f06f 0609 	mvncs.w	r6, #9
   d69d8:	4416      	add	r6, r2
   d69da:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d69de:	fb02 0505 	mla	r5, r2, r5, r0
   d69e2:	1c5f      	adds	r7, r3, #1
   d69e4:	2e01      	cmp	r6, #1
   d69e6:	bf98      	it	ls
   d69e8:	3501      	addls	r5, #1
   d69ea:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d69ee:	eba7 0704 	sub.w	r7, r7, r4
   d69f2:	d302      	bcc.n	d69fa <gmtime_r+0xe2>
   d69f4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d69f8:	e014      	b.n	d6a24 <gmtime_r+0x10c>
   d69fa:	0782      	lsls	r2, r0, #30
   d69fc:	d105      	bne.n	d6a0a <gmtime_r+0xf2>
   d69fe:	2464      	movs	r4, #100	; 0x64
   d6a00:	fbb0 f2f4 	udiv	r2, r0, r4
   d6a04:	fb04 0212 	mls	r2, r4, r2, r0
   d6a08:	b94a      	cbnz	r2, d6a1e <gmtime_r+0x106>
   d6a0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d6a0e:	fbb0 f4f2 	udiv	r4, r0, r2
   d6a12:	fb02 0014 	mls	r0, r2, r4, r0
   d6a16:	fab0 f280 	clz	r2, r0
   d6a1a:	0952      	lsrs	r2, r2, #5
   d6a1c:	e000      	b.n	d6a20 <gmtime_r+0x108>
   d6a1e:	2201      	movs	r2, #1
   d6a20:	333b      	adds	r3, #59	; 0x3b
   d6a22:	441a      	add	r2, r3
   d6a24:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d6a28:	2300      	movs	r3, #0
   d6a2a:	61ca      	str	r2, [r1, #28]
   d6a2c:	614d      	str	r5, [r1, #20]
   d6a2e:	610e      	str	r6, [r1, #16]
   d6a30:	60cf      	str	r7, [r1, #12]
   d6a32:	620b      	str	r3, [r1, #32]
   d6a34:	4608      	mov	r0, r1
   d6a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6a38:	00015180 	.word	0x00015180
   d6a3c:	fffdc54f 	.word	0xfffdc54f
   d6a40:	00023ab1 	.word	0x00023ab1
   d6a44:	00023ab0 	.word	0x00023ab0

000d6a48 <__env_lock>:
   d6a48:	4770      	bx	lr

000d6a4a <__env_unlock>:
   d6a4a:	4770      	bx	lr

000d6a4c <dynalib_user>:
   d6a4c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6a5c:	0000 0000 7453 7461 7375 6152 6e69 6147     ....StatusRainGa
   d6a6c:	6775 0065 6150 6c79 616f 3a64 2c00 3031     uge.Payload:.,10
   d6a7c:	3334 002c 6554 706d 4d00 7365 6173 6567     43,.Temp.Message
   d6a8c:	7320 6e65 0074 6c53 6565 0070                sent.Sleep.

000d6a98 <_ZTVN5spark13EthernetClassE>:
	...
   d6aa0:	492b 000d 4921 000d 4917 000d 490d 000d     +I..!I...I...I..
   d6ab0:	4901 000d 48f5 000d 48e9 000d 48e1 000d     .I...H...H...H..
   d6ac0:	48d7 000d 48cd 000d 5b15 000d               .H...H...[..

000d6acc <_ZTV8SPIClass>:
	...
   d6ad4:	4949 000d 494b 000d 6162 6475 5300 7265     II..KI..baud.Ser
   d6ae4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6af4:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6b04:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6b14:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6b24:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6b34:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6b44:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6b54:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6b64:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6b74:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6b84:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d6b94:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d6ba4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d6bb4:	6e61 6369 6100 6c6c 2500 302b 6433 253a     anic.all.%+03d:%
   d6bc4:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d6bd4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6be4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6bec:	4f51 000d 4f57 000d 4f9b 000d 4f65 000d     QO..WO...O..eO..
   d6bfc:	4f53 000d                                   SO..

000d6c00 <_ZTV9IPAddress>:
	...
   d6c08:	54e9 000d 54d9 000d 54db 000d               .T...T...T..

000d6c14 <_ZTV9USBSerial>:
	...
   d6c1c:	55c1 000d 5611 000d 561f 000d 4bc5 000d     .U...V...V...K..
   d6c2c:	55fd 000d 55c3 000d 55d9 000d 560b 000d     .U...U...U...V..
   d6c3c:	55ef 000d 55bd 000d                         .U...U..

000d6c44 <_ZTVN5spark13CellularClassE>:
	...
   d6c4c:	572b 000d 5721 000d 5717 000d 56cd 000d     +W..!W...W...V..
   d6c5c:	570b 000d 56ff 000d 56f3 000d 56eb 000d     .W...V...V...V..
   d6c6c:	56e1 000d 56d7 000d 5b15 000d               .V...V...[..

000d6c78 <_ZTV11USARTSerial>:
	...
   d6c80:	5765 000d 57b5 000d 57c3 000d 4bc5 000d     eW...W...W...K..
   d6c90:	5779 000d 579b 000d 5787 000d 57af 000d     yW...W...W...W..
   d6ca0:	5767 000d 576b 000d                         gW..kW..

000d6ca8 <_ZTV7TwoWire>:
	...
   d6cb0:	58c5 000d 590f 000d 58e7 000d 58c7 000d     .X...Y...X...X..
   d6cc0:	58ef 000d 58f7 000d 58ff 000d 5907 000d     .X...X...X...Y..

000d6cd0 <_ZTVN5spark9MeshClassE>:
	...
   d6cd8:	59a7 000d 599d 000d 5993 000d 5989 000d     .Y...Y...Y...Y..
   d6ce8:	597d 000d 5971 000d 5965 000d 595d 000d     }Y..qY..eY..]Y..
   d6cf8:	5953 000d 5949 000d 5b15 000d               SY..IY...[..

000d6d04 <_ZTVN5spark12NetworkClassE>:
	...
   d6d0c:	5aad 000d 5ab7 000d 5ac1 000d 5acb 000d     .Z...Z...Z...Z..
   d6d1c:	5ad5 000d 5ae1 000d 5aed 000d 5af9 000d     .Z...Z...Z...Z..
   d6d2c:	5b01 000d 5b0b 000d 5b15 000d               .[...[...[..

000d6d38 <_ctype_>:
   d6d38:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d6d48:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d6d58:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d6d68:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d6d78:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d6d88:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d6d98:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d6da8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d6db8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d6e3c <__sf_fake_stdin>:
	...

000d6e5c <__sf_fake_stdout>:
	...

000d6e7c <__sf_fake_stderr>:
	...
   d6e9c:	0043 0000                                   C...

000d6ea0 <__month_lengths>:
   d6ea0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d6eb0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6ec0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6ed0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d6ee0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d6ef0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d6f00:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d6f10:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d6f20:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d6f30:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d6f3c <link_const_variable_data_end>:
   d6f3c:	000d43f1 	.word	0x000d43f1
   d6f40:	000d4935 	.word	0x000d4935
   d6f44:	000d49b9 	.word	0x000d49b9
   d6f48:	000d4bb5 	.word	0x000d4bb5
   d6f4c:	000d4d15 	.word	0x000d4d15
   d6f50:	000d4e09 	.word	0x000d4e09
   d6f54:	000d4e61 	.word	0x000d4e61
   d6f58:	000d5735 	.word	0x000d5735
   d6f5c:	000d5a5d 	.word	0x000d5a5d
   d6f60:	000d5be1 	.word	0x000d5be1
   d6f64:	000d5cb9 	.word	0x000d5cb9
   d6f68:	000d5d51 	.word	0x000d5d51
   d6f6c:	000d5dd5 	.word	0x000d5dd5
   d6f70:	000d5e99 	.word	0x000d5e99
   d6f74:	000d5f5d 	.word	0x000d5f5d

000d6f78 <link_constructors_end>:
	...
